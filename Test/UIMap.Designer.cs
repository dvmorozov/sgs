// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 10.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace TownBreathTest
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.HtmlControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// LogOnLogOff - Use 'LogOnLogOffParams' to pass parameters into this method.
        /// </summary>
        public void LogOnLogOff()
        {
            #region Variable Declarations
            WinComboBox uIПерейтинавебсайтComboBox = this.UIMozillaFirefoxWindow.UIПанельнавигацииToolBar.UIПерейтинавебсайтComboBox;
            WinEdit uIПерейтинавебсайтEdit = this.UIMozillaFirefoxWindow.UIПерейтинавебсайтComboBox.UIПерейтинавебсайтEdit;
            WinEdit uILogOnEdit = this.UIMozillaFirefoxWindow.UILogOnHyperlink.UILogOnEdit;
            WinEdit uIUsernameEdit = this.UIMozillaFirefoxWindow.UIAccountInformationGroup.UIUsernameEdit;
            WinEdit uIPasswordEdit = this.UIMozillaFirefoxWindow.UIAccountInformationGroup.UIPasswordEdit;
            WinHyperlink uILogOffHyperlink = this.UIMozillaFirefoxWindow.UILogOffChangePasswordListItem.UILogOffHyperlink;
            WinButton uIЗакрытьButton = this.UIMozillaFirefoxWindow.UIWelcomeRationalCityMTitleBar.UIЗакрытьButton;
            #endregion

            // Launch '%ProgramFiles%\Mozilla Firefox\firefox.exe'
            ApplicationUnderTest uIMozillaFirefoxWindow = ApplicationUnderTest.Launch(this.LogOnLogOffParams.UIMozillaFirefoxWindowExePath, this.LogOnLogOffParams.UIMozillaFirefoxWindowAlternateExePath);

            // Select 'http://localhost:2374' in 'Перейти на веб-сайт' combo box
            uIПерейтинавебсайтComboBox.EditableItem = this.LogOnLogOffParams.UIПерейтинавебсайтComboBoxEditableItem;

            // Type '{Enter}' in 'Перейти на веб-сайт' text box
            Keyboard.SendKeys(uIПерейтинавебсайтEdit, this.LogOnLogOffParams.UIПерейтинавебсайтEditSendKeys, ModifierKeys.None);

            // Click 'Log On' text box
            Mouse.Click(uILogOnEdit, new Point(49, 12));

            // Type 'dmorozov' in 'User name' text box
            uIUsernameEdit.Text = this.LogOnLogOffParams.UIUsernameEditText;

            // Type '{Tab}' in 'User name' text box
            Keyboard.SendKeys(uIUsernameEdit, this.LogOnLogOffParams.UIUsernameEditSendKeys, ModifierKeys.None);

            // Type '********' in 'Password' text box
            Keyboard.SendKeys(uIPasswordEdit, this.LogOnLogOffParams.UIPasswordEditSendKeys, true);

            // Click 'Log Off' link
            Mouse.Click(uILogOffHyperlink, new Point(18, 28));

            // Click 'Закрыть' button
            Mouse.Click(uIЗакрытьButton, new Point(3, 9));
        }
        
        /// <summary>
        /// MozillaOpen - Use 'MozillaOpenParams' to pass parameters into this method.
        /// </summary>
        public void MozillaOpen()
        {
            #region Variable Declarations
            WinComboBox uIПерейтинавебсайтComboBox = this.UIMozillaFirefoxWindow.UIПанельнавигацииToolBar.UIПерейтинавебсайтComboBox;
            WinEdit uIПерейтинавебсайтEdit = this.UIMozillaFirefoxWindow.UIПерейтинавебсайтComboBox.UIПерейтинавебсайтEdit;
            #endregion

            // Launch '%ProgramFiles%\Mozilla Firefox\firefox.exe'
            ApplicationUnderTest uIMozillaFirefoxWindow = ApplicationUnderTest.Launch(this.MozillaOpenParams.UIMozillaFirefoxWindowExePath, this.MozillaOpenParams.UIMozillaFirefoxWindowAlternateExePath);

            // Select 'http://localhost:' in 'Перейти на веб-сайт' combo box
            uIПерейтинавебсайтComboBox.EditableItem = this.MozillaOpenParams.UIПерейтинавебсайтComboBoxEditableItem;

            // Select 'http://localhost:2374' in 'Перейти на веб-сайт' combo box
            uIПерейтинавебсайтComboBox.EditableItem = this.MozillaOpenParams.UIПерейтинавебсайтComboBoxEditableItem1;

            // Type '{Enter}' in 'Перейти на веб-сайт' text box
            Keyboard.SendKeys(uIПерейтинавебсайтEdit, this.MozillaOpenParams.UIПерейтинавебсайтEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// MozillaClose
        /// </summary>
        public void MozillaClose()
        {
            #region Variable Declarations
            WinButton uIЗакрытьButton = this.UIMozillaFirefoxWindow.UIWelcomeRationalCityMTitleBar.UIЗакрытьButton;
            #endregion

            // Click 'Закрыть' button
            Mouse.Click(uIЗакрытьButton, new Point(11, 5));
        }
        
        /// <summary>
        /// TypeName - Use 'TypeNameParams' to pass parameters into this method.
        /// </summary>
        public void TypeName()
        {
            #region Variable Declarations
            WinEdit uILogOnEdit = this.UIMozillaFirefoxWindow.UILogOnHyperlink.UILogOnEdit;
            WinEdit uIRegisterEdit = this.UIMozillaFirefoxWindow.UIRegisterHyperlink.UIRegisterEdit;
            WinEdit uIUsernameEdit = this.UIMozillaFirefoxWindow.UIItemCell.UIUsernameEdit;
            #endregion

            // Click 'Log On' text box
            Mouse.Click(uILogOnEdit, new Point(29, 11));

            // Click 'Register' text box
            Mouse.Click(uIRegisterEdit, new Point(16, 12));

            // Click 'User name' text box
            Mouse.Click(uIUsernameEdit, new Point(171, 10));

            // Type 'name' in 'User name' text box
            uIUsernameEdit.Text = this.TypeNameParams.UIUsernameEditText;
        }
        
        /// <summary>
        /// LogOn - Use 'LogOnParams' to pass parameters into this method.
        /// </summary>
        public void LogOn()
        {
            #region Variable Declarations
            HtmlHyperlink uILogOnHyperlink = this.UIBlankPageInternetExpWindow.UIWelcomeRationalCityDocument.UIMenuCustom.UILogOnHyperlink;
            HtmlDocument uILogOnDocument = this.UIBlankPageInternetExpWindow.UILogOnDocument;
            HtmlEdit uIUsernameEdit = this.UIBlankPageInternetExpWindow.UILogOnDocument.UIUsernameEdit;
            HtmlEdit uIPasswordEdit = this.UIBlankPageInternetExpWindow.UILogOnDocument.UIPasswordEdit;
            #endregion

            // Go to web page 'http://localhost:2374/' using new browser instance
            this.UIBlankPageInternetExpWindow10.LaunchUrl(new System.Uri(this.LogOnParams.UIBlankPageInternetExpWindow10Url));

            // Click 'Log On' link
            Mouse.Click(uILogOnHyperlink, new Point(37, 22));

            // Last mouse action was not recorded.

            // Type 'd' in 'Log On' document
            Keyboard.SendKeys(uILogOnDocument, this.LogOnParams.UILogOnDocumentSendKeys, ModifierKeys.None);

            // Type 'dmorozov' in 'User name' text box
            uIUsernameEdit.Text = this.LogOnParams.UIUsernameEditText;

            // Type '{Tab}' in 'User name' text box
            Keyboard.SendKeys(uIUsernameEdit, this.LogOnParams.UIUsernameEditSendKeys, ModifierKeys.None);

            // Type '********' in 'Password' text box
            uIPasswordEdit.Password = this.LogOnParams.UIPasswordEditPassword;

            // Type '{Enter}' in 'Password' text box
            Keyboard.SendKeys(uIPasswordEdit, this.LogOnParams.UIPasswordEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// AddMetersForIPs - Use 'AddMetersForIPsParams' to pass parameters into this method.
        /// </summary>
        public void AddMetersForIPs()
        {
            #region Variable Declarations
            HtmlHyperlink uILogOnHyperlink = this.UIBlankPageInternetExpWindow.UIWelcomeRationalCityDocument.UIMenuCustom.UILogOnHyperlink;
            HtmlCustom uIItemCustom = this.UIBlankPageInternetExpWindow.UILogOnDocument.UIMainPane.UIItemCustom;
            HtmlEdit uIUsernameEdit = this.UIBlankPageInternetExpWindow.UILogOnDocument.UIUsernameEdit;
            HtmlEdit uIPasswordEdit = this.UIBlankPageInternetExpWindow.UILogOnDocument.UIPasswordEdit;
            HtmlHyperlink uIMeterGroupsHyperlink = this.UIBlankPageInternetExpWindow.UIWelcomeRationalCityDocument.UIMenuCustom.UIMeterGroupsHyperlink;
            HtmlHyperlink uIAddMetersforIPrangeHyperlink = this.UIMetergroupsInternetEWindow.UIMetergroupsDocument.UIMainPane.UIAddMetersforIPrangeHyperlink;
            HtmlEdit uIGroupnameEdit = this.UIMetergroupsInternetEWindow.UICreatenewmeterrecordDocument.UIGroupnameEdit;
            HtmlComboBox uIDevicetypeComboBox = this.UIMetergroupsInternetEWindow.UICreatenewmeterrecordDocument.UIDevicetypeComboBox;
            HtmlEdit uIMeternameprefixEdit = this.UIMetergroupsInternetEWindow.UICreatenewmeterrecordDocument.UIMeternameprefixEdit;
            HtmlEdit uIInitialprimaryIPEdit = this.UIMetergroupsInternetEWindow.UICreatenewmeterrecordDocument.UIInitialprimaryIPEdit;
            HtmlEdit uIInititialIP2Edit = this.UIMetergroupsInternetEWindow.UICreatenewmeterrecordDocument.UIInititialIP2Edit;
            HtmlEdit uIInititialIP3Edit = this.UIMetergroupsInternetEWindow.UICreatenewmeterrecordDocument.UIInititialIP3Edit;
            HtmlEdit uIInititialIP4Edit = this.UIMetergroupsInternetEWindow.UICreatenewmeterrecordDocument.UIInititialIP4Edit;
            HtmlEdit uIFinalprimaryIPEdit = this.UIMetergroupsInternetEWindow.UICreatenewmeterrecordDocument.UIFinalprimaryIPEdit;
            HtmlEdit uIFinalIP2Edit = this.UIMetergroupsInternetEWindow.UICreatenewmeterrecordDocument.UIFinalIP2Edit;
            HtmlEdit uIFinalIP3Edit = this.UIMetergroupsInternetEWindow.UICreatenewmeterrecordDocument.UIFinalIP3Edit;
            HtmlEdit uIFinalIP4Edit = this.UIMetergroupsInternetEWindow.UICreatenewmeterrecordDocument.UIFinalIP4Edit;
            HtmlEdit uIInitialprimaryportEdit = this.UIMetergroupsInternetEWindow.UICreatenewmeterrecordDocument.UIInitialprimaryportEdit;
            HtmlEdit uIFinalprimaryportEdit = this.UIMetergroupsInternetEWindow.UICreatenewmeterrecordDocument.UIFinalprimaryportEdit;
            HtmlEdit uIInitialsecondaryIPEdit = this.UIMetergroupsInternetEWindow.UICreatenewmeterrecordDocument.UIInitialsecondaryIPEdit;
            HtmlEdit uIInititialsecondaryIPEdit = this.UIMetergroupsInternetEWindow.UICreatenewmeterrecordDocument.UIInititialsecondaryIPEdit;
            HtmlEdit uIInititialsecondaryIPEdit1 = this.UIMetergroupsInternetEWindow.UICreatenewmeterrecordDocument.UIInititialsecondaryIPEdit1;
            HtmlEdit uIInititialsecondaryIPEdit2 = this.UIMetergroupsInternetEWindow.UICreatenewmeterrecordDocument.UIInititialsecondaryIPEdit2;
            HtmlEdit uIInitialsecondaryportEdit = this.UIMetergroupsInternetEWindow.UICreatenewmeterrecordDocument.UIInitialsecondaryportEdit;
            HtmlInputButton uICreateButton = this.UIMetergroupsInternetEWindow.UICreatenewmeterrecordDocument.UIMainPane.UICreateButton;
            HtmlHyperlink uILogOffHyperlink = this.UIMetergroupsInternetEWindow.UIMetergroupsDocument.UIMenuCustom.UILogOffHyperlink;
            WinButton uIЗакрытьButton = this.UIBlankPageInternetExpWindow.UIWelcomeRationalCityITitleBar.UIЗакрытьButton;
            #endregion

            // Go to web page 'http://localhost:2374/' using new browser instance
            this.UIBlankPageInternetExpWindow8.LaunchUrl(new System.Uri(this.AddMetersForIPsParams.UIBlankPageInternetExpWindow8Url));

            // Click 'Log On' link
            Mouse.Click(uILogOnHyperlink, new Point(60, 15));

            // Click 'Unknown Name' custom control
            Mouse.Click(uIItemCustom, new Point(158, 90));

            // Type 'dmorozov' in 'User name' text box
            uIUsernameEdit.Text = this.AddMetersForIPsParams.UIUsernameEditText;

            // Type '{Tab}' in 'User name' text box
            Keyboard.SendKeys(uIUsernameEdit, this.AddMetersForIPsParams.UIUsernameEditSendKeys, ModifierKeys.None);

            // Type '********' in 'Password' text box
            uIPasswordEdit.Password = this.AddMetersForIPsParams.UIPasswordEditPassword;

            // Type '{Enter}' in 'Password' text box
            Keyboard.SendKeys(uIPasswordEdit, this.AddMetersForIPsParams.UIPasswordEditSendKeys, ModifierKeys.None);

            // Click 'Meter Groups' link
            Mouse.Click(uIMeterGroupsHyperlink, new Point(111, 28));

            // Click 'Add Meters for IP-range' link
            Mouse.Click(uIAddMetersforIPrangeHyperlink, new Point(16, 14));

            // Type 'ips' in 'Group name' text box
            uIGroupnameEdit.Text = this.AddMetersForIPsParams.UIGroupnameEditText;

            // Type '{Tab}' in 'Group name' text box
            Keyboard.SendKeys(uIGroupnameEdit, this.AddMetersForIPsParams.UIGroupnameEditSendKeys, ModifierKeys.None);

            // Select 'XML-data' in 'Device type' combo box
            uIDevicetypeComboBox.SelectedItem = this.AddMetersForIPsParams.UIDevicetypeComboBoxSelectedItem;

            // Type 'ips' in 'Meter name prefix' text box
            uIMeternameprefixEdit.Text = this.AddMetersForIPsParams.UIMeternameprefixEditText;

            // Type '{Tab}' in 'Meter name prefix' text box
            Keyboard.SendKeys(uIMeternameprefixEdit, this.AddMetersForIPsParams.UIMeternameprefixEditSendKeys, ModifierKeys.None);

            // Type '10' in 'Initial primary IP' text box
            uIInitialprimaryIPEdit.Text = this.AddMetersForIPsParams.UIInitialprimaryIPEditText;

            // Type '{Tab}' in 'Initial primary IP' text box
            Keyboard.SendKeys(uIInitialprimaryIPEdit, this.AddMetersForIPsParams.UIInitialprimaryIPEditSendKeys, ModifierKeys.None);

            // Type '0' in 'Inititial IP2' text box
            uIInititialIP2Edit.Text = this.AddMetersForIPsParams.UIInititialIP2EditText;

            // Type '{Tab}' in 'Inititial IP2' text box
            Keyboard.SendKeys(uIInititialIP2Edit, this.AddMetersForIPsParams.UIInititialIP2EditSendKeys, ModifierKeys.None);

            // Type '0' in 'Inititial IP3' text box
            uIInititialIP3Edit.Text = this.AddMetersForIPsParams.UIInititialIP3EditText;

            // Type '{Tab}' in 'Inititial IP3' text box
            Keyboard.SendKeys(uIInititialIP3Edit, this.AddMetersForIPsParams.UIInititialIP3EditSendKeys, ModifierKeys.None);

            // Type '1' in 'Inititial IP4' text box
            uIInititialIP4Edit.Text = this.AddMetersForIPsParams.UIInititialIP4EditText;

            // Type '{Tab}' in 'Inititial IP4' text box
            Keyboard.SendKeys(uIInititialIP4Edit, this.AddMetersForIPsParams.UIInititialIP4EditSendKeys, ModifierKeys.None);

            // Type '10' in 'Final primary IP' text box
            uIFinalprimaryIPEdit.Text = this.AddMetersForIPsParams.UIFinalprimaryIPEditText;

            // Type '{Tab}' in 'Final primary IP' text box
            Keyboard.SendKeys(uIFinalprimaryIPEdit, this.AddMetersForIPsParams.UIFinalprimaryIPEditSendKeys, ModifierKeys.None);

            // Type '00' in 'Final IP2' text box
            uIFinalIP2Edit.Text = this.AddMetersForIPsParams.UIFinalIP2EditText;

            // Type '{Tab}' in 'Final IP2' text box
            Keyboard.SendKeys(uIFinalIP2Edit, this.AddMetersForIPsParams.UIFinalIP2EditSendKeys, ModifierKeys.None);

            // Type '0' in 'Final IP3' text box
            uIFinalIP3Edit.Text = this.AddMetersForIPsParams.UIFinalIP3EditText;

            // Type '{Tab}' in 'Final IP3' text box
            Keyboard.SendKeys(uIFinalIP3Edit, this.AddMetersForIPsParams.UIFinalIP3EditSendKeys, ModifierKeys.None);

            // Type '10' in 'Final IP4' text box
            uIFinalIP4Edit.Text = this.AddMetersForIPsParams.UIFinalIP4EditText;

            // Type '{Tab}' in 'Final IP4' text box
            Keyboard.SendKeys(uIFinalIP4Edit, this.AddMetersForIPsParams.UIFinalIP4EditSendKeys, ModifierKeys.None);

            // Type '1000' in 'Initial primary port' text box
            uIInitialprimaryportEdit.Text = this.AddMetersForIPsParams.UIInitialprimaryportEditText;

            // Type '{Tab}' in 'Initial primary port' text box
            Keyboard.SendKeys(uIInitialprimaryportEdit, this.AddMetersForIPsParams.UIInitialprimaryportEditSendKeys, ModifierKeys.None);

            // Type '1002' in 'Final primary port' text box
            uIFinalprimaryportEdit.Text = this.AddMetersForIPsParams.UIFinalprimaryportEditText;

            // Type '{Tab}' in 'Final primary port' text box
            Keyboard.SendKeys(uIFinalprimaryportEdit, this.AddMetersForIPsParams.UIFinalprimaryportEditSendKeys, ModifierKeys.None);

            // Type '10' in 'Initial secondary IP' text box
            uIInitialsecondaryIPEdit.Text = this.AddMetersForIPsParams.UIInitialsecondaryIPEditText;

            // Type '{Tab}' in 'Initial secondary IP' text box
            Keyboard.SendKeys(uIInitialsecondaryIPEdit, this.AddMetersForIPsParams.UIInitialsecondaryIPEditSendKeys, ModifierKeys.None);

            // Type '0' in 'Inititial secondary IP2' text box
            uIInititialsecondaryIPEdit.Text = this.AddMetersForIPsParams.UIInititialsecondaryIPEditText;

            // Type '{Tab}' in 'Inititial secondary IP2' text box
            Keyboard.SendKeys(uIInititialsecondaryIPEdit, this.AddMetersForIPsParams.UIInititialsecondaryIPEditSendKeys, ModifierKeys.None);

            // Type '00' in 'Inititial secondary IP3' text box
            uIInititialsecondaryIPEdit1.Text = this.AddMetersForIPsParams.UIInititialsecondaryIPEdit1Text;

            // Type '{Tab}' in 'Inititial secondary IP3' text box
            Keyboard.SendKeys(uIInititialsecondaryIPEdit1, this.AddMetersForIPsParams.UIInititialsecondaryIPEdit1SendKeys, ModifierKeys.None);

            // Type '0' in 'Inititial secondary IP4' text box
            uIInititialsecondaryIPEdit2.Text = this.AddMetersForIPsParams.UIInititialsecondaryIPEdit2Text;

            // Type '{Tab}' in 'Inititial secondary IP4' text box
            Keyboard.SendKeys(uIInititialsecondaryIPEdit2, this.AddMetersForIPsParams.UIInititialsecondaryIPEdit2SendKeys, ModifierKeys.None);

            // Type '1000' in 'Initial secondary port' text box
            uIInitialsecondaryportEdit.Text = this.AddMetersForIPsParams.UIInitialsecondaryportEditText;

            // Type '{Tab}' in 'Initial secondary port' text box
            Keyboard.SendKeys(uIInitialsecondaryportEdit, this.AddMetersForIPsParams.UIInitialsecondaryportEditSendKeys, ModifierKeys.None);

            // Type '{Enter}' in 'Create' button
            Keyboard.SendKeys(uICreateButton, this.AddMetersForIPsParams.UICreateButtonSendKeys, ModifierKeys.None);

            // Click 'Log Off' link
            Mouse.Click(uILogOffHyperlink, new Point(31, 26));

            // Click 'Закрыть' button
            Mouse.Click(uIЗакрытьButton, new Point(6, 8));
        }
        
        /// <summary>
        /// LogOff
        /// </summary>
        public void LogOff()
        {
            #region Variable Declarations
            HtmlHyperlink uILogOffHyperlink = this.UIBlankPageInternetExpWindow.UIWelcomeRationalCityDocument.UIMenuCustom.UILogOffHyperlink;
            WinButton uIЗакрытьButton = this.UIBlankPageInternetExpWindow.UIWelcomeRationalCityITitleBar.UIЗакрытьButton;
            #endregion

            // Click 'Log Off' link
            Mouse.Click(uILogOffHyperlink, new Point(56, 26));

            // Click 'Закрыть' button
            Mouse.Click(uIЗакрытьButton, new Point(7, 9));
        }
        
        /// <summary>
        /// DeleteMetersForIPs - Use 'DeleteMetersForIPsParams' to pass parameters into this method.
        /// </summary>
        public void DeleteMetersForIPs()
        {
            #region Variable Declarations
            HtmlHyperlink uILogOnHyperlink = this.UIBlankPageInternetExpWindow.UIWelcomeRationalCityDocument.UIMenuCustom.UILogOnHyperlink;
            HtmlEdit uIUsernameEdit = this.UIBlankPageInternetExpWindow.UILogOnDocument.UIUsernameEdit;
            HtmlEdit uIPasswordEdit = this.UIBlankPageInternetExpWindow.UILogOnDocument.UIPasswordEdit;
            HtmlHyperlink uIMeterGroupsHyperlink = this.UIBlankPageInternetExpWindow.UIWelcomeRationalCityDocument.UIMenuCustom.UIMeterGroupsHyperlink;
            HtmlHyperlink uIDeleteGroupHyperlink2 = this.UIMetergroupsInternetEWindow.UIMetergroupsDocument.UIGridPane1.UIDeleteGroupHyperlink2;
            HtmlInputButton uIDeleteButton = this.UIMetergroupsInternetEWindow4.UIDeletethedevicegroupDocument.UIDeleteButton;
            HtmlHyperlink uILogOffHyperlink = this.UIMetergroupsInternetEWindow.UIMetergroupsDocument.UIMenuCustom.UILogOffHyperlink;
            WinButton uIЗакрытьButton = this.UIBlankPageInternetExpWindow.UIWelcomeRationalCityITitleBar.UIЗакрытьButton;
            #endregion

            // Go to web page 'http://localhost:2374/' using new browser instance
            this.UIBlankPageInternetExpWindow9.LaunchUrl(new System.Uri(this.DeleteMetersForIPsParams.UIBlankPageInternetExpWindow9Url));

            // Click 'Log On' link
            Mouse.Click(uILogOnHyperlink, new Point(38, 24));

            // Type 'dmorozov' in 'User name' text box
            uIUsernameEdit.Text = this.DeleteMetersForIPsParams.UIUsernameEditText;

            // Type '{Tab}' in 'User name' text box
            Keyboard.SendKeys(uIUsernameEdit, this.DeleteMetersForIPsParams.UIUsernameEditSendKeys, ModifierKeys.None);

            // Type '********' in 'Password' text box
            uIPasswordEdit.Password = this.DeleteMetersForIPsParams.UIPasswordEditPassword;

            // Type '{Enter}' in 'Password' text box
            Keyboard.SendKeys(uIPasswordEdit, this.DeleteMetersForIPsParams.UIPasswordEditSendKeys, ModifierKeys.None);

            // Click 'Meter Groups' link
            Mouse.Click(uIMeterGroupsHyperlink, new Point(38, 25));

            // Click 'Delete Group' link
            Mouse.Click(uIDeleteGroupHyperlink2, new Point(63, 12));

            // Click 'Delete' button
            Mouse.Click(uIDeleteButton, new Point(42, 9));

            // Click 'Log Off' link
            Mouse.Click(uILogOffHyperlink, new Point(35, 19));

            // Click 'Закрыть' button
            Mouse.Click(uIЗакрытьButton, new Point(10, 8));
        }
        
        /// <summary>
        /// AddMetersForBuildings - Use 'AddMetersForBuildingsParams' to pass parameters into this method.
        /// </summary>
        public void AddMetersForBuildings()
        {
            #region Variable Declarations
            HtmlHyperlink uILogOnHyperlink = this.UIBlankPageInternetExpWindow.UIWelcomeRationalCityDocument.UIMenuCustom.UILogOnHyperlink;
            HtmlEdit uIUsernameEdit = this.UIBlankPageInternetExpWindow.UILogOnDocument.UIUsernameEdit;
            HtmlEdit uIPasswordEdit = this.UIBlankPageInternetExpWindow.UILogOnDocument.UIPasswordEdit;
            HtmlHyperlink uIMeterGroupsHyperlink = this.UIBlankPageInternetExpWindow.UIWelcomeRationalCityDocument.UIMenuCustom.UIMeterGroupsHyperlink;
            HtmlHyperlink uIAddMetersforBuildingHyperlink = this.UIMetergroupsInternetEWindow.UIMetergroupsDocument.UIMainPane.UIAddMetersforBuildingHyperlink;
            HtmlEdit uIGroupnameEdit = this.UIMetergroupsInternetEWindow.UICreatenewmeterrecordDocument1.UIGroupnameEdit;
            HtmlComboBox uIDevicetypeComboBox = this.UIMetergroupsInternetEWindow.UICreatenewmeterrecordDocument1.UIDevicetypeComboBox;
            HtmlEdit uIMeternameprefixEdit = this.UIMetergroupsInternetEWindow.UICreatenewmeterrecordDocument1.UIMeternameprefixEdit;
            HtmlEdit uIStreetEdit = this.UIMetergroupsInternetEWindow.UICreatenewmeterrecordDocument1.UIStreetEdit;
            HtmlEdit uICityEdit = this.UIMetergroupsInternetEWindow.UICreatenewmeterrecordDocument1.UICityEdit;
            HtmlEdit uIStateEdit = this.UIMetergroupsInternetEWindow.UICreatenewmeterrecordDocument1.UIStateEdit;
            HtmlEdit uICountryEdit = this.UIMetergroupsInternetEWindow.UICreatenewmeterrecordDocument1.UICountryEdit;
            HtmlEdit uIZipcodeEdit = this.UIMetergroupsInternetEWindow.UICreatenewmeterrecordDocument1.UIZipcodeEdit;
            HtmlEdit uIInitialbuildingnumbeEdit = this.UIMetergroupsInternetEWindow.UICreatenewmeterrecordDocument1.UIInitialbuildingnumbeEdit;
            HtmlEdit uIFinalbuildingnumberEdit = this.UIMetergroupsInternetEWindow.UICreatenewmeterrecordDocument1.UIFinalbuildingnumberEdit;
            HtmlEdit uIInitialapartmentnumbEdit = this.UIMetergroupsInternetEWindow.UICreatenewmeterrecordDocument1.UIInitialapartmentnumbEdit;
            HtmlEdit uIFinalapartmentnumberEdit = this.UIMetergroupsInternetEWindow.UICreatenewmeterrecordDocument1.UIFinalapartmentnumberEdit;
            HtmlEdit uIInitialprimaryIPIPswEdit = this.UIMetergroupsInternetEWindow.UICreatenewmeterrecordDocument1.UIInitialprimaryIPIPswEdit;
            HtmlEdit uIInititialIP2Edit = this.UIMetergroupsInternetEWindow.UICreatenewmeterrecordDocument1.UIInititialIP2Edit;
            HtmlEdit uIInititialIP3Edit = this.UIMetergroupsInternetEWindow.UICreatenewmeterrecordDocument1.UIInititialIP3Edit;
            HtmlEdit uIInititialIP4Edit = this.UIMetergroupsInternetEWindow.UICreatenewmeterrecordDocument1.UIInititialIP4Edit;
            HtmlEdit uIInitialprimaryportwiEdit = this.UIMetergroupsInternetEWindow.UICreatenewmeterrecordDocument1.UIInitialprimaryportwiEdit;
            HtmlEdit uIInitialsecondaryIPIPEdit = this.UIMetergroupsInternetEWindow.UICreatenewmeterrecordDocument1.UIInitialsecondaryIPIPEdit;
            HtmlEdit uIInititialIP2Edit1 = this.UIMetergroupsInternetEWindow.UICreatenewmeterrecordDocument1.UIInititialIP2Edit1;
            HtmlEdit uIInititialIP3Edit1 = this.UIMetergroupsInternetEWindow.UICreatenewmeterrecordDocument1.UIInititialIP3Edit1;
            HtmlEdit uIInititialIP4Edit1 = this.UIMetergroupsInternetEWindow.UICreatenewmeterrecordDocument1.UIInititialIP4Edit1;
            HtmlEdit uIInitialsecondaryportEdit = this.UIMetergroupsInternetEWindow.UICreatenewmeterrecordDocument1.UIInitialsecondaryportEdit;
            HtmlInputButton uICreateButton = this.UIMetergroupsInternetEWindow.UICreatenewmeterrecordDocument1.UIMainPane.UICreateButton;
            HtmlHyperlink uILogOffHyperlink = this.UIMetergroupsInternetEWindow.UIMetergroupsDocument.UIMenuCustom.UILogOffHyperlink;
            WinButton uIЗакрытьButton = this.UIBlankPageInternetExpWindow.UIWelcomeRationalCityITitleBar.UIЗакрытьButton;
            #endregion

            // Go to web page 'http://localhost:2374/' using new browser instance
            this.UIBlankPageInternetExpWindow3.LaunchUrl(new System.Uri(this.AddMetersForBuildingsParams.UIBlankPageInternetExpWindow3Url));

            // Click 'Log On' link
            Mouse.Click(uILogOnHyperlink, new Point(56, 12));

            // Type 'dmorozov' in 'User name' text box
            uIUsernameEdit.Text = this.AddMetersForBuildingsParams.UIUsernameEditText;

            // Type '{Tab}' in 'User name' text box
            Keyboard.SendKeys(uIUsernameEdit, this.AddMetersForBuildingsParams.UIUsernameEditSendKeys, ModifierKeys.None);

            // Type '********' in 'Password' text box
            uIPasswordEdit.Password = this.AddMetersForBuildingsParams.UIPasswordEditPassword;

            // Type '{Enter}' in 'Password' text box
            Keyboard.SendKeys(uIPasswordEdit, this.AddMetersForBuildingsParams.UIPasswordEditSendKeys, ModifierKeys.None);

            // Click 'Meter Groups' link
            Mouse.Click(uIMeterGroupsHyperlink, new Point(51, 24));

            // Click 'Add Meters for Buildings' link
            Mouse.Click(uIAddMetersforBuildingHyperlink, new Point(100, 8));

            // Type 'bld' in 'Group name' text box
            uIGroupnameEdit.Text = this.AddMetersForBuildingsParams.UIGroupnameEditText;

            // Type '{Tab}' in 'Group name' text box
            Keyboard.SendKeys(uIGroupnameEdit, this.AddMetersForBuildingsParams.UIGroupnameEditSendKeys, ModifierKeys.None);

            // Select 'XML-data' in 'Device type' combo box
            uIDevicetypeComboBox.SelectedItem = this.AddMetersForBuildingsParams.UIDevicetypeComboBoxSelectedItem;

            // Type 'bld' in 'Meter name prefix' text box
            uIMeternameprefixEdit.Text = this.AddMetersForBuildingsParams.UIMeternameprefixEditText;

            // Type '{Tab}' in 'Meter name prefix' text box
            Keyboard.SendKeys(uIMeternameprefixEdit, this.AddMetersForBuildingsParams.UIMeternameprefixEditSendKeys, ModifierKeys.None);

            // Type 'shaumyana' in 'Street' text box
            uIStreetEdit.Text = this.AddMetersForBuildingsParams.UIStreetEditText;

            // Type '{Tab}' in 'Street' text box
            Keyboard.SendKeys(uIStreetEdit, this.AddMetersForBuildingsParams.UIStreetEditSendKeys, ModifierKeys.None);

            // Type 'yekaterinburg' in 'City' text box
            uICityEdit.Text = this.AddMetersForBuildingsParams.UICityEditText;

            // Type '{Tab}' in 'City' text box
            Keyboard.SendKeys(uICityEdit, this.AddMetersForBuildingsParams.UICityEditSendKeys, ModifierKeys.None);

            // Type 'sverdlovskaya' in 'State' text box
            uIStateEdit.Text = this.AddMetersForBuildingsParams.UIStateEditText;

            // Type '{Tab}' in 'State' text box
            Keyboard.SendKeys(uIStateEdit, this.AddMetersForBuildingsParams.UIStateEditSendKeys, ModifierKeys.None);

            // Type 'russian federation' in 'Country' text box
            uICountryEdit.Text = this.AddMetersForBuildingsParams.UICountryEditText;

            // Type '{Tab}' in 'Country' text box
            Keyboard.SendKeys(uICountryEdit, this.AddMetersForBuildingsParams.UICountryEditSendKeys, ModifierKeys.None);

            // Type '620102' in 'Zip code' text box
            uIZipcodeEdit.Text = this.AddMetersForBuildingsParams.UIZipcodeEditText;

            // Type '{Tab}' in 'Zip code' text box
            Keyboard.SendKeys(uIZipcodeEdit, this.AddMetersForBuildingsParams.UIZipcodeEditSendKeys, ModifierKeys.None);

            // Type '84' in 'Initial building number' text box
            uIInitialbuildingnumbeEdit.Text = this.AddMetersForBuildingsParams.UIInitialbuildingnumbeEditText;

            // Type '{Tab}' in 'Initial building number' text box
            Keyboard.SendKeys(uIInitialbuildingnumbeEdit, this.AddMetersForBuildingsParams.UIInitialbuildingnumbeEditSendKeys, ModifierKeys.None);

            // Type '86' in 'Final building number' text box
            uIFinalbuildingnumberEdit.Text = this.AddMetersForBuildingsParams.UIFinalbuildingnumberEditText;

            // Type '{Tab}' in 'Final building number' text box
            Keyboard.SendKeys(uIFinalbuildingnumberEdit, this.AddMetersForBuildingsParams.UIFinalbuildingnumberEditSendKeys, ModifierKeys.None);

            // Type '1' in 'Initial apartment number' text box
            uIInitialapartmentnumbEdit.Text = this.AddMetersForBuildingsParams.UIInitialapartmentnumbEditText;

            // Type '{Tab}' in 'Initial apartment number' text box
            Keyboard.SendKeys(uIInitialapartmentnumbEdit, this.AddMetersForBuildingsParams.UIInitialapartmentnumbEditSendKeys, ModifierKeys.None);

            // Type '54' in 'Final apartment number' text box
            uIFinalapartmentnumberEdit.Text = this.AddMetersForBuildingsParams.UIFinalapartmentnumberEditText;

            // Type '{Tab}' in 'Final apartment number' text box
            Keyboard.SendKeys(uIFinalapartmentnumberEdit, this.AddMetersForBuildingsParams.UIFinalapartmentnumberEditSendKeys, ModifierKeys.None);

            // Type '10' in 'Initial primary IP (IPs will be assigned by increm...' text box
            uIInitialprimaryIPIPswEdit.Text = this.AddMetersForBuildingsParams.UIInitialprimaryIPIPswEditText;

            // Type '{Tab}' in 'Initial primary IP (IPs will be assigned by increm...' text box
            Keyboard.SendKeys(uIInitialprimaryIPIPswEdit, this.AddMetersForBuildingsParams.UIInitialprimaryIPIPswEditSendKeys, ModifierKeys.None);

            // Type '0' in 'Inititial IP2' text box
            uIInititialIP2Edit.Text = this.AddMetersForBuildingsParams.UIInititialIP2EditText;

            // Type '{Tab}' in 'Inititial IP2' text box
            Keyboard.SendKeys(uIInititialIP2Edit, this.AddMetersForBuildingsParams.UIInititialIP2EditSendKeys, ModifierKeys.None);

            // Type '0' in 'Inititial IP3' text box
            uIInititialIP3Edit.Text = this.AddMetersForBuildingsParams.UIInititialIP3EditText;

            // Type '{Tab}' in 'Inititial IP3' text box
            Keyboard.SendKeys(uIInititialIP3Edit, this.AddMetersForBuildingsParams.UIInititialIP3EditSendKeys, ModifierKeys.None);

            // Type '1' in 'Inititial IP4' text box
            uIInititialIP4Edit.Text = this.AddMetersForBuildingsParams.UIInititialIP4EditText;

            // Type '{Tab}' in 'Inititial IP4' text box
            Keyboard.SendKeys(uIInititialIP4Edit, this.AddMetersForBuildingsParams.UIInititialIP4EditSendKeys, ModifierKeys.None);

            // Type '1000' in 'Initial primary port (will be the same for all met...' text box
            uIInitialprimaryportwiEdit.Text = this.AddMetersForBuildingsParams.UIInitialprimaryportwiEditText;

            // Type '{Tab}' in 'Initial primary port (will be the same for all met...' text box
            Keyboard.SendKeys(uIInitialprimaryportwiEdit, this.AddMetersForBuildingsParams.UIInitialprimaryportwiEditSendKeys, ModifierKeys.None);

            // Type '10' in 'Initial secondary IP (IPs will be assigned by incr...' text box
            uIInitialsecondaryIPIPEdit.Text = this.AddMetersForBuildingsParams.UIInitialsecondaryIPIPEditText;

            // Type '{Tab}' in 'Initial secondary IP (IPs will be assigned by incr...' text box
            Keyboard.SendKeys(uIInitialsecondaryIPIPEdit, this.AddMetersForBuildingsParams.UIInitialsecondaryIPIPEditSendKeys, ModifierKeys.None);

            // Type '1' in 'Inititial IP2' text box
            uIInititialIP2Edit1.Text = this.AddMetersForBuildingsParams.UIInititialIP2Edit1Text;

            // Type '{Tab}' in 'Inititial IP2' text box
            Keyboard.SendKeys(uIInititialIP2Edit1, this.AddMetersForBuildingsParams.UIInititialIP2Edit1SendKeys, ModifierKeys.None);

            // Type '1' in 'Inititial IP3' text box
            uIInititialIP3Edit1.Text = this.AddMetersForBuildingsParams.UIInititialIP3Edit1Text;

            // Type '{Tab}' in 'Inititial IP3' text box
            Keyboard.SendKeys(uIInititialIP3Edit1, this.AddMetersForBuildingsParams.UIInititialIP3Edit1SendKeys, ModifierKeys.None);

            // Type '1' in 'Inititial IP4' text box
            uIInititialIP4Edit1.Text = this.AddMetersForBuildingsParams.UIInititialIP4Edit1Text;

            // Type '{Tab}' in 'Inititial IP4' text box
            Keyboard.SendKeys(uIInititialIP4Edit1, this.AddMetersForBuildingsParams.UIInititialIP4Edit1SendKeys, ModifierKeys.None);

            // Type '2000' in 'Initial secondary port (will be the same for all m...' text box
            uIInitialsecondaryportEdit.Text = this.AddMetersForBuildingsParams.UIInitialsecondaryportEditText;

            // Type '{Tab}' in 'Initial secondary port (will be the same for all m...' text box
            Keyboard.SendKeys(uIInitialsecondaryportEdit, this.AddMetersForBuildingsParams.UIInitialsecondaryportEditSendKeys, ModifierKeys.None);

            // Type '{Enter}' in 'Create' button
            Keyboard.SendKeys(uICreateButton, this.AddMetersForBuildingsParams.UICreateButtonSendKeys, ModifierKeys.None);

            // Click 'Log Off' link
            Mouse.Click(uILogOffHyperlink, new Point(32, 24));

            // Click 'Закрыть' button
            Mouse.Click(uIЗакрытьButton, new Point(14, 8));
        }
        
        /// <summary>
        /// DeleteMetersForBuildings - Use 'DeleteMetersForBuildingsParams' to pass parameters into this method.
        /// </summary>
        public void DeleteMetersForBuildings()
        {
            #region Variable Declarations
            HtmlHyperlink uILogOnHyperlink = this.UIBlankPageInternetExpWindow.UIWelcomeRationalCityDocument.UIMenuCustom.UILogOnHyperlink;
            HtmlEdit uIUsernameEdit = this.UIBlankPageInternetExpWindow.UILogOnDocument.UIUsernameEdit;
            HtmlEdit uIPasswordEdit = this.UIBlankPageInternetExpWindow.UILogOnDocument.UIPasswordEdit;
            HtmlHyperlink uIMeterGroupsHyperlink = this.UIBlankPageInternetExpWindow.UIWelcomeRationalCityDocument.UIMenuCustom.UIMeterGroupsHyperlink;
            HtmlHyperlink uIDeleteGroupHyperlink1 = this.UIMetergroupsInternetEWindow.UIMetergroupsDocument.UIGridPane2.UIDeleteGroupHyperlink1;
            HtmlInputButton uIDeleteButton = this.UIBlankPageInternetExpWindow5.UIDeletethedevicegroupDocument.UIDeleteButton;
            HtmlHyperlink uILogOffHyperlink = this.UIMetergroupsInternetEWindow.UIMetergroupsDocument.UIMenuCustom.UILogOffHyperlink;
            WinButton uIЗакрытьButton = this.UIBlankPageInternetExpWindow.UIWelcomeRationalCityITitleBar.UIЗакрытьButton;
            #endregion

            // Go to web page 'http://localhost:2374/' using new browser instance
            this.UIBlankPageInternetExpWindow4.LaunchUrl(new System.Uri(this.DeleteMetersForBuildingsParams.UIBlankPageInternetExpWindow4Url));

            // Click 'Log On' link
            Mouse.Click(uILogOnHyperlink, new Point(45, 25));

            // Type 'dmorozov' in 'User name' text box
            uIUsernameEdit.Text = this.DeleteMetersForBuildingsParams.UIUsernameEditText;

            // Type '{Tab}' in 'User name' text box
            Keyboard.SendKeys(uIUsernameEdit, this.DeleteMetersForBuildingsParams.UIUsernameEditSendKeys, ModifierKeys.None);

            // Type '********' in 'Password' text box
            uIPasswordEdit.Password = this.DeleteMetersForBuildingsParams.UIPasswordEditPassword;

            // Type '{Enter}' in 'Password' text box
            Keyboard.SendKeys(uIPasswordEdit, this.DeleteMetersForBuildingsParams.UIPasswordEditSendKeys, ModifierKeys.None);

            // Click 'Meter Groups' link
            Mouse.Click(uIMeterGroupsHyperlink, new Point(32, 18));

            // Click 'Delete Group' link
            Mouse.Click(uIDeleteGroupHyperlink1, new Point(31, 7));

            // Click 'Delete' button
            Mouse.Click(uIDeleteButton, new Point(26, 18));

            // Click 'Log Off' link
            Mouse.Click(uILogOffHyperlink, new Point(73, 21));

            // Click 'Закрыть' button
            Mouse.Click(uIЗакрытьButton, new Point(14, 9));
        }
        
        /// <summary>
        /// DeleteSingleMeter - Use 'DeleteSingleMeterParams' to pass parameters into this method.
        /// </summary>
        public void DeleteSingleMeter()
        {
            #region Variable Declarations
            HtmlHyperlink uILogOnHyperlink = this.UIBlankPageInternetExpWindow.UIWelcomeRationalCityDocument.UIMenuCustom.UILogOnHyperlink;
            HtmlEdit uIUsernameEdit = this.UIBlankPageInternetExpWindow.UILogOnDocument.UIUsernameEdit;
            HtmlEdit uIPasswordEdit = this.UIBlankPageInternetExpWindow.UILogOnDocument.UIPasswordEdit;
            HtmlHyperlink uIMeterGroupsHyperlink = this.UIBlankPageInternetExpWindow.UIWelcomeRationalCityDocument.UIMenuCustom.UIMeterGroupsHyperlink;
            HtmlHyperlink uIMetersHyperlink1 = this.UIMetergroupsInternetEWindow.UIMetergroupsDocument.UIGridPane3.UIMetersHyperlink1;
            HtmlHyperlink uIDeleteHyperlink = this.UIMetergroupsInternetEWindow1.UIMetersassociatedwithDocument.UIGridPane.UIDeleteHyperlink;
            HtmlInputButton uIDeleteButton = this.UIMetergroupsInternetEWindow2.UIDeletemeterDocument.UIDeleteButton;
            HtmlHyperlink uIGroupsHyperlink = this.UIMetergroupsInternetEWindow1.UIMetersassociatedwithDocument.UIMainPane.UIGroupsHyperlink;
            HtmlHyperlink uIDeleteGroupHyperlink1 = this.UIMetergroupsInternetEWindow.UIMetergroupsDocument.UIGridPane3.UIDeleteGroupHyperlink1;
            HtmlInputButton uIDeleteButton1 = this.UIMetergroupsInternetEWindow3.UIDeletethedevicegroupDocument.UIDeleteButton;
            HtmlHyperlink uILogOffHyperlink = this.UIMetergroupsInternetEWindow.UIMetergroupsDocument.UIMenuCustom.UILogOffHyperlink;
            WinButton uIЗакрытьButton = this.UIBlankPageInternetExpWindow.UIWelcomeRationalCityITitleBar.UIЗакрытьButton;
            #endregion

            // Go to web page 'http://localhost:2374/' using new browser instance
            this.UIBlankPageInternetExpWindow7.LaunchUrl(new System.Uri(this.DeleteSingleMeterParams.UIBlankPageInternetExpWindow7Url));

            // Click 'Log On' link
            Mouse.Click(uILogOnHyperlink, new Point(57, 24));

            // Type 'dmorozov' in 'User name' text box
            uIUsernameEdit.Text = this.DeleteSingleMeterParams.UIUsernameEditText;

            // Type '{Tab}' in 'User name' text box
            Keyboard.SendKeys(uIUsernameEdit, this.DeleteSingleMeterParams.UIUsernameEditSendKeys, ModifierKeys.None);

            // Type '********' in 'Password' text box
            uIPasswordEdit.Password = this.DeleteSingleMeterParams.UIPasswordEditPassword;

            // Type '{Enter}' in 'Password' text box
            Keyboard.SendKeys(uIPasswordEdit, this.DeleteSingleMeterParams.UIPasswordEditSendKeys, ModifierKeys.None);

            // Click 'Meter Groups' link
            Mouse.Click(uIMeterGroupsHyperlink, new Point(50, 26));

            // Click 'Meters' link
            Mouse.Click(uIMetersHyperlink1, new Point(35, 11));

            // Click 'Delete' link
            Mouse.Click(uIDeleteHyperlink, new Point(11, 12));

            // Click 'Delete' button
            Mouse.Click(uIDeleteButton, new Point(39, 15));

            // Click 'Groups' link
            Mouse.Click(uIGroupsHyperlink, new Point(44, 11));

            // Click 'Delete Group' link
            Mouse.Click(uIDeleteGroupHyperlink1, new Point(12, 9));

            // Click 'Delete' button
            Mouse.Click(uIDeleteButton1, new Point(39, 8));

            // Click 'Log Off' link
            Mouse.Click(uILogOffHyperlink, new Point(52, 21));

            // Click 'Закрыть' button
            Mouse.Click(uIЗакрытьButton, new Point(15, 5));
        }
        
        /// <summary>
        /// AddSingleMeter - Use 'AddSingleMeterParams' to pass parameters into this method.
        /// </summary>
        public void AddSingleMeter()
        {
            #region Variable Declarations
            HtmlHyperlink uILogOnHyperlink = this.UIBlankPageInternetExpWindow.UIWelcomeRationalCityDocument.UIMenuCustom.UILogOnHyperlink;
            HtmlEdit uIUsernameEdit = this.UIBlankPageInternetExpWindow.UILogOnDocument.UIUsernameEdit;
            HtmlEdit uIPasswordEdit = this.UIBlankPageInternetExpWindow.UILogOnDocument.UIPasswordEdit;
            HtmlHyperlink uIMeterGroupsHyperlink = this.UIBlankPageInternetExpWindow.UIWelcomeRationalCityDocument.UIMenuCustom.UIMeterGroupsHyperlink;
            HtmlHyperlink uIAddMetersforIPrangeHyperlink = this.UIMetergroupsInternetEWindow.UIMetergroupsDocument.UIMainPane.UIAddMetersforIPrangeHyperlink;
            HtmlEdit uIGroupnameEdit = this.UIMetergroupsInternetEWindow.UICreatenewmeterrecordDocument.UIGroupnameEdit;
            HtmlComboBox uIDevicetypeComboBox = this.UIMetergroupsInternetEWindow.UICreatenewmeterrecordDocument.UIDevicetypeComboBox;
            HtmlEdit uIMeternameprefixEdit = this.UIMetergroupsInternetEWindow.UICreatenewmeterrecordDocument.UIMeternameprefixEdit;
            HtmlEdit uIInitialprimaryIPEdit = this.UIMetergroupsInternetEWindow.UICreatenewmeterrecordDocument.UIInitialprimaryIPEdit;
            HtmlEdit uIInititialIP2Edit = this.UIMetergroupsInternetEWindow.UICreatenewmeterrecordDocument.UIInititialIP2Edit;
            HtmlEdit uIInititialIP3Edit = this.UIMetergroupsInternetEWindow.UICreatenewmeterrecordDocument.UIInititialIP3Edit;
            HtmlEdit uIInititialIP4Edit = this.UIMetergroupsInternetEWindow.UICreatenewmeterrecordDocument.UIInititialIP4Edit;
            HtmlEdit uIFinalprimaryIPEdit = this.UIMetergroupsInternetEWindow.UICreatenewmeterrecordDocument.UIFinalprimaryIPEdit;
            HtmlEdit uIFinalIP2Edit = this.UIMetergroupsInternetEWindow.UICreatenewmeterrecordDocument.UIFinalIP2Edit;
            HtmlEdit uIFinalIP3Edit = this.UIMetergroupsInternetEWindow.UICreatenewmeterrecordDocument.UIFinalIP3Edit;
            HtmlEdit uIFinalIP4Edit = this.UIMetergroupsInternetEWindow.UICreatenewmeterrecordDocument.UIFinalIP4Edit;
            HtmlEdit uIInitialprimaryportEdit = this.UIMetergroupsInternetEWindow.UICreatenewmeterrecordDocument.UIInitialprimaryportEdit;
            HtmlEdit uIFinalprimaryportEdit = this.UIMetergroupsInternetEWindow.UICreatenewmeterrecordDocument.UIFinalprimaryportEdit;
            HtmlEdit uIInitialsecondaryIPEdit = this.UIMetergroupsInternetEWindow.UICreatenewmeterrecordDocument.UIInitialsecondaryIPEdit;
            HtmlEdit uIInititialsecondaryIPEdit = this.UIMetergroupsInternetEWindow.UICreatenewmeterrecordDocument.UIInititialsecondaryIPEdit;
            HtmlEdit uIInititialsecondaryIPEdit1 = this.UIMetergroupsInternetEWindow.UICreatenewmeterrecordDocument.UIInititialsecondaryIPEdit1;
            HtmlEdit uIInititialsecondaryIPEdit2 = this.UIMetergroupsInternetEWindow.UICreatenewmeterrecordDocument.UIInititialsecondaryIPEdit2;
            HtmlEdit uIInitialsecondaryportEdit = this.UIMetergroupsInternetEWindow.UICreatenewmeterrecordDocument.UIInitialsecondaryportEdit;
            HtmlInputButton uICreateButton = this.UIMetergroupsInternetEWindow.UICreatenewmeterrecordDocument.UIMainPane.UICreateButton;
            HtmlHyperlink uILogOffHyperlink = this.UIMetergroupsInternetEWindow.UIMetergroupsDocument.UIMenuCustom.UILogOffHyperlink;
            WinButton uIЗакрытьButton = this.UIBlankPageInternetExpWindow.UIWelcomeRationalCityITitleBar.UIЗакрытьButton;
            #endregion

            // Go to web page 'http://localhost:2374/' using new browser instance
            this.UIBlankPageInternetExpWindow6.LaunchUrl(new System.Uri(this.AddSingleMeterParams.UIBlankPageInternetExpWindow6Url));

            // Click 'Log On' link
            Mouse.Click(uILogOnHyperlink, new Point(38, 21));

            // Type 'dmorozov' in 'User name' text box
            uIUsernameEdit.Text = this.AddSingleMeterParams.UIUsernameEditText;

            // Type '{Tab}' in 'User name' text box
            Keyboard.SendKeys(uIUsernameEdit, this.AddSingleMeterParams.UIUsernameEditSendKeys, ModifierKeys.None);

            // Type '********' in 'Password' text box
            uIPasswordEdit.Password = this.AddSingleMeterParams.UIPasswordEditPassword;

            // Type '{Enter}' in 'Password' text box
            Keyboard.SendKeys(uIPasswordEdit, this.AddSingleMeterParams.UIPasswordEditSendKeys, ModifierKeys.None);

            // Click 'Meter Groups' link
            Mouse.Click(uIMeterGroupsHyperlink, new Point(37, 26));

            // Click 'Add Meters for IP-range' link
            Mouse.Click(uIAddMetersforIPrangeHyperlink, new Point(39, 8));

            // Type 'single' in 'Group name' text box
            uIGroupnameEdit.Text = this.AddSingleMeterParams.UIGroupnameEditText;

            // Type '{Tab}' in 'Group name' text box
            Keyboard.SendKeys(uIGroupnameEdit, this.AddSingleMeterParams.UIGroupnameEditSendKeys, ModifierKeys.None);

            // Select 'XML-data' in 'Device type' combo box
            uIDevicetypeComboBox.SelectedItem = this.AddSingleMeterParams.UIDevicetypeComboBoxSelectedItem;

            // Type 'single' in 'Meter name prefix' text box
            uIMeternameprefixEdit.Text = this.AddSingleMeterParams.UIMeternameprefixEditText;

            // Type '{Tab}' in 'Meter name prefix' text box
            Keyboard.SendKeys(uIMeternameprefixEdit, this.AddSingleMeterParams.UIMeternameprefixEditSendKeys, ModifierKeys.None);

            // Type '10' in 'Initial primary IP' text box
            uIInitialprimaryIPEdit.Text = this.AddSingleMeterParams.UIInitialprimaryIPEditText;

            // Type '{Tab}' in 'Initial primary IP' text box
            Keyboard.SendKeys(uIInitialprimaryIPEdit, this.AddSingleMeterParams.UIInitialprimaryIPEditSendKeys, ModifierKeys.None);

            // Type '0' in 'Inititial IP2' text box
            uIInititialIP2Edit.Text = this.AddSingleMeterParams.UIInititialIP2EditText;

            // Type '{Tab}' in 'Inititial IP2' text box
            Keyboard.SendKeys(uIInititialIP2Edit, this.AddSingleMeterParams.UIInititialIP2EditSendKeys, ModifierKeys.None);

            // Type '0' in 'Inititial IP3' text box
            uIInititialIP3Edit.Text = this.AddSingleMeterParams.UIInititialIP3EditText;

            // Type '{Tab}' in 'Inititial IP3' text box
            Keyboard.SendKeys(uIInititialIP3Edit, this.AddSingleMeterParams.UIInititialIP3EditSendKeys, ModifierKeys.None);

            // Type '1' in 'Inititial IP4' text box
            uIInititialIP4Edit.Text = this.AddSingleMeterParams.UIInititialIP4EditText;

            // Type '{Tab}' in 'Inititial IP4' text box
            Keyboard.SendKeys(uIInititialIP4Edit, this.AddSingleMeterParams.UIInititialIP4EditSendKeys, ModifierKeys.None);

            // Type '10' in 'Final primary IP' text box
            uIFinalprimaryIPEdit.Text = this.AddSingleMeterParams.UIFinalprimaryIPEditText;

            // Type '{Tab}' in 'Final primary IP' text box
            Keyboard.SendKeys(uIFinalprimaryIPEdit, this.AddSingleMeterParams.UIFinalprimaryIPEditSendKeys, ModifierKeys.None);

            // Type '0' in 'Final IP2' text box
            uIFinalIP2Edit.Text = this.AddSingleMeterParams.UIFinalIP2EditText;

            // Type '{Tab}' in 'Final IP2' text box
            Keyboard.SendKeys(uIFinalIP2Edit, this.AddSingleMeterParams.UIFinalIP2EditSendKeys, ModifierKeys.None);

            // Type '0' in 'Final IP3' text box
            uIFinalIP3Edit.Text = this.AddSingleMeterParams.UIFinalIP3EditText;

            // Type '{Tab}' in 'Final IP3' text box
            Keyboard.SendKeys(uIFinalIP3Edit, this.AddSingleMeterParams.UIFinalIP3EditSendKeys, ModifierKeys.None);

            // Type '1' in 'Final IP4' text box
            uIFinalIP4Edit.Text = this.AddSingleMeterParams.UIFinalIP4EditText;

            // Type '{Tab}' in 'Final IP4' text box
            Keyboard.SendKeys(uIFinalIP4Edit, this.AddSingleMeterParams.UIFinalIP4EditSendKeys, ModifierKeys.None);

            // Type '1111' in 'Initial primary port' text box
            uIInitialprimaryportEdit.Text = this.AddSingleMeterParams.UIInitialprimaryportEditText;

            // Type '{Tab}' in 'Initial primary port' text box
            Keyboard.SendKeys(uIInitialprimaryportEdit, this.AddSingleMeterParams.UIInitialprimaryportEditSendKeys, ModifierKeys.None);

            // Type '1111' in 'Final primary port' text box
            uIFinalprimaryportEdit.Text = this.AddSingleMeterParams.UIFinalprimaryportEditText;

            // Type '{Tab}' in 'Final primary port' text box
            Keyboard.SendKeys(uIFinalprimaryportEdit, this.AddSingleMeterParams.UIFinalprimaryportEditSendKeys, ModifierKeys.None);

            // Type '10' in 'Initial secondary IP' text box
            uIInitialsecondaryIPEdit.Text = this.AddSingleMeterParams.UIInitialsecondaryIPEditText;

            // Type '{Tab}' in 'Initial secondary IP' text box
            Keyboard.SendKeys(uIInitialsecondaryIPEdit, this.AddSingleMeterParams.UIInitialsecondaryIPEditSendKeys, ModifierKeys.None);

            // Type '0' in 'Inititial secondary IP2' text box
            uIInititialsecondaryIPEdit.Text = this.AddSingleMeterParams.UIInititialsecondaryIPEditText;

            // Type '{Tab}' in 'Inititial secondary IP2' text box
            Keyboard.SendKeys(uIInititialsecondaryIPEdit, this.AddSingleMeterParams.UIInititialsecondaryIPEditSendKeys, ModifierKeys.None);

            // Type '0' in 'Inititial secondary IP3' text box
            uIInititialsecondaryIPEdit1.Text = this.AddSingleMeterParams.UIInititialsecondaryIPEdit1Text;

            // Type '{Tab}' in 'Inititial secondary IP3' text box
            Keyboard.SendKeys(uIInititialsecondaryIPEdit1, this.AddSingleMeterParams.UIInititialsecondaryIPEdit1SendKeys, ModifierKeys.None);

            // Type '1' in 'Inititial secondary IP4' text box
            uIInititialsecondaryIPEdit2.Text = this.AddSingleMeterParams.UIInititialsecondaryIPEdit2Text;

            // Type '{Tab}' in 'Inititial secondary IP4' text box
            Keyboard.SendKeys(uIInititialsecondaryIPEdit2, this.AddSingleMeterParams.UIInititialsecondaryIPEdit2SendKeys, ModifierKeys.None);

            // Type '1111' in 'Initial secondary port' text box
            uIInitialsecondaryportEdit.Text = this.AddSingleMeterParams.UIInitialsecondaryportEditText;

            // Type '{Tab}' in 'Initial secondary port' text box
            Keyboard.SendKeys(uIInitialsecondaryportEdit, this.AddSingleMeterParams.UIInitialsecondaryportEditSendKeys, ModifierKeys.None);

            // Type '{Enter}' in 'Create' button
            Keyboard.SendKeys(uICreateButton, this.AddSingleMeterParams.UICreateButtonSendKeys, ModifierKeys.None);

            // Click 'Log Off' link
            Mouse.Click(uILogOffHyperlink, new Point(52, 22));

            // Click 'Закрыть' button
            Mouse.Click(uIЗакрытьButton, new Point(7, 8));
        }
        
        /// <summary>
        /// DeleteMeter
        /// </summary>
        public void DeleteMeter()
        {
            #region Variable Declarations
            WinEdit uIMeterGroupsEdit = this.UIMozillaFirefoxWindow.UIMeterGroupsHyperlink.UIMeterGroupsEdit;
            WinEdit uIMetersEdit = this.UIMozillaFirefoxWindow.UIMetersHyperlink.UIMetersEdit;
            WinEdit uIDeleteEdit = this.UIMozillaFirefoxWindow.UIDeleteHyperlink.UIDeleteEdit;
            WinEdit uIDeleteEdit1 = this.UIMozillaFirefoxWindow.UIDeleteButton.UIDeleteEdit;
            WinEdit uIGroupsEdit = this.UIMozillaFirefoxWindow.UIGroupsHyperlink.UIGroupsEdit;
            #endregion

            // Click 'Meter Groups' text box
            Mouse.Click(uIMeterGroupsEdit, new Point(51, 9));

            // Click 'Meters' text box
            Mouse.Click(uIMetersEdit, new Point(22, 8));

            // Click 'Delete' text box
            Mouse.Click(uIDeleteEdit, new Point(7, 7));

            // Click 'Delete' text box
            Mouse.Click(uIDeleteEdit1, new Point(19, 9));

            // Click 'Groups' text box
            Mouse.Click(uIGroupsEdit, new Point(18, 14));
        }
        
        /// <summary>
        /// DeleteGroup
        /// </summary>
        public void DeleteGroup()
        {
            #region Variable Declarations
            WinEdit uIMeterGroupsEdit = this.UIMozillaFirefoxWindow.UIMeterGroupsHyperlink.UIMeterGroupsEdit;
            WinEdit uIDeleteGroupEdit = this.UIMozillaFirefoxWindow.UIDeleteGroupHyperlink.UIDeleteGroupEdit;
            WinEdit uIDeleteEdit = this.UIMozillaFirefoxWindow.UIDeleteButton.UIDeleteEdit;
            #endregion

            // Click 'Meter Groups' text box
            Mouse.Click(uIMeterGroupsEdit, new Point(59, 4));

            // Click 'Delete Group' text box
            Mouse.Click(uIDeleteGroupEdit, new Point(27, 12));

            // Click 'Delete' text box
            Mouse.Click(uIDeleteEdit, new Point(29, 11));
        }
        
        /// <summary>
        /// EditGroupProperties - Use 'EditGroupPropertiesParams' to pass parameters into this method.
        /// </summary>
        public void EditGroupProperties()
        {
            #region Variable Declarations
            HtmlHyperlink uIMeterGroupsHyperlink = this.UIBlankPageInternetExpWindow.UIWelcomeRationalCityDocument.UIMenuCustom.UIMeterGroupsHyperlink;
            HtmlHyperlink uIEditHyperlink = this.UIMetergroupsInternetEWindow.UIMetergroupsDocument.UIGridPane3.UIEditHyperlink;
            HtmlEdit uIGroupnameEdit = this.UIWelcomeRationalCityIWindow.UIEditmetergroupproperDocument.UIGroupnameEdit;
            HtmlComboBox uIMetertypeComboBox = this.UIWelcomeRationalCityIWindow.UIEditmetergroupproperDocument.UIMetertypeComboBox;
            HtmlRadioButton uIMinModeRadioButton = this.UIWelcomeRationalCityIWindow.UIEditmetergroupproperDocument.UIMinModeRadioButton;
            HtmlComboBox uIMinutesEComboBox = this.UIWelcomeRationalCityIWindow.UIEditmetergroupproperDocument.UIMinutesEComboBox;
            HtmlComboBox uIMinutesGComboBox = this.UIWelcomeRationalCityIWindow.UIEditmetergroupproperDocument.UIMinutesGComboBox;
            HtmlRadioButton uIHourModeRadioButton = this.UIWelcomeRationalCityIWindow.UIEditmetergroupproperDocument.UIHourModeRadioButton;
            HtmlComboBox uIHoursEComboBox = this.UIWelcomeRationalCityIWindow.UIEditmetergroupproperDocument.UIHoursEComboBox;
            HtmlComboBox uIHoursGComboBox = this.UIWelcomeRationalCityIWindow.UIEditmetergroupproperDocument.UIHoursGComboBox;
            HtmlRadioButton uIDayModeRadioButton = this.UIWelcomeRationalCityIWindow.UIEditmetergroupproperDocument.UIDayModeRadioButton;
            HtmlComboBox uIDaysEComboBox = this.UIWelcomeRationalCityIWindow.UIEditmetergroupproperDocument.UIDaysEComboBox;
            HtmlComboBox uIDaysGComboBox = this.UIWelcomeRationalCityIWindow.UIEditmetergroupproperDocument.UIDaysGComboBox;
            HtmlCheckBox uIMondayCheckBox = this.UIWelcomeRationalCityIWindow.UIEditmetergroupproperDocument.UIMondayCheckBox;
            HtmlCheckBox uITuesdayCheckBox = this.UIWelcomeRationalCityIWindow.UIEditmetergroupproperDocument.UITuesdayCheckBox;
            HtmlCheckBox uIWednesdayCheckBox = this.UIWelcomeRationalCityIWindow.UIEditmetergroupproperDocument.UIWednesdayCheckBox;
            HtmlCheckBox uIThursdayCheckBox = this.UIWelcomeRationalCityIWindow.UIEditmetergroupproperDocument.UIThursdayCheckBox;
            HtmlCheckBox uIFridayCheckBox = this.UIWelcomeRationalCityIWindow.UIEditmetergroupproperDocument.UIFridayCheckBox;
            HtmlCheckBox uISaturdayCheckBox = this.UIWelcomeRationalCityIWindow.UIEditmetergroupproperDocument.UISaturdayCheckBox;
            HtmlCheckBox uISundayCheckBox = this.UIWelcomeRationalCityIWindow.UIEditmetergroupproperDocument.UISundayCheckBox;
            HtmlRadioButton uIWeekModeRadioButton = this.UIWelcomeRationalCityIWindow.UIEditmetergroupproperDocument.UIWeekModeRadioButton;
            HtmlInputButton uISaveButton = this.UIWelcomeRationalCityIWindow.UIEditmetergroupproperDocument.UIMainPane.UISaveButton;
            HtmlHyperlink uIHomeHyperlink = this.UIMetergroupsInternetEWindow.UIMetergroupsDocument.UIMenuCustom.UIHomeHyperlink;
            #endregion

            // Click 'Meter Groups' link
            Mouse.Click(uIMeterGroupsHyperlink, new Point(72, 25));

            // Click 'Edit' link
            Mouse.Click(uIEditHyperlink, new Point(23, 12));

            // Type 'single modified                                                                                              ' in 'Group name' text box
            uIGroupnameEdit.Text = this.EditGroupPropertiesParams.UIGroupnameEditText;

            // Type '{Tab}' in 'Group name' text box
            Keyboard.SendKeys(uIGroupnameEdit, this.EditGroupPropertiesParams.UIGroupnameEditSendKeys, ModifierKeys.None);

            // Select 'XML-data' in 'Meter type' combo box
            uIMetertypeComboBox.SelectedItem = this.EditGroupPropertiesParams.UIMetertypeComboBoxSelectedItem;

            // Select 'MinMode' radio button
            uIMinModeRadioButton.Selected = this.EditGroupPropertiesParams.UIMinModeRadioButtonSelected;

            // Type '{Tab}' in 'MinMode' radio button
            Keyboard.SendKeys(uIMinModeRadioButton, this.EditGroupPropertiesParams.UIMinModeRadioButtonSendKeys, ModifierKeys.None);

            // Select '1' in 'MinutesE' combo box
            uIMinutesEComboBox.SelectedItem = this.EditGroupPropertiesParams.UIMinutesEComboBoxSelectedItem;

            // Select '00' in 'MinutesG' combo box
            uIMinutesGComboBox.SelectedItem = this.EditGroupPropertiesParams.UIMinutesGComboBoxSelectedItem;

            // Select 'HourMode' radio button
            uIHourModeRadioButton.Selected = this.EditGroupPropertiesParams.UIHourModeRadioButtonSelected;

            // Type '{Tab}' in 'HourMode' radio button
            Keyboard.SendKeys(uIHourModeRadioButton, this.EditGroupPropertiesParams.UIHourModeRadioButtonSendKeys, ModifierKeys.None);

            // Select '3' in 'HoursE' combo box
            uIHoursEComboBox.SelectedItem = this.EditGroupPropertiesParams.UIHoursEComboBoxSelectedItem;

            // Select '00' in 'HoursG' combo box
            uIHoursGComboBox.SelectedItem = this.EditGroupPropertiesParams.UIHoursGComboBoxSelectedItem;

            // Select 'DayMode' radio button
            uIDayModeRadioButton.Selected = this.EditGroupPropertiesParams.UIDayModeRadioButtonSelected;

            // Type '{Tab}' in 'DayMode' radio button
            Keyboard.SendKeys(uIDayModeRadioButton, this.EditGroupPropertiesParams.UIDayModeRadioButtonSendKeys, ModifierKeys.None);

            // Select '2' in 'DaysE' combo box
            uIDaysEComboBox.SelectedItem = this.EditGroupPropertiesParams.UIDaysEComboBoxSelectedItem;

            // Select '1' in 'DaysG' combo box
            uIDaysGComboBox.SelectedItem = this.EditGroupPropertiesParams.UIDaysGComboBoxSelectedItem;

            // Type '{Tab}' in 'Monday' check box
            Keyboard.SendKeys(uIMondayCheckBox, this.EditGroupPropertiesParams.UIMondayCheckBoxSendKeys, ModifierKeys.None);

            // Type '{Tab}' in 'Tuesday' check box
            Keyboard.SendKeys(uITuesdayCheckBox, this.EditGroupPropertiesParams.UITuesdayCheckBoxSendKeys, ModifierKeys.None);

            // Type '{Tab}' in 'Wednesday' check box
            Keyboard.SendKeys(uIWednesdayCheckBox, this.EditGroupPropertiesParams.UIWednesdayCheckBoxSendKeys, ModifierKeys.None);

            // Type '{Tab}' in 'Thursday' check box
            Keyboard.SendKeys(uIThursdayCheckBox, this.EditGroupPropertiesParams.UIThursdayCheckBoxSendKeys, ModifierKeys.None);

            // Type '{Tab}' in 'Friday' check box
            Keyboard.SendKeys(uIFridayCheckBox, this.EditGroupPropertiesParams.UIFridayCheckBoxSendKeys, ModifierKeys.None);

            // Type '{Tab}' in 'Saturday' check box
            Keyboard.SendKeys(uISaturdayCheckBox, this.EditGroupPropertiesParams.UISaturdayCheckBoxSendKeys, ModifierKeys.None);

            // Type '{Tab}' in 'Sunday' check box
            Keyboard.SendKeys(uISundayCheckBox, this.EditGroupPropertiesParams.UISundayCheckBoxSendKeys, ModifierKeys.None);

            // Select 'WeekMode' radio button
            uIWeekModeRadioButton.Selected = this.EditGroupPropertiesParams.UIWeekModeRadioButtonSelected;

            // Click 'Save' button
            Mouse.Click(uISaveButton, new Point(16, 15));

            // Click 'Home' link
            Mouse.Click(uIHomeHyperlink, new Point(39, 21));
        }
        
        /// <summary>
        /// ViewGroupDetails
        /// </summary>
        public void ViewGroupDetails()
        {
            #region Variable Declarations
            HtmlHyperlink uIMeterGroupsHyperlink = this.UIBlankPageInternetExpWindow.UIWelcomeRationalCityDocument.UIMenuCustom.UIMeterGroupsHyperlink;
            HtmlHyperlink uIDetailsHyperlink = this.UIMetergroupsInternetEWindow.UIMetergroupsDocument.UIGridPane3.UIDetailsHyperlink;
            HtmlHyperlink uIMeterGroupsHyperlink1 = this.UIWelcomeRationalCityIWindow1.UIDetailsofmetergroupDocument.UIMainPane.UIMeterGroupsHyperlink;
            #endregion

            // Click 'Meter Groups' link
            Mouse.Click(uIMeterGroupsHyperlink, new Point(86, 23));

            // Click 'Details' link
            Mouse.Click(uIDetailsHyperlink, new Point(35, 10));

            // Click 'Meter Groups' link
            Mouse.Click(uIMeterGroupsHyperlink1, new Point(24, 10));
        }
        
        /// <summary>
        /// ViewGroupDetailsAndEdit - Use 'ViewGroupDetailsAndEditParams' to pass parameters into this method.
        /// </summary>
        public void ViewGroupDetailsAndEdit()
        {
            #region Variable Declarations
            HtmlHyperlink uIMeterGroupsHyperlink = this.UIBlankPageInternetExpWindow.UIWelcomeRationalCityDocument.UIMenuCustom.UIMeterGroupsHyperlink;
            HtmlHyperlink uIDetailsHyperlink = this.UIMetergroupsInternetEWindow.UIMetergroupsDocument.UIGridPane3.UIDetailsHyperlink;
            HtmlHyperlink uIEditHyperlink = this.UIWelcomeRationalCityIWindow1.UIDetailsofmetergroupDocument.UIMainPane.UIEditHyperlink;
            HtmlEdit uIGroupnameEdit = this.UIWelcomeRationalCityIWindow2.UIEditmetergroupproperDocument.UIGroupnameEdit;
            HtmlComboBox uIMetertypeComboBox = this.UIWelcomeRationalCityIWindow2.UIEditmetergroupproperDocument.UIMetertypeComboBox;
            HtmlRadioButton uIMinModeRadioButton = this.UIWelcomeRationalCityIWindow2.UIEditmetergroupproperDocument.UIMinModeRadioButton;
            HtmlComboBox uIMinutesEComboBox = this.UIWelcomeRationalCityIWindow2.UIEditmetergroupproperDocument.UIMinutesEComboBox;
            HtmlRadioButton uIMinModeRadioButton1 = this.UIWelcomeRationalCityIWindow2.UIEditmetergroupproperDocument.UIMinModeRadioButton1;
            HtmlComboBox uIMinutesGComboBox = this.UIWelcomeRationalCityIWindow2.UIEditmetergroupproperDocument.UIMinutesGComboBox;
            HtmlRadioButton uIHourModeRadioButton = this.UIWelcomeRationalCityIWindow2.UIEditmetergroupproperDocument.UIHourModeRadioButton;
            HtmlComboBox uIHoursEComboBox = this.UIWelcomeRationalCityIWindow2.UIEditmetergroupproperDocument.UIHoursEComboBox;
            HtmlRadioButton uIHourModeRadioButton1 = this.UIWelcomeRationalCityIWindow2.UIEditmetergroupproperDocument.UIHourModeRadioButton1;
            HtmlComboBox uIHoursGComboBox = this.UIWelcomeRationalCityIWindow2.UIEditmetergroupproperDocument.UIHoursGComboBox;
            HtmlRadioButton uIDayModeRadioButton = this.UIWelcomeRationalCityIWindow2.UIEditmetergroupproperDocument.UIDayModeRadioButton;
            HtmlComboBox uIDaysEComboBox = this.UIWelcomeRationalCityIWindow2.UIEditmetergroupproperDocument.UIDaysEComboBox;
            HtmlRadioButton uIDayModeRadioButton1 = this.UIWelcomeRationalCityIWindow2.UIEditmetergroupproperDocument.UIDayModeRadioButton1;
            HtmlComboBox uIDaysGComboBox = this.UIWelcomeRationalCityIWindow2.UIEditmetergroupproperDocument.UIDaysGComboBox;
            HtmlCheckBox uIMondayCheckBox = this.UIWelcomeRationalCityIWindow2.UIEditmetergroupproperDocument.UIMondayCheckBox;
            HtmlCheckBox uITuesdayCheckBox = this.UIWelcomeRationalCityIWindow2.UIEditmetergroupproperDocument.UITuesdayCheckBox;
            HtmlCheckBox uIWednesdayCheckBox = this.UIWelcomeRationalCityIWindow2.UIEditmetergroupproperDocument.UIWednesdayCheckBox;
            HtmlCheckBox uIThursdayCheckBox = this.UIWelcomeRationalCityIWindow2.UIEditmetergroupproperDocument.UIThursdayCheckBox;
            HtmlCheckBox uIFridayCheckBox = this.UIWelcomeRationalCityIWindow2.UIEditmetergroupproperDocument.UIFridayCheckBox;
            HtmlCheckBox uISaturdayCheckBox = this.UIWelcomeRationalCityIWindow2.UIEditmetergroupproperDocument.UISaturdayCheckBox;
            HtmlCheckBox uISundayCheckBox = this.UIWelcomeRationalCityIWindow2.UIEditmetergroupproperDocument.UISundayCheckBox;
            HtmlRadioButton uIWeekModeRadioButton = this.UIWelcomeRationalCityIWindow2.UIEditmetergroupproperDocument.UIWeekModeRadioButton;
            HtmlComboBox uIWeeksGComboBox = this.UIWelcomeRationalCityIWindow2.UIEditmetergroupproperDocument.UIWeeksGComboBox;
            HtmlInputButton uISaveButton = this.UIWelcomeRationalCityIWindow2.UIEditmetergroupproperDocument.UIMainPane.UISaveButton;
            #endregion

            // Click 'Meter Groups' link
            Mouse.Click(uIMeterGroupsHyperlink, new Point(89, 26));

            // Click 'Details' link
            Mouse.Click(uIDetailsHyperlink, new Point(39, 10));

            // Click 'Edit' link
            Mouse.Click(uIEditHyperlink, new Point(20, 13));

            // Type 'single   modified                                                                                           ' in 'Group name' text box
            uIGroupnameEdit.Text = this.ViewGroupDetailsAndEditParams.UIGroupnameEditText;

            // Type '{Tab}' in 'Group name' text box
            Keyboard.SendKeys(uIGroupnameEdit, this.ViewGroupDetailsAndEditParams.UIGroupnameEditSendKeys, ModifierKeys.None);

            // Select 'XML-data' in 'Meter type' combo box
            uIMetertypeComboBox.SelectedItem = this.ViewGroupDetailsAndEditParams.UIMetertypeComboBoxSelectedItem;

            // Type '{Tab}' in 'MinMode' radio button
            Keyboard.SendKeys(uIMinModeRadioButton, this.ViewGroupDetailsAndEditParams.UIMinModeRadioButtonSendKeys, ModifierKeys.None);

            // Select '1' in 'MinutesE' combo box
            uIMinutesEComboBox.SelectedItem = this.ViewGroupDetailsAndEditParams.UIMinutesEComboBoxSelectedItem;

            // Select 'MinMode' radio button
            uIMinModeRadioButton1.Selected = this.ViewGroupDetailsAndEditParams.UIMinModeRadioButton1Selected;

            // Type '{Tab}' in 'MinMode' radio button
            Keyboard.SendKeys(uIMinModeRadioButton1, this.ViewGroupDetailsAndEditParams.UIMinModeRadioButton1SendKeys, ModifierKeys.None);

            // Select '10' in 'MinutesG' combo box
            uIMinutesGComboBox.SelectedItem = this.ViewGroupDetailsAndEditParams.UIMinutesGComboBoxSelectedItem;

            // Type '{Tab}' in 'HourMode' radio button
            Keyboard.SendKeys(uIHourModeRadioButton, this.ViewGroupDetailsAndEditParams.UIHourModeRadioButtonSendKeys, ModifierKeys.None);

            // Select '1' in 'HoursE' combo box
            uIHoursEComboBox.SelectedItem = this.ViewGroupDetailsAndEditParams.UIHoursEComboBoxSelectedItem;

            // Select 'HourMode' radio button
            uIHourModeRadioButton1.Selected = this.ViewGroupDetailsAndEditParams.UIHourModeRadioButton1Selected;

            // Type '{Tab}' in 'HourMode' radio button
            Keyboard.SendKeys(uIHourModeRadioButton1, this.ViewGroupDetailsAndEditParams.UIHourModeRadioButton1SendKeys, ModifierKeys.None);

            // Select '02' in 'HoursG' combo box
            uIHoursGComboBox.SelectedItem = this.ViewGroupDetailsAndEditParams.UIHoursGComboBoxSelectedItem;

            // Type '{Tab}' in 'DayMode' radio button
            Keyboard.SendKeys(uIDayModeRadioButton, this.ViewGroupDetailsAndEditParams.UIDayModeRadioButtonSendKeys, ModifierKeys.None);

            // Select '1' in 'DaysE' combo box
            uIDaysEComboBox.SelectedItem = this.ViewGroupDetailsAndEditParams.UIDaysEComboBoxSelectedItem;

            // Select 'DayMode' radio button
            uIDayModeRadioButton1.Selected = this.ViewGroupDetailsAndEditParams.UIDayModeRadioButton1Selected;

            // Type '{Tab}' in 'DayMode' radio button
            Keyboard.SendKeys(uIDayModeRadioButton1, this.ViewGroupDetailsAndEditParams.UIDayModeRadioButton1SendKeys, ModifierKeys.None);

            // Select '3' in 'DaysG' combo box
            uIDaysGComboBox.SelectedItem = this.ViewGroupDetailsAndEditParams.UIDaysGComboBoxSelectedItem;

            // Type '{Tab}' in 'Monday' check box
            Keyboard.SendKeys(uIMondayCheckBox, this.ViewGroupDetailsAndEditParams.UIMondayCheckBoxSendKeys, ModifierKeys.None);

            // Type '{Tab}' in 'Tuesday' check box
            Keyboard.SendKeys(uITuesdayCheckBox, this.ViewGroupDetailsAndEditParams.UITuesdayCheckBoxSendKeys, ModifierKeys.None);

            // Type '{Tab}' in 'Wednesday' check box
            Keyboard.SendKeys(uIWednesdayCheckBox, this.ViewGroupDetailsAndEditParams.UIWednesdayCheckBoxSendKeys, ModifierKeys.None);

            // Type '{Tab}' in 'Thursday' check box
            Keyboard.SendKeys(uIThursdayCheckBox, this.ViewGroupDetailsAndEditParams.UIThursdayCheckBoxSendKeys, ModifierKeys.None);

            // Type '{Tab}' in 'Friday' check box
            Keyboard.SendKeys(uIFridayCheckBox, this.ViewGroupDetailsAndEditParams.UIFridayCheckBoxSendKeys, ModifierKeys.None);

            // Type '{Tab}' in 'Saturday' check box
            Keyboard.SendKeys(uISaturdayCheckBox, this.ViewGroupDetailsAndEditParams.UISaturdayCheckBoxSendKeys, ModifierKeys.None);

            // Type '{Tab}' in 'Sunday' check box
            Keyboard.SendKeys(uISundayCheckBox, this.ViewGroupDetailsAndEditParams.UISundayCheckBoxSendKeys, ModifierKeys.None);

            // Type '{Tab}' in 'WeekMode' radio button
            Keyboard.SendKeys(uIWeekModeRadioButton, this.ViewGroupDetailsAndEditParams.UIWeekModeRadioButtonSendKeys, ModifierKeys.None);

            // Select '3' in 'WeeksG' combo box
            uIWeeksGComboBox.SelectedItem = this.ViewGroupDetailsAndEditParams.UIWeeksGComboBoxSelectedItem;

            // Click 'Save' button
            Mouse.Click(uISaveButton, new Point(18, 10));
        }
        
        /// <summary>
        /// ViewDeviceListAndAddSingle - Use 'ViewDeviceListAndAddSingleParams' to pass parameters into this method.
        /// </summary>
        public void ViewDeviceListAndAddSingle()
        {
            #region Variable Declarations
            HtmlHyperlink uIMeterGroupsHyperlink = this.UIBlankPageInternetExpWindow.UIWelcomeRationalCityDocument.UIMenuCustom.UIMeterGroupsHyperlink;
            HtmlHyperlink uIMetersHyperlink2 = this.UIMetergroupsInternetEWindow.UIMetergroupsDocument.UIGridPane3.UIMetersHyperlink2;
            HtmlHyperlink uICreateHyperlink = this.UIWelcomeRationalCityIWindow3.UIMetersassociatedwithDocument.UIMainPane.UICreateHyperlink;
            HtmlEdit uIDevicenameEdit = this.UIWelcomeRationalCityIWindow4.UICreatenewdeviceassocDocument.UIDevicenameEdit;
            HtmlComboBox uIGroupnameComboBox = this.UIWelcomeRationalCityIWindow4.UICreatenewdeviceassocDocument.UIGroupnameComboBox;
            HtmlComboBox uIDevicetypeComboBox = this.UIWelcomeRationalCityIWindow4.UICreatenewdeviceassocDocument.UIDevicetypeComboBox;
            HtmlEdit uIInternaladdressEdit = this.UIWelcomeRationalCityIWindow4.UICreatenewdeviceassocDocument.UIInternaladdressEdit;
            HtmlEdit uIIP1Edit = this.UIWelcomeRationalCityIWindow4.UICreatenewdeviceassocDocument.UIIP1Edit;
            HtmlEdit uIIP2Edit = this.UIWelcomeRationalCityIWindow4.UICreatenewdeviceassocDocument.UIIP2Edit;
            HtmlEdit uIIP3Edit = this.UIWelcomeRationalCityIWindow4.UICreatenewdeviceassocDocument.UIIP3Edit;
            HtmlEdit uIIP4Edit = this.UIWelcomeRationalCityIWindow4.UICreatenewdeviceassocDocument.UIIP4Edit;
            HtmlEdit uIPrimaryportEdit = this.UIWelcomeRationalCityIWindow4.UICreatenewdeviceassocDocument.UIPrimaryportEdit;
            HtmlEdit uISecondaryIP1Edit = this.UIWelcomeRationalCityIWindow4.UICreatenewdeviceassocDocument.UISecondaryIP1Edit;
            HtmlEdit uISecondaryIP2Edit = this.UIWelcomeRationalCityIWindow4.UICreatenewdeviceassocDocument.UISecondaryIP2Edit;
            HtmlEdit uISecondaryIP3Edit = this.UIWelcomeRationalCityIWindow4.UICreatenewdeviceassocDocument.UISecondaryIP3Edit;
            HtmlEdit uISecondaryIP4Edit = this.UIWelcomeRationalCityIWindow4.UICreatenewdeviceassocDocument.UISecondaryIP4Edit;
            HtmlEdit uISecondaryportEdit = this.UIWelcomeRationalCityIWindow4.UICreatenewdeviceassocDocument.UISecondaryportEdit;
            HtmlInputButton uICreateButton = this.UIWelcomeRationalCityIWindow4.UICreatenewdeviceassocDocument.UIMainPane.UICreateButton;
            #endregion

            // Click 'Meter Groups' link
            Mouse.Click(uIMeterGroupsHyperlink, new Point(107, 22));

            // Click 'Meters' link
            Mouse.Click(uIMetersHyperlink2, new Point(18, 10));

            // Click 'Create' link
            Mouse.Click(uICreateHyperlink, new Point(31, 11));

            // Type 'sgl' in 'Device name' text box
            uIDevicenameEdit.Text = this.ViewDeviceListAndAddSingleParams.UIDevicenameEditText;

            // Type '{Tab}' in 'Device name' text box
            Keyboard.SendKeys(uIDevicenameEdit, this.ViewDeviceListAndAddSingleParams.UIDevicenameEditSendKeys, ModifierKeys.None);

            // Select 'single' in 'Group name' combo box
            uIGroupnameComboBox.SelectedItem = this.ViewDeviceListAndAddSingleParams.UIGroupnameComboBoxSelectedItem;

            // Select 'XML-data' in 'Device type' combo box
            uIDevicetypeComboBox.SelectedItem = this.ViewDeviceListAndAddSingleParams.UIDevicetypeComboBoxSelectedItem;

            // Type '1' in 'Internal address' text box
            uIInternaladdressEdit.Text = this.ViewDeviceListAndAddSingleParams.UIInternaladdressEditText;

            // Type '{Tab}' in 'Internal address' text box
            Keyboard.SendKeys(uIInternaladdressEdit, this.ViewDeviceListAndAddSingleParams.UIInternaladdressEditSendKeys, ModifierKeys.None);

            // Type '10' in 'IP1' text box
            uIIP1Edit.Text = this.ViewDeviceListAndAddSingleParams.UIIP1EditText;

            // Type '{Tab}' in 'IP1' text box
            Keyboard.SendKeys(uIIP1Edit, this.ViewDeviceListAndAddSingleParams.UIIP1EditSendKeys, ModifierKeys.None);

            // Type '0' in 'IP2' text box
            uIIP2Edit.Text = this.ViewDeviceListAndAddSingleParams.UIIP2EditText;

            // Type '{Tab}' in 'IP2' text box
            Keyboard.SendKeys(uIIP2Edit, this.ViewDeviceListAndAddSingleParams.UIIP2EditSendKeys, ModifierKeys.None);

            // Type '0' in 'IP3' text box
            uIIP3Edit.Text = this.ViewDeviceListAndAddSingleParams.UIIP3EditText;

            // Type '{Tab}' in 'IP3' text box
            Keyboard.SendKeys(uIIP3Edit, this.ViewDeviceListAndAddSingleParams.UIIP3EditSendKeys, ModifierKeys.None);

            // Type '1' in 'IP4' text box
            uIIP4Edit.Text = this.ViewDeviceListAndAddSingleParams.UIIP4EditText;

            // Type '{Tab}' in 'IP4' text box
            Keyboard.SendKeys(uIIP4Edit, this.ViewDeviceListAndAddSingleParams.UIIP4EditSendKeys, ModifierKeys.None);

            // Type '1000' in 'Primary port' text box
            uIPrimaryportEdit.Text = this.ViewDeviceListAndAddSingleParams.UIPrimaryportEditText;

            // Type '{Tab}' in 'Primary port' text box
            Keyboard.SendKeys(uIPrimaryportEdit, this.ViewDeviceListAndAddSingleParams.UIPrimaryportEditSendKeys, ModifierKeys.None);

            // Type '10' in 'SecondaryIP1' text box
            uISecondaryIP1Edit.Text = this.ViewDeviceListAndAddSingleParams.UISecondaryIP1EditText;

            // Type '{Tab}' in 'SecondaryIP1' text box
            Keyboard.SendKeys(uISecondaryIP1Edit, this.ViewDeviceListAndAddSingleParams.UISecondaryIP1EditSendKeys, ModifierKeys.None);

            // Type '0' in 'SecondaryIP2' text box
            uISecondaryIP2Edit.Text = this.ViewDeviceListAndAddSingleParams.UISecondaryIP2EditText;

            // Type '{Tab}' in 'SecondaryIP2' text box
            Keyboard.SendKeys(uISecondaryIP2Edit, this.ViewDeviceListAndAddSingleParams.UISecondaryIP2EditSendKeys, ModifierKeys.None);

            // Type '0' in 'SecondaryIP3' text box
            uISecondaryIP3Edit.Text = this.ViewDeviceListAndAddSingleParams.UISecondaryIP3EditText;

            // Type '{Tab}' in 'SecondaryIP3' text box
            Keyboard.SendKeys(uISecondaryIP3Edit, this.ViewDeviceListAndAddSingleParams.UISecondaryIP3EditSendKeys, ModifierKeys.None);

            // Type '1' in 'SecondaryIP4' text box
            uISecondaryIP4Edit.Text = this.ViewDeviceListAndAddSingleParams.UISecondaryIP4EditText;

            // Type '{Tab}' in 'SecondaryIP4' text box
            Keyboard.SendKeys(uISecondaryIP4Edit, this.ViewDeviceListAndAddSingleParams.UISecondaryIP4EditSendKeys, ModifierKeys.None);

            // Type '1000' in 'Secondary port' text box
            uISecondaryportEdit.Text = this.ViewDeviceListAndAddSingleParams.UISecondaryportEditText;

            // Type '{Tab}' in 'Secondary port' text box
            Keyboard.SendKeys(uISecondaryportEdit, this.ViewDeviceListAndAddSingleParams.UISecondaryportEditSendKeys, ModifierKeys.None);

            // Type '{Enter}' in 'Create' button
            Keyboard.SendKeys(uICreateButton, this.ViewDeviceListAndAddSingleParams.UICreateButtonSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// EditDeviceDetails - Use 'EditDeviceDetailsParams' to pass parameters into this method.
        /// </summary>
        public void EditDeviceDetails()
        {
            #region Variable Declarations
            HtmlHyperlink uIMeterGroupsHyperlink = this.UIBlankPageInternetExpWindow.UIWelcomeRationalCityDocument.UIMenuCustom.UIMeterGroupsHyperlink;
            HtmlHyperlink uIMetersHyperlink3 = this.UIMetergroupsInternetEWindow.UIMetergroupsDocument.UIGridPane3.UIMetersHyperlink3;
            HtmlHyperlink uIEditHyperlink = this.UIWelcomeRationalCityIWindow5.UIMetersassociatedwithDocument.UIGridPane.UIEditHyperlink;
            HtmlEdit uIMeternameEdit = this.UIWelcomeRationalCityIWindow6.UIEditmeterpropertiesDocument.UIMeternameEdit;
            HtmlComboBox uIGroupnameComboBox = this.UIWelcomeRationalCityIWindow6.UIEditmeterpropertiesDocument.UIGroupnameComboBox;
            HtmlComboBox uIMetertypeComboBox = this.UIWelcomeRationalCityIWindow6.UIEditmeterpropertiesDocument.UIMetertypeComboBox;
            HtmlEdit uIInternaladdressEdit = this.UIWelcomeRationalCityIWindow6.UIEditmeterpropertiesDocument.UIInternaladdressEdit;
            HtmlEdit uIIP1Edit = this.UIWelcomeRationalCityIWindow6.UIEditmeterpropertiesDocument.UIIP1Edit;
            HtmlEdit uIIP2Edit = this.UIWelcomeRationalCityIWindow6.UIEditmeterpropertiesDocument.UIIP2Edit;
            HtmlEdit uIIP3Edit = this.UIWelcomeRationalCityIWindow6.UIEditmeterpropertiesDocument.UIIP3Edit;
            HtmlEdit uIIP4Edit = this.UIWelcomeRationalCityIWindow6.UIEditmeterpropertiesDocument.UIIP4Edit;
            HtmlEdit uIPrimaryportEdit = this.UIWelcomeRationalCityIWindow6.UIEditmeterpropertiesDocument.UIPrimaryportEdit;
            HtmlEdit uISecondaryIP1Edit = this.UIWelcomeRationalCityIWindow6.UIEditmeterpropertiesDocument.UISecondaryIP1Edit;
            HtmlEdit uISecondaryIP2Edit = this.UIWelcomeRationalCityIWindow6.UIEditmeterpropertiesDocument.UISecondaryIP2Edit;
            HtmlEdit uISecondaryIP3Edit = this.UIWelcomeRationalCityIWindow6.UIEditmeterpropertiesDocument.UISecondaryIP3Edit;
            HtmlEdit uISecondaryIP4Edit = this.UIWelcomeRationalCityIWindow6.UIEditmeterpropertiesDocument.UISecondaryIP4Edit;
            HtmlEdit uISecondaryportEdit = this.UIWelcomeRationalCityIWindow6.UIEditmeterpropertiesDocument.UISecondaryportEdit;
            HtmlInputButton uISaveButton = this.UIWelcomeRationalCityIWindow6.UIEditmeterpropertiesDocument.UIMainPane.UISaveButton;
            #endregion

            // Click 'Meter Groups' link
            Mouse.Click(uIMeterGroupsHyperlink, new Point(58, 25));

            // Click 'Meters' link
            Mouse.Click(uIMetersHyperlink3, new Point(27, 11));

            // Click 'Edit' link
            Mouse.Click(uIEditHyperlink, new Point(18, 8));

            // Type 'single modified' in 'Meter name' text box
            uIMeternameEdit.Text = this.EditDeviceDetailsParams.UIMeternameEditText;

            // Type '{Tab}' in 'Meter name' text box
            Keyboard.SendKeys(uIMeternameEdit, this.EditDeviceDetailsParams.UIMeternameEditSendKeys, ModifierKeys.None);

            // Select 'single' in 'Group name' combo box
            uIGroupnameComboBox.SelectedItem = this.EditDeviceDetailsParams.UIGroupnameComboBoxSelectedItem;

            // Select 'XML-data' in 'Meter type' combo box
            uIMetertypeComboBox.SelectedItem = this.EditDeviceDetailsParams.UIMetertypeComboBoxSelectedItem;

            // Type '{Tab}' in 'Internal address' text box
            Keyboard.SendKeys(uIInternaladdressEdit, this.EditDeviceDetailsParams.UIInternaladdressEditSendKeys, ModifierKeys.None);

            // Type '{Tab}' in 'IP1' text box
            Keyboard.SendKeys(uIIP1Edit, this.EditDeviceDetailsParams.UIIP1EditSendKeys, ModifierKeys.None);

            // Type '{Tab}' in 'IP2' text box
            Keyboard.SendKeys(uIIP2Edit, this.EditDeviceDetailsParams.UIIP2EditSendKeys, ModifierKeys.None);

            // Type '{Tab}' in 'IP3' text box
            Keyboard.SendKeys(uIIP3Edit, this.EditDeviceDetailsParams.UIIP3EditSendKeys, ModifierKeys.None);

            // Type '10' in 'IP4' text box
            uIIP4Edit.Text = this.EditDeviceDetailsParams.UIIP4EditText;

            // Type '{Tab}' in 'IP4' text box
            Keyboard.SendKeys(uIIP4Edit, this.EditDeviceDetailsParams.UIIP4EditSendKeys, ModifierKeys.None);

            // Type '{Tab}' in 'Primary port' text box
            Keyboard.SendKeys(uIPrimaryportEdit, this.EditDeviceDetailsParams.UIPrimaryportEditSendKeys, ModifierKeys.None);

            // Type '{Tab}' in 'SecondaryIP1' text box
            Keyboard.SendKeys(uISecondaryIP1Edit, this.EditDeviceDetailsParams.UISecondaryIP1EditSendKeys, ModifierKeys.None);

            // Type '{Tab}' in 'SecondaryIP2' text box
            Keyboard.SendKeys(uISecondaryIP2Edit, this.EditDeviceDetailsParams.UISecondaryIP2EditSendKeys, ModifierKeys.None);

            // Type '{Tab}' in 'SecondaryIP3' text box
            Keyboard.SendKeys(uISecondaryIP3Edit, this.EditDeviceDetailsParams.UISecondaryIP3EditSendKeys, ModifierKeys.None);

            // Type '10' in 'SecondaryIP4' text box
            uISecondaryIP4Edit.Text = this.EditDeviceDetailsParams.UISecondaryIP4EditText;

            // Type '{Tab}' in 'SecondaryIP4' text box
            Keyboard.SendKeys(uISecondaryIP4Edit, this.EditDeviceDetailsParams.UISecondaryIP4EditSendKeys, ModifierKeys.None);

            // Type '1000' in 'Secondary port' text box
            uISecondaryportEdit.Text = this.EditDeviceDetailsParams.UISecondaryportEditText;

            // Click 'Save' button
            Mouse.Click(uISaveButton, new Point(24, 12));
        }
        
        /// <summary>
        /// ViewDeviceDetails
        /// </summary>
        public void ViewDeviceDetails()
        {
            #region Variable Declarations
            HtmlHyperlink uIMeterGroupsHyperlink = this.UIBlankPageInternetExpWindow.UIWelcomeRationalCityDocument.UIMenuCustom.UIMeterGroupsHyperlink;
            HtmlHyperlink uIMetersHyperlink3 = this.UIMetergroupsInternetEWindow.UIMetergroupsDocument.UIGridPane3.UIMetersHyperlink3;
            HtmlHyperlink uIDetailsHyperlink = this.UIWelcomeRationalCityIWindow5.UIMetersassociatedwithDocument.UIGridPane.UIDetailsHyperlink;
            HtmlHyperlink uIMetersHyperlink = this.UIWelcomeRationalCityIWindow7.UIDetailsofmeterDocument.UIMainPane.UIMetersHyperlink;
            #endregion

            // Click 'Meter Groups' link
            Mouse.Click(uIMeterGroupsHyperlink, new Point(98, 22));

            // Click 'Meters' link
            Mouse.Click(uIMetersHyperlink3, new Point(33, 11));

            // Click 'Details' link
            Mouse.Click(uIDetailsHyperlink, new Point(38, 14));

            // Click 'Meters' link
            Mouse.Click(uIMetersHyperlink, new Point(34, 12));
        }
        
        /// <summary>
        /// AddAllDeviceAttrToCollectList
        /// </summary>
        public void AddAllDeviceAttrToCollectList()
        {
            #region Variable Declarations
            HtmlHyperlink uIMeterGroupsHyperlink = this.UIBlankPageInternetExpWindow.UIWelcomeRationalCityDocument.UIMenuCustom.UIMeterGroupsHyperlink;
            HtmlHyperlink uIMetersHyperlink3 = this.UIMetergroupsInternetEWindow.UIMetergroupsDocument.UIGridPane3.UIMetersHyperlink3;
            HtmlHyperlink uIAcquisitionHyperlink = this.UIWelcomeRationalCityIWindow5.UIMetersassociatedwithDocument.UIGridPane.UIAcquisitionHyperlink;
            HtmlInputButton uIAddAllButton = this.UIWelcomeRationalCityIWindow8.UICOSEMlogicaldevicesoDocument.UIMainPane.UIAddAllButton;
            HtmlHyperlink uIDevicesHyperlink = this.UIWelcomeRationalCityIWindow8.UICOSEMlogicaldevicesoDocument.UIMainPane.UIDevicesHyperlink;
            #endregion

            // Click 'Meter Groups' link
            Mouse.Click(uIMeterGroupsHyperlink, new Point(83, 21));

            // Click 'Meters' link
            Mouse.Click(uIMetersHyperlink3, new Point(16, 9));

            // Click 'Acquisition' link
            Mouse.Click(uIAcquisitionHyperlink, new Point(24, 10));

            // Click 'Add All' button
            Mouse.Click(uIAddAllButton, new Point(30, 12));

            // Click 'Devices' link
            Mouse.Click(uIDevicesHyperlink, new Point(44, 11));
        }
        
        /// <summary>
        /// ViewDeviceAttrState
        /// </summary>
        public void ViewDeviceAttrState()
        {
            #region Variable Declarations
            HtmlHyperlink uIMeterGroupsHyperlink = this.UIBlankPageInternetExpWindow.UIWelcomeRationalCityDocument.UIMenuCustom.UIMeterGroupsHyperlink;
            HtmlHyperlink uIMetersHyperlink3 = this.UIMetergroupsInternetEWindow.UIMetergroupsDocument.UIGridPane3.UIMetersHyperlink3;
            HtmlHyperlink uIStateHyperlink = this.UIWelcomeRationalCityIWindow5.UIMetersassociatedwithDocument.UIGridPane.UIStateHyperlink;
            HtmlHyperlink uIDevicesHyperlink = this.UIWelcomeRationalCityIWindow9.UIAttributesassociatedDocument.UIMainPane.UIDevicesHyperlink;
            #endregion

            // Click 'Meter Groups' link
            Mouse.Click(uIMeterGroupsHyperlink, new Point(90, 19));

            // Click 'Meters' link
            Mouse.Click(uIMetersHyperlink3, new Point(31, 12));

            // Click 'State' link
            Mouse.Click(uIStateHyperlink, new Point(25, 11));

            // Click 'Devices' link
            Mouse.Click(uIDevicesHyperlink, new Point(43, 15));
        }
        
        /// <summary>
        /// CreateAccount - Use 'CreateAccountParams' to pass parameters into this method.
        /// </summary>
        public void CreateAccount()
        {
            #region Variable Declarations
            HtmlHyperlink uILogOnHyperlink = this.UIBlankPageInternetExpWindow.UIWelcomeRationalCityDocument.UIMenuCustom.UILogOnHyperlink;
            HtmlEdit uIUsernameEdit = this.UIBlankPageInternetExpWindow.UILogOnDocument.UIUsernameEdit;
            HtmlEdit uIPasswordEdit = this.UIBlankPageInternetExpWindow.UILogOnDocument.UIPasswordEdit;
            HtmlHyperlink uIRegisterHyperlink = this.UIBlankPageInternetExpWindow.UILogOnDocument.UIMainPane.UIRegisterHyperlink;
            HtmlEdit uIUsernameEdit1 = this.UIBlankPageInternetExpWindow12.UIRegisterDocument.UIUsernameEdit;
            HtmlEdit uIEmailaddressEdit = this.UIBlankPageInternetExpWindow12.UIRegisterDocument.UIEmailaddressEdit;
            HtmlEdit uIPasswordEdit1 = this.UIBlankPageInternetExpWindow12.UIRegisterDocument.UIPasswordEdit;
            HtmlEdit uIConfirmpasswordEdit = this.UIBlankPageInternetExpWindow12.UIRegisterDocument.UIConfirmpasswordEdit;
            HtmlEdit uISecretquestionEdit = this.UIBlankPageInternetExpWindow12.UIRegisterDocument.UISecretquestionEdit;
            HtmlEdit uIAnswerEdit = this.UIBlankPageInternetExpWindow12.UIRegisterDocument.UIAnswerEdit;
            HtmlInputButton uIRegisterButton = this.UIBlankPageInternetExpWindow12.UIRegisterDocument.UIMainPane.UIRegisterButton;
            HtmlHyperlink uILogOffHyperlink = this.UIBlankPageInternetExpWindow.UIWelcomeRationalCityDocument.UIMenuCustom.UILogOffHyperlink;
            WinButton uIЗакрытьButton = this.UIBlankPageInternetExpWindow.UIWelcomeRationalCityITitleBar.UIЗакрытьButton;
            #endregion

            // Go to web page 'http://localhost:2374/' using new browser instance
            this.UIBlankPageInternetExpWindow13.LaunchUrl(new System.Uri(this.CreateAccountParams.UIBlankPageInternetExpWindow13Url));

            // Click 'Log On' link
            Mouse.Click(uILogOnHyperlink, new Point(35, 26));

            // Type 'dmorozov' in 'User name' text box
            uIUsernameEdit.Text = this.CreateAccountParams.UIUsernameEditText;

            // Type '{Tab}' in 'User name' text box
            Keyboard.SendKeys(uIUsernameEdit, this.CreateAccountParams.UIUsernameEditSendKeys, ModifierKeys.None);

            // Type '********' in 'Password' text box
            uIPasswordEdit.Password = this.CreateAccountParams.UIPasswordEditPassword;

            // Click 'Register' link
            Mouse.Click(uIRegisterHyperlink, new Point(18, 14));

            // Type 'dmorozov' in 'User name' text box
            uIUsernameEdit1.Text = this.CreateAccountParams.UIUsernameEditText1;

            // Type '{Tab}' in 'User name' text box
            Keyboard.SendKeys(uIUsernameEdit1, this.CreateAccountParams.UIUsernameEditSendKeys1, ModifierKeys.None);

            // Type 'dvmorozov@mail.ru' in 'Email address' text box
            uIEmailaddressEdit.Text = this.CreateAccountParams.UIEmailaddressEditText;

            // Type '{Tab}' in 'Email address' text box
            Keyboard.SendKeys(uIEmailaddressEdit, this.CreateAccountParams.UIEmailaddressEditSendKeys, ModifierKeys.None);

            // Type '********' in 'Password' text box
            uIPasswordEdit1.Password = this.CreateAccountParams.UIPasswordEditPassword1;

            // Type '{Tab}' in 'Password' text box
            Keyboard.SendKeys(uIPasswordEdit1, this.CreateAccountParams.UIPasswordEditSendKeys, ModifierKeys.None);

            // Type '********' in 'Confirm password' text box
            uIConfirmpasswordEdit.Password = this.CreateAccountParams.UIConfirmpasswordEditPassword;

            // Type '{Tab}' in 'Confirm password' text box
            Keyboard.SendKeys(uIConfirmpasswordEdit, this.CreateAccountParams.UIConfirmpasswordEditSendKeys, ModifierKeys.None);

            // Type 'none' in 'Secret question' text box
            uISecretquestionEdit.Text = this.CreateAccountParams.UISecretquestionEditText;

            // Type '{Tab}' in 'Secret question' text box
            Keyboard.SendKeys(uISecretquestionEdit, this.CreateAccountParams.UISecretquestionEditSendKeys, ModifierKeys.None);

            // Type 'none' in 'Answer' text box
            uIAnswerEdit.Text = this.CreateAccountParams.UIAnswerEditText;

            // Click 'Register' button
            Mouse.Click(uIRegisterButton, new Point(16, 12));

            // Click 'Log Off' link
            Mouse.Click(uILogOffHyperlink, new Point(33, 24));

            // Click 'Закрыть' button
            Mouse.Click(uIЗакрытьButton, new Point(5, 5));
        }
        
        #region Properties
        public virtual LogOnLogOffParams LogOnLogOffParams
        {
            get
            {
                if ((this.mLogOnLogOffParams == null))
                {
                    this.mLogOnLogOffParams = new LogOnLogOffParams();
                }
                return this.mLogOnLogOffParams;
            }
        }
        
        public virtual MozillaOpenParams MozillaOpenParams
        {
            get
            {
                if ((this.mMozillaOpenParams == null))
                {
                    this.mMozillaOpenParams = new MozillaOpenParams();
                }
                return this.mMozillaOpenParams;
            }
        }
        
        public virtual TypeNameParams TypeNameParams
        {
            get
            {
                if ((this.mTypeNameParams == null))
                {
                    this.mTypeNameParams = new TypeNameParams();
                }
                return this.mTypeNameParams;
            }
        }
        
        public virtual LogOnParams LogOnParams
        {
            get
            {
                if ((this.mLogOnParams == null))
                {
                    this.mLogOnParams = new LogOnParams();
                }
                return this.mLogOnParams;
            }
        }
        
        public virtual AddMetersForIPsParams AddMetersForIPsParams
        {
            get
            {
                if ((this.mAddMetersForIPsParams == null))
                {
                    this.mAddMetersForIPsParams = new AddMetersForIPsParams();
                }
                return this.mAddMetersForIPsParams;
            }
        }
        
        public virtual DeleteMetersForIPsParams DeleteMetersForIPsParams
        {
            get
            {
                if ((this.mDeleteMetersForIPsParams == null))
                {
                    this.mDeleteMetersForIPsParams = new DeleteMetersForIPsParams();
                }
                return this.mDeleteMetersForIPsParams;
            }
        }
        
        public virtual AddMetersForBuildingsParams AddMetersForBuildingsParams
        {
            get
            {
                if ((this.mAddMetersForBuildingsParams == null))
                {
                    this.mAddMetersForBuildingsParams = new AddMetersForBuildingsParams();
                }
                return this.mAddMetersForBuildingsParams;
            }
        }
        
        public virtual DeleteMetersForBuildingsParams DeleteMetersForBuildingsParams
        {
            get
            {
                if ((this.mDeleteMetersForBuildingsParams == null))
                {
                    this.mDeleteMetersForBuildingsParams = new DeleteMetersForBuildingsParams();
                }
                return this.mDeleteMetersForBuildingsParams;
            }
        }
        
        public virtual DeleteSingleMeterParams DeleteSingleMeterParams
        {
            get
            {
                if ((this.mDeleteSingleMeterParams == null))
                {
                    this.mDeleteSingleMeterParams = new DeleteSingleMeterParams();
                }
                return this.mDeleteSingleMeterParams;
            }
        }
        
        public virtual AddSingleMeterParams AddSingleMeterParams
        {
            get
            {
                if ((this.mAddSingleMeterParams == null))
                {
                    this.mAddSingleMeterParams = new AddSingleMeterParams();
                }
                return this.mAddSingleMeterParams;
            }
        }
        
        public virtual EditGroupPropertiesParams EditGroupPropertiesParams
        {
            get
            {
                if ((this.mEditGroupPropertiesParams == null))
                {
                    this.mEditGroupPropertiesParams = new EditGroupPropertiesParams();
                }
                return this.mEditGroupPropertiesParams;
            }
        }
        
        public virtual ViewGroupDetailsAndEditParams ViewGroupDetailsAndEditParams
        {
            get
            {
                if ((this.mViewGroupDetailsAndEditParams == null))
                {
                    this.mViewGroupDetailsAndEditParams = new ViewGroupDetailsAndEditParams();
                }
                return this.mViewGroupDetailsAndEditParams;
            }
        }
        
        public virtual ViewDeviceListAndAddSingleParams ViewDeviceListAndAddSingleParams
        {
            get
            {
                if ((this.mViewDeviceListAndAddSingleParams == null))
                {
                    this.mViewDeviceListAndAddSingleParams = new ViewDeviceListAndAddSingleParams();
                }
                return this.mViewDeviceListAndAddSingleParams;
            }
        }
        
        public virtual EditDeviceDetailsParams EditDeviceDetailsParams
        {
            get
            {
                if ((this.mEditDeviceDetailsParams == null))
                {
                    this.mEditDeviceDetailsParams = new EditDeviceDetailsParams();
                }
                return this.mEditDeviceDetailsParams;
            }
        }
        
        public virtual CreateAccountParams CreateAccountParams
        {
            get
            {
                if ((this.mCreateAccountParams == null))
                {
                    this.mCreateAccountParams = new CreateAccountParams();
                }
                return this.mCreateAccountParams;
            }
        }
        
        public UIMozillaFirefoxWindow UIMozillaFirefoxWindow
        {
            get
            {
                if ((this.mUIMozillaFirefoxWindow == null))
                {
                    this.mUIMozillaFirefoxWindow = new UIMozillaFirefoxWindow();
                }
                return this.mUIMozillaFirefoxWindow;
            }
        }
        
        public UIMetergroupsInternetEWindow UIMetergroupsInternetEWindow
        {
            get
            {
                if ((this.mUIMetergroupsInternetEWindow == null))
                {
                    this.mUIMetergroupsInternetEWindow = new UIMetergroupsInternetEWindow();
                }
                return this.mUIMetergroupsInternetEWindow;
            }
        }
        
        public UIBlankPageInternetExpWindow UIBlankPageInternetExpWindow
        {
            get
            {
                if ((this.mUIBlankPageInternetExpWindow == null))
                {
                    this.mUIBlankPageInternetExpWindow = new UIBlankPageInternetExpWindow();
                }
                return this.mUIBlankPageInternetExpWindow;
            }
        }
        
        public UIBlankPageInternetExpWindow1 UIBlankPageInternetExpWindow1
        {
            get
            {
                if ((this.mUIBlankPageInternetExpWindow1 == null))
                {
                    this.mUIBlankPageInternetExpWindow1 = new UIBlankPageInternetExpWindow1();
                }
                return this.mUIBlankPageInternetExpWindow1;
            }
        }
        
        public UIBlankPageInternetExpWindow2 UIBlankPageInternetExpWindow2
        {
            get
            {
                if ((this.mUIBlankPageInternetExpWindow2 == null))
                {
                    this.mUIBlankPageInternetExpWindow2 = new UIBlankPageInternetExpWindow2();
                }
                return this.mUIBlankPageInternetExpWindow2;
            }
        }
        
        public UIBlankPageInternetExpWindow3 UIBlankPageInternetExpWindow3
        {
            get
            {
                if ((this.mUIBlankPageInternetExpWindow3 == null))
                {
                    this.mUIBlankPageInternetExpWindow3 = new UIBlankPageInternetExpWindow3();
                }
                return this.mUIBlankPageInternetExpWindow3;
            }
        }
        
        public UIBlankPageInternetExpWindow4 UIBlankPageInternetExpWindow4
        {
            get
            {
                if ((this.mUIBlankPageInternetExpWindow4 == null))
                {
                    this.mUIBlankPageInternetExpWindow4 = new UIBlankPageInternetExpWindow4();
                }
                return this.mUIBlankPageInternetExpWindow4;
            }
        }
        
        public UIBlankPageInternetExpWindow5 UIBlankPageInternetExpWindow5
        {
            get
            {
                if ((this.mUIBlankPageInternetExpWindow5 == null))
                {
                    this.mUIBlankPageInternetExpWindow5 = new UIBlankPageInternetExpWindow5();
                }
                return this.mUIBlankPageInternetExpWindow5;
            }
        }
        
        public UIBlankPageInternetExpWindow6 UIBlankPageInternetExpWindow6
        {
            get
            {
                if ((this.mUIBlankPageInternetExpWindow6 == null))
                {
                    this.mUIBlankPageInternetExpWindow6 = new UIBlankPageInternetExpWindow6();
                }
                return this.mUIBlankPageInternetExpWindow6;
            }
        }
        
        public UIBlankPageInternetExpWindow7 UIBlankPageInternetExpWindow7
        {
            get
            {
                if ((this.mUIBlankPageInternetExpWindow7 == null))
                {
                    this.mUIBlankPageInternetExpWindow7 = new UIBlankPageInternetExpWindow7();
                }
                return this.mUIBlankPageInternetExpWindow7;
            }
        }
        
        public UIMetergroupsInternetEWindow1 UIMetergroupsInternetEWindow1
        {
            get
            {
                if ((this.mUIMetergroupsInternetEWindow1 == null))
                {
                    this.mUIMetergroupsInternetEWindow1 = new UIMetergroupsInternetEWindow1();
                }
                return this.mUIMetergroupsInternetEWindow1;
            }
        }
        
        public UIMetergroupsInternetEWindow2 UIMetergroupsInternetEWindow2
        {
            get
            {
                if ((this.mUIMetergroupsInternetEWindow2 == null))
                {
                    this.mUIMetergroupsInternetEWindow2 = new UIMetergroupsInternetEWindow2();
                }
                return this.mUIMetergroupsInternetEWindow2;
            }
        }
        
        public UIMetergroupsInternetEWindow3 UIMetergroupsInternetEWindow3
        {
            get
            {
                if ((this.mUIMetergroupsInternetEWindow3 == null))
                {
                    this.mUIMetergroupsInternetEWindow3 = new UIMetergroupsInternetEWindow3();
                }
                return this.mUIMetergroupsInternetEWindow3;
            }
        }
        
        public UIBlankPageInternetExpWindow8 UIBlankPageInternetExpWindow8
        {
            get
            {
                if ((this.mUIBlankPageInternetExpWindow8 == null))
                {
                    this.mUIBlankPageInternetExpWindow8 = new UIBlankPageInternetExpWindow8();
                }
                return this.mUIBlankPageInternetExpWindow8;
            }
        }
        
        public UIBlankPageInternetExpWindow9 UIBlankPageInternetExpWindow9
        {
            get
            {
                if ((this.mUIBlankPageInternetExpWindow9 == null))
                {
                    this.mUIBlankPageInternetExpWindow9 = new UIBlankPageInternetExpWindow9();
                }
                return this.mUIBlankPageInternetExpWindow9;
            }
        }
        
        public UIMetergroupsInternetEWindow4 UIMetergroupsInternetEWindow4
        {
            get
            {
                if ((this.mUIMetergroupsInternetEWindow4 == null))
                {
                    this.mUIMetergroupsInternetEWindow4 = new UIMetergroupsInternetEWindow4();
                }
                return this.mUIMetergroupsInternetEWindow4;
            }
        }
        
        public UIBlankPageInternetExpWindow10 UIBlankPageInternetExpWindow10
        {
            get
            {
                if ((this.mUIBlankPageInternetExpWindow10 == null))
                {
                    this.mUIBlankPageInternetExpWindow10 = new UIBlankPageInternetExpWindow10();
                }
                return this.mUIBlankPageInternetExpWindow10;
            }
        }
        
        public UIWelcomeRationalCityIWindow UIWelcomeRationalCityIWindow
        {
            get
            {
                if ((this.mUIWelcomeRationalCityIWindow == null))
                {
                    this.mUIWelcomeRationalCityIWindow = new UIWelcomeRationalCityIWindow();
                }
                return this.mUIWelcomeRationalCityIWindow;
            }
        }
        
        public UIWelcomeRationalCityIWindow1 UIWelcomeRationalCityIWindow1
        {
            get
            {
                if ((this.mUIWelcomeRationalCityIWindow1 == null))
                {
                    this.mUIWelcomeRationalCityIWindow1 = new UIWelcomeRationalCityIWindow1();
                }
                return this.mUIWelcomeRationalCityIWindow1;
            }
        }
        
        public UIWelcomeRationalCityIWindow2 UIWelcomeRationalCityIWindow2
        {
            get
            {
                if ((this.mUIWelcomeRationalCityIWindow2 == null))
                {
                    this.mUIWelcomeRationalCityIWindow2 = new UIWelcomeRationalCityIWindow2();
                }
                return this.mUIWelcomeRationalCityIWindow2;
            }
        }
        
        public UIWelcomeRationalCityIWindow3 UIWelcomeRationalCityIWindow3
        {
            get
            {
                if ((this.mUIWelcomeRationalCityIWindow3 == null))
                {
                    this.mUIWelcomeRationalCityIWindow3 = new UIWelcomeRationalCityIWindow3();
                }
                return this.mUIWelcomeRationalCityIWindow3;
            }
        }
        
        public UIWelcomeRationalCityIWindow4 UIWelcomeRationalCityIWindow4
        {
            get
            {
                if ((this.mUIWelcomeRationalCityIWindow4 == null))
                {
                    this.mUIWelcomeRationalCityIWindow4 = new UIWelcomeRationalCityIWindow4();
                }
                return this.mUIWelcomeRationalCityIWindow4;
            }
        }
        
        public UIWelcomeRationalCityIWindow5 UIWelcomeRationalCityIWindow5
        {
            get
            {
                if ((this.mUIWelcomeRationalCityIWindow5 == null))
                {
                    this.mUIWelcomeRationalCityIWindow5 = new UIWelcomeRationalCityIWindow5();
                }
                return this.mUIWelcomeRationalCityIWindow5;
            }
        }
        
        public UIWelcomeRationalCityIWindow6 UIWelcomeRationalCityIWindow6
        {
            get
            {
                if ((this.mUIWelcomeRationalCityIWindow6 == null))
                {
                    this.mUIWelcomeRationalCityIWindow6 = new UIWelcomeRationalCityIWindow6();
                }
                return this.mUIWelcomeRationalCityIWindow6;
            }
        }
        
        public UIWelcomeRationalCityIWindow7 UIWelcomeRationalCityIWindow7
        {
            get
            {
                if ((this.mUIWelcomeRationalCityIWindow7 == null))
                {
                    this.mUIWelcomeRationalCityIWindow7 = new UIWelcomeRationalCityIWindow7();
                }
                return this.mUIWelcomeRationalCityIWindow7;
            }
        }
        
        public UIWelcomeRationalCityIWindow8 UIWelcomeRationalCityIWindow8
        {
            get
            {
                if ((this.mUIWelcomeRationalCityIWindow8 == null))
                {
                    this.mUIWelcomeRationalCityIWindow8 = new UIWelcomeRationalCityIWindow8();
                }
                return this.mUIWelcomeRationalCityIWindow8;
            }
        }
        
        public UIWelcomeRationalCityIWindow9 UIWelcomeRationalCityIWindow9
        {
            get
            {
                if ((this.mUIWelcomeRationalCityIWindow9 == null))
                {
                    this.mUIWelcomeRationalCityIWindow9 = new UIWelcomeRationalCityIWindow9();
                }
                return this.mUIWelcomeRationalCityIWindow9;
            }
        }
        
        public UIBlankPageInternetExpWindow11 UIBlankPageInternetExpWindow11
        {
            get
            {
                if ((this.mUIBlankPageInternetExpWindow11 == null))
                {
                    this.mUIBlankPageInternetExpWindow11 = new UIBlankPageInternetExpWindow11();
                }
                return this.mUIBlankPageInternetExpWindow11;
            }
        }
        
        public UIBlankPageInternetExpWindow12 UIBlankPageInternetExpWindow12
        {
            get
            {
                if ((this.mUIBlankPageInternetExpWindow12 == null))
                {
                    this.mUIBlankPageInternetExpWindow12 = new UIBlankPageInternetExpWindow12();
                }
                return this.mUIBlankPageInternetExpWindow12;
            }
        }
        
        public UIBlankPageInternetExpWindow13 UIBlankPageInternetExpWindow13
        {
            get
            {
                if ((this.mUIBlankPageInternetExpWindow13 == null))
                {
                    this.mUIBlankPageInternetExpWindow13 = new UIBlankPageInternetExpWindow13();
                }
                return this.mUIBlankPageInternetExpWindow13;
            }
        }
        #endregion
        
        #region Fields
        private LogOnLogOffParams mLogOnLogOffParams;
        
        private MozillaOpenParams mMozillaOpenParams;
        
        private TypeNameParams mTypeNameParams;
        
        private LogOnParams mLogOnParams;
        
        private AddMetersForIPsParams mAddMetersForIPsParams;
        
        private DeleteMetersForIPsParams mDeleteMetersForIPsParams;
        
        private AddMetersForBuildingsParams mAddMetersForBuildingsParams;
        
        private DeleteMetersForBuildingsParams mDeleteMetersForBuildingsParams;
        
        private DeleteSingleMeterParams mDeleteSingleMeterParams;
        
        private AddSingleMeterParams mAddSingleMeterParams;
        
        private EditGroupPropertiesParams mEditGroupPropertiesParams;
        
        private ViewGroupDetailsAndEditParams mViewGroupDetailsAndEditParams;
        
        private ViewDeviceListAndAddSingleParams mViewDeviceListAndAddSingleParams;
        
        private EditDeviceDetailsParams mEditDeviceDetailsParams;
        
        private CreateAccountParams mCreateAccountParams;
        
        private UIMozillaFirefoxWindow mUIMozillaFirefoxWindow;
        
        private UIMetergroupsInternetEWindow mUIMetergroupsInternetEWindow;
        
        private UIBlankPageInternetExpWindow mUIBlankPageInternetExpWindow;
        
        private UIBlankPageInternetExpWindow1 mUIBlankPageInternetExpWindow1;
        
        private UIBlankPageInternetExpWindow2 mUIBlankPageInternetExpWindow2;
        
        private UIBlankPageInternetExpWindow3 mUIBlankPageInternetExpWindow3;
        
        private UIBlankPageInternetExpWindow4 mUIBlankPageInternetExpWindow4;
        
        private UIBlankPageInternetExpWindow5 mUIBlankPageInternetExpWindow5;
        
        private UIBlankPageInternetExpWindow6 mUIBlankPageInternetExpWindow6;
        
        private UIBlankPageInternetExpWindow7 mUIBlankPageInternetExpWindow7;
        
        private UIMetergroupsInternetEWindow1 mUIMetergroupsInternetEWindow1;
        
        private UIMetergroupsInternetEWindow2 mUIMetergroupsInternetEWindow2;
        
        private UIMetergroupsInternetEWindow3 mUIMetergroupsInternetEWindow3;
        
        private UIBlankPageInternetExpWindow8 mUIBlankPageInternetExpWindow8;
        
        private UIBlankPageInternetExpWindow9 mUIBlankPageInternetExpWindow9;
        
        private UIMetergroupsInternetEWindow4 mUIMetergroupsInternetEWindow4;
        
        private UIBlankPageInternetExpWindow10 mUIBlankPageInternetExpWindow10;
        
        private UIWelcomeRationalCityIWindow mUIWelcomeRationalCityIWindow;
        
        private UIWelcomeRationalCityIWindow1 mUIWelcomeRationalCityIWindow1;
        
        private UIWelcomeRationalCityIWindow2 mUIWelcomeRationalCityIWindow2;
        
        private UIWelcomeRationalCityIWindow3 mUIWelcomeRationalCityIWindow3;
        
        private UIWelcomeRationalCityIWindow4 mUIWelcomeRationalCityIWindow4;
        
        private UIWelcomeRationalCityIWindow5 mUIWelcomeRationalCityIWindow5;
        
        private UIWelcomeRationalCityIWindow6 mUIWelcomeRationalCityIWindow6;
        
        private UIWelcomeRationalCityIWindow7 mUIWelcomeRationalCityIWindow7;
        
        private UIWelcomeRationalCityIWindow8 mUIWelcomeRationalCityIWindow8;
        
        private UIWelcomeRationalCityIWindow9 mUIWelcomeRationalCityIWindow9;
        
        private UIBlankPageInternetExpWindow11 mUIBlankPageInternetExpWindow11;
        
        private UIBlankPageInternetExpWindow12 mUIBlankPageInternetExpWindow12;
        
        private UIBlankPageInternetExpWindow13 mUIBlankPageInternetExpWindow13;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'LogOnLogOff'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class LogOnLogOffParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%ProgramFiles%\Mozilla Firefox\firefox.exe'
        /// </summary>
        public string UIMozillaFirefoxWindowExePath = "C:\\Program Files\\Mozilla Firefox\\firefox.exe";
        
        /// <summary>
        /// Launch '%ProgramFiles%\Mozilla Firefox\firefox.exe'
        /// </summary>
        public string UIMozillaFirefoxWindowAlternateExePath = "%ProgramFiles%\\Mozilla Firefox\\firefox.exe";
        
        /// <summary>
        /// Select 'http://localhost:2374' in 'Перейти на веб-сайт' combo box
        /// </summary>
        public string UIПерейтинавебсайтComboBoxEditableItem = "http://localhost:2374";
        
        /// <summary>
        /// Type '{Enter}' in 'Перейти на веб-сайт' text box
        /// </summary>
        public string UIПерейтинавебсайтEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type 'dmorozov' in 'User name' text box
        /// </summary>
        public string UIUsernameEditText = "dmorozov";
        
        /// <summary>
        /// Type '{Tab}' in 'User name' text box
        /// </summary>
        public string UIUsernameEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '********' in 'Password' text box
        /// </summary>
        public string UIPasswordEditSendKeys = "a7qi52yVu7nrukwh8ZSBq6cEM+up+Y2AWGGJQsHOVnA=";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'MozillaOpen'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class MozillaOpenParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%ProgramFiles%\Mozilla Firefox\firefox.exe'
        /// </summary>
        public string UIMozillaFirefoxWindowExePath = "C:\\Program Files\\Mozilla Firefox\\firefox.exe";
        
        /// <summary>
        /// Launch '%ProgramFiles%\Mozilla Firefox\firefox.exe'
        /// </summary>
        public string UIMozillaFirefoxWindowAlternateExePath = "%ProgramFiles%\\Mozilla Firefox\\firefox.exe";
        
        /// <summary>
        /// Select 'http://localhost:' in 'Перейти на веб-сайт' combo box
        /// </summary>
        public string UIПерейтинавебсайтComboBoxEditableItem = "http://localhost:";
        
        /// <summary>
        /// Select 'http://localhost:2374' in 'Перейти на веб-сайт' combo box
        /// </summary>
        public string UIПерейтинавебсайтComboBoxEditableItem1 = "http://localhost:2374";
        
        /// <summary>
        /// Type '{Enter}' in 'Перейти на веб-сайт' text box
        /// </summary>
        public string UIПерейтинавебсайтEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TypeName'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class TypeNameParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'name' in 'User name' text box
        /// </summary>
        public string UIUsernameEditText = "name";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'LogOn'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class LogOnParams
    {
        
        #region Fields
        /// <summary>
        /// Go to web page 'http://localhost:2374/' using new browser instance
        /// </summary>
        public string UIBlankPageInternetExpWindow10Url = "http://localhost:2374/";
        
        /// <summary>
        /// Type 'd' in 'Log On' document
        /// </summary>
        public string UILogOnDocumentSendKeys = "d";
        
        /// <summary>
        /// Type 'dmorozov' in 'User name' text box
        /// </summary>
        public string UIUsernameEditText = "dmorozov";
        
        /// <summary>
        /// Type '{Tab}' in 'User name' text box
        /// </summary>
        public string UIUsernameEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '********' in 'Password' text box
        /// </summary>
        public string UIPasswordEditPassword = "lhJS4M1L4rlLtDMd0AqMCHkeBD8J/1JK";
        
        /// <summary>
        /// Type '{Enter}' in 'Password' text box
        /// </summary>
        public string UIPasswordEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddMetersForIPs'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class AddMetersForIPsParams
    {
        
        #region Fields
        /// <summary>
        /// Go to web page 'http://localhost:2374/' using new browser instance
        /// </summary>
        public string UIBlankPageInternetExpWindow8Url = "http://localhost:2374/";
        
        /// <summary>
        /// Type 'dmorozov' in 'User name' text box
        /// </summary>
        public string UIUsernameEditText = "dmorozov";
        
        /// <summary>
        /// Type '{Tab}' in 'User name' text box
        /// </summary>
        public string UIUsernameEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '********' in 'Password' text box
        /// </summary>
        public string UIPasswordEditPassword = "lhJS4M1L4rlLtDMd0AqMCHkeBD8J/1JK";
        
        /// <summary>
        /// Type '{Enter}' in 'Password' text box
        /// </summary>
        public string UIPasswordEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type 'ips' in 'Group name' text box
        /// </summary>
        public string UIGroupnameEditText = "ips";
        
        /// <summary>
        /// Type '{Tab}' in 'Group name' text box
        /// </summary>
        public string UIGroupnameEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Select 'XML-data' in 'Device type' combo box
        /// </summary>
        public string UIDevicetypeComboBoxSelectedItem = "XML-data";
        
        /// <summary>
        /// Type 'ips' in 'Meter name prefix' text box
        /// </summary>
        public string UIMeternameprefixEditText = "ips";
        
        /// <summary>
        /// Type '{Tab}' in 'Meter name prefix' text box
        /// </summary>
        public string UIMeternameprefixEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '10' in 'Initial primary IP' text box
        /// </summary>
        public string UIInitialprimaryIPEditText = "10";
        
        /// <summary>
        /// Type '{Tab}' in 'Initial primary IP' text box
        /// </summary>
        public string UIInitialprimaryIPEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '0' in 'Inititial IP2' text box
        /// </summary>
        public string UIInititialIP2EditText = "0";
        
        /// <summary>
        /// Type '{Tab}' in 'Inititial IP2' text box
        /// </summary>
        public string UIInititialIP2EditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '0' in 'Inititial IP3' text box
        /// </summary>
        public string UIInititialIP3EditText = "0";
        
        /// <summary>
        /// Type '{Tab}' in 'Inititial IP3' text box
        /// </summary>
        public string UIInititialIP3EditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '1' in 'Inititial IP4' text box
        /// </summary>
        public string UIInititialIP4EditText = "1";
        
        /// <summary>
        /// Type '{Tab}' in 'Inititial IP4' text box
        /// </summary>
        public string UIInititialIP4EditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '10' in 'Final primary IP' text box
        /// </summary>
        public string UIFinalprimaryIPEditText = "10";
        
        /// <summary>
        /// Type '{Tab}' in 'Final primary IP' text box
        /// </summary>
        public string UIFinalprimaryIPEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '00' in 'Final IP2' text box
        /// </summary>
        public string UIFinalIP2EditText = "00";
        
        /// <summary>
        /// Type '{Tab}' in 'Final IP2' text box
        /// </summary>
        public string UIFinalIP2EditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '0' in 'Final IP3' text box
        /// </summary>
        public string UIFinalIP3EditText = "0";
        
        /// <summary>
        /// Type '{Tab}' in 'Final IP3' text box
        /// </summary>
        public string UIFinalIP3EditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '10' in 'Final IP4' text box
        /// </summary>
        public string UIFinalIP4EditText = "10";
        
        /// <summary>
        /// Type '{Tab}' in 'Final IP4' text box
        /// </summary>
        public string UIFinalIP4EditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '1000' in 'Initial primary port' text box
        /// </summary>
        public string UIInitialprimaryportEditText = "1000";
        
        /// <summary>
        /// Type '{Tab}' in 'Initial primary port' text box
        /// </summary>
        public string UIInitialprimaryportEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '1002' in 'Final primary port' text box
        /// </summary>
        public string UIFinalprimaryportEditText = "1002";
        
        /// <summary>
        /// Type '{Tab}' in 'Final primary port' text box
        /// </summary>
        public string UIFinalprimaryportEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '10' in 'Initial secondary IP' text box
        /// </summary>
        public string UIInitialsecondaryIPEditText = "10";
        
        /// <summary>
        /// Type '{Tab}' in 'Initial secondary IP' text box
        /// </summary>
        public string UIInitialsecondaryIPEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '0' in 'Inititial secondary IP2' text box
        /// </summary>
        public string UIInititialsecondaryIPEditText = "0";
        
        /// <summary>
        /// Type '{Tab}' in 'Inititial secondary IP2' text box
        /// </summary>
        public string UIInititialsecondaryIPEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '00' in 'Inititial secondary IP3' text box
        /// </summary>
        public string UIInititialsecondaryIPEdit1Text = "00";
        
        /// <summary>
        /// Type '{Tab}' in 'Inititial secondary IP3' text box
        /// </summary>
        public string UIInititialsecondaryIPEdit1SendKeys = "{Tab}";
        
        /// <summary>
        /// Type '0' in 'Inititial secondary IP4' text box
        /// </summary>
        public string UIInititialsecondaryIPEdit2Text = "0";
        
        /// <summary>
        /// Type '{Tab}' in 'Inititial secondary IP4' text box
        /// </summary>
        public string UIInititialsecondaryIPEdit2SendKeys = "{Tab}";
        
        /// <summary>
        /// Type '1000' in 'Initial secondary port' text box
        /// </summary>
        public string UIInitialsecondaryportEditText = "1000";
        
        /// <summary>
        /// Type '{Tab}' in 'Initial secondary port' text box
        /// </summary>
        public string UIInitialsecondaryportEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '{Enter}' in 'Create' button
        /// </summary>
        public string UICreateButtonSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'DeleteMetersForIPs'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class DeleteMetersForIPsParams
    {
        
        #region Fields
        /// <summary>
        /// Go to web page 'http://localhost:2374/' using new browser instance
        /// </summary>
        public string UIBlankPageInternetExpWindow9Url = "http://localhost:2374/";
        
        /// <summary>
        /// Type 'dmorozov' in 'User name' text box
        /// </summary>
        public string UIUsernameEditText = "dmorozov";
        
        /// <summary>
        /// Type '{Tab}' in 'User name' text box
        /// </summary>
        public string UIUsernameEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '********' in 'Password' text box
        /// </summary>
        public string UIPasswordEditPassword = "lhJS4M1L4rlLtDMd0AqMCHkeBD8J/1JK";
        
        /// <summary>
        /// Type '{Enter}' in 'Password' text box
        /// </summary>
        public string UIPasswordEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddMetersForBuildings'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class AddMetersForBuildingsParams
    {
        
        #region Fields
        /// <summary>
        /// Go to web page 'http://localhost:2374/' using new browser instance
        /// </summary>
        public string UIBlankPageInternetExpWindow3Url = "http://localhost:2374/";
        
        /// <summary>
        /// Type 'dmorozov' in 'User name' text box
        /// </summary>
        public string UIUsernameEditText = "dmorozov";
        
        /// <summary>
        /// Type '{Tab}' in 'User name' text box
        /// </summary>
        public string UIUsernameEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '********' in 'Password' text box
        /// </summary>
        public string UIPasswordEditPassword = "lhJS4M1L4rlLtDMd0AqMCHkeBD8J/1JK";
        
        /// <summary>
        /// Type '{Enter}' in 'Password' text box
        /// </summary>
        public string UIPasswordEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type 'bld' in 'Group name' text box
        /// </summary>
        public string UIGroupnameEditText = "bld";
        
        /// <summary>
        /// Type '{Tab}' in 'Group name' text box
        /// </summary>
        public string UIGroupnameEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Select 'XML-data' in 'Device type' combo box
        /// </summary>
        public string UIDevicetypeComboBoxSelectedItem = "XML-data";
        
        /// <summary>
        /// Type 'bld' in 'Meter name prefix' text box
        /// </summary>
        public string UIMeternameprefixEditText = "bld";
        
        /// <summary>
        /// Type '{Tab}' in 'Meter name prefix' text box
        /// </summary>
        public string UIMeternameprefixEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type 'shaumyana' in 'Street' text box
        /// </summary>
        public string UIStreetEditText = "shaumyana";
        
        /// <summary>
        /// Type '{Tab}' in 'Street' text box
        /// </summary>
        public string UIStreetEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type 'yekaterinburg' in 'City' text box
        /// </summary>
        public string UICityEditText = "yekaterinburg";
        
        /// <summary>
        /// Type '{Tab}' in 'City' text box
        /// </summary>
        public string UICityEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type 'sverdlovskaya' in 'State' text box
        /// </summary>
        public string UIStateEditText = "sverdlovskaya";
        
        /// <summary>
        /// Type '{Tab}' in 'State' text box
        /// </summary>
        public string UIStateEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type 'russian federation' in 'Country' text box
        /// </summary>
        public string UICountryEditText = "russian federation";
        
        /// <summary>
        /// Type '{Tab}' in 'Country' text box
        /// </summary>
        public string UICountryEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '620102' in 'Zip code' text box
        /// </summary>
        public string UIZipcodeEditText = "620102";
        
        /// <summary>
        /// Type '{Tab}' in 'Zip code' text box
        /// </summary>
        public string UIZipcodeEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '84' in 'Initial building number' text box
        /// </summary>
        public string UIInitialbuildingnumbeEditText = "84";
        
        /// <summary>
        /// Type '{Tab}' in 'Initial building number' text box
        /// </summary>
        public string UIInitialbuildingnumbeEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '86' in 'Final building number' text box
        /// </summary>
        public string UIFinalbuildingnumberEditText = "86";
        
        /// <summary>
        /// Type '{Tab}' in 'Final building number' text box
        /// </summary>
        public string UIFinalbuildingnumberEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '1' in 'Initial apartment number' text box
        /// </summary>
        public string UIInitialapartmentnumbEditText = "1";
        
        /// <summary>
        /// Type '{Tab}' in 'Initial apartment number' text box
        /// </summary>
        public string UIInitialapartmentnumbEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '54' in 'Final apartment number' text box
        /// </summary>
        public string UIFinalapartmentnumberEditText = "54";
        
        /// <summary>
        /// Type '{Tab}' in 'Final apartment number' text box
        /// </summary>
        public string UIFinalapartmentnumberEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '10' in 'Initial primary IP (IPs will be assigned by increm...' text box
        /// </summary>
        public string UIInitialprimaryIPIPswEditText = "10";
        
        /// <summary>
        /// Type '{Tab}' in 'Initial primary IP (IPs will be assigned by increm...' text box
        /// </summary>
        public string UIInitialprimaryIPIPswEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '0' in 'Inititial IP2' text box
        /// </summary>
        public string UIInititialIP2EditText = "0";
        
        /// <summary>
        /// Type '{Tab}' in 'Inititial IP2' text box
        /// </summary>
        public string UIInititialIP2EditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '0' in 'Inititial IP3' text box
        /// </summary>
        public string UIInititialIP3EditText = "0";
        
        /// <summary>
        /// Type '{Tab}' in 'Inititial IP3' text box
        /// </summary>
        public string UIInititialIP3EditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '1' in 'Inititial IP4' text box
        /// </summary>
        public string UIInititialIP4EditText = "1";
        
        /// <summary>
        /// Type '{Tab}' in 'Inititial IP4' text box
        /// </summary>
        public string UIInititialIP4EditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '1000' in 'Initial primary port (will be the same for all met...' text box
        /// </summary>
        public string UIInitialprimaryportwiEditText = "1000";
        
        /// <summary>
        /// Type '{Tab}' in 'Initial primary port (will be the same for all met...' text box
        /// </summary>
        public string UIInitialprimaryportwiEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '10' in 'Initial secondary IP (IPs will be assigned by incr...' text box
        /// </summary>
        public string UIInitialsecondaryIPIPEditText = "10";
        
        /// <summary>
        /// Type '{Tab}' in 'Initial secondary IP (IPs will be assigned by incr...' text box
        /// </summary>
        public string UIInitialsecondaryIPIPEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '1' in 'Inititial IP2' text box
        /// </summary>
        public string UIInititialIP2Edit1Text = "1";
        
        /// <summary>
        /// Type '{Tab}' in 'Inititial IP2' text box
        /// </summary>
        public string UIInititialIP2Edit1SendKeys = "{Tab}";
        
        /// <summary>
        /// Type '1' in 'Inititial IP3' text box
        /// </summary>
        public string UIInititialIP3Edit1Text = "1";
        
        /// <summary>
        /// Type '{Tab}' in 'Inititial IP3' text box
        /// </summary>
        public string UIInititialIP3Edit1SendKeys = "{Tab}";
        
        /// <summary>
        /// Type '1' in 'Inititial IP4' text box
        /// </summary>
        public string UIInititialIP4Edit1Text = "1";
        
        /// <summary>
        /// Type '{Tab}' in 'Inititial IP4' text box
        /// </summary>
        public string UIInititialIP4Edit1SendKeys = "{Tab}";
        
        /// <summary>
        /// Type '2000' in 'Initial secondary port (will be the same for all m...' text box
        /// </summary>
        public string UIInitialsecondaryportEditText = "2000";
        
        /// <summary>
        /// Type '{Tab}' in 'Initial secondary port (will be the same for all m...' text box
        /// </summary>
        public string UIInitialsecondaryportEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '{Enter}' in 'Create' button
        /// </summary>
        public string UICreateButtonSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'DeleteMetersForBuildings'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class DeleteMetersForBuildingsParams
    {
        
        #region Fields
        /// <summary>
        /// Go to web page 'http://localhost:2374/' using new browser instance
        /// </summary>
        public string UIBlankPageInternetExpWindow4Url = "http://localhost:2374/";
        
        /// <summary>
        /// Type 'dmorozov' in 'User name' text box
        /// </summary>
        public string UIUsernameEditText = "dmorozov";
        
        /// <summary>
        /// Type '{Tab}' in 'User name' text box
        /// </summary>
        public string UIUsernameEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '********' in 'Password' text box
        /// </summary>
        public string UIPasswordEditPassword = "lhJS4M1L4rlLtDMd0AqMCHkeBD8J/1JK";
        
        /// <summary>
        /// Type '{Enter}' in 'Password' text box
        /// </summary>
        public string UIPasswordEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'DeleteSingleMeter'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class DeleteSingleMeterParams
    {
        
        #region Fields
        /// <summary>
        /// Go to web page 'http://localhost:2374/' using new browser instance
        /// </summary>
        public string UIBlankPageInternetExpWindow7Url = "http://localhost:2374/";
        
        /// <summary>
        /// Type 'dmorozov' in 'User name' text box
        /// </summary>
        public string UIUsernameEditText = "dmorozov";
        
        /// <summary>
        /// Type '{Tab}' in 'User name' text box
        /// </summary>
        public string UIUsernameEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '********' in 'Password' text box
        /// </summary>
        public string UIPasswordEditPassword = "lhJS4M1L4rlLtDMd0AqMCHkeBD8J/1JK";
        
        /// <summary>
        /// Type '{Enter}' in 'Password' text box
        /// </summary>
        public string UIPasswordEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddSingleMeter'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class AddSingleMeterParams
    {
        
        #region Fields
        /// <summary>
        /// Go to web page 'http://localhost:2374/' using new browser instance
        /// </summary>
        public string UIBlankPageInternetExpWindow6Url = "http://localhost:2374/";
        
        /// <summary>
        /// Type 'dmorozov' in 'User name' text box
        /// </summary>
        public string UIUsernameEditText = "dmorozov";
        
        /// <summary>
        /// Type '{Tab}' in 'User name' text box
        /// </summary>
        public string UIUsernameEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '********' in 'Password' text box
        /// </summary>
        public string UIPasswordEditPassword = "lhJS4M1L4rlLtDMd0AqMCHkeBD8J/1JK";
        
        /// <summary>
        /// Type '{Enter}' in 'Password' text box
        /// </summary>
        public string UIPasswordEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type 'single' in 'Group name' text box
        /// </summary>
        public string UIGroupnameEditText = "single";
        
        /// <summary>
        /// Type '{Tab}' in 'Group name' text box
        /// </summary>
        public string UIGroupnameEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Select 'XML-data' in 'Device type' combo box
        /// </summary>
        public string UIDevicetypeComboBoxSelectedItem = "XML-data";
        
        /// <summary>
        /// Type 'single' in 'Meter name prefix' text box
        /// </summary>
        public string UIMeternameprefixEditText = "single";
        
        /// <summary>
        /// Type '{Tab}' in 'Meter name prefix' text box
        /// </summary>
        public string UIMeternameprefixEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '10' in 'Initial primary IP' text box
        /// </summary>
        public string UIInitialprimaryIPEditText = "10";
        
        /// <summary>
        /// Type '{Tab}' in 'Initial primary IP' text box
        /// </summary>
        public string UIInitialprimaryIPEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '0' in 'Inititial IP2' text box
        /// </summary>
        public string UIInititialIP2EditText = "0";
        
        /// <summary>
        /// Type '{Tab}' in 'Inititial IP2' text box
        /// </summary>
        public string UIInititialIP2EditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '0' in 'Inititial IP3' text box
        /// </summary>
        public string UIInititialIP3EditText = "0";
        
        /// <summary>
        /// Type '{Tab}' in 'Inititial IP3' text box
        /// </summary>
        public string UIInititialIP3EditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '1' in 'Inititial IP4' text box
        /// </summary>
        public string UIInititialIP4EditText = "1";
        
        /// <summary>
        /// Type '{Tab}' in 'Inititial IP4' text box
        /// </summary>
        public string UIInititialIP4EditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '10' in 'Final primary IP' text box
        /// </summary>
        public string UIFinalprimaryIPEditText = "10";
        
        /// <summary>
        /// Type '{Tab}' in 'Final primary IP' text box
        /// </summary>
        public string UIFinalprimaryIPEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '0' in 'Final IP2' text box
        /// </summary>
        public string UIFinalIP2EditText = "0";
        
        /// <summary>
        /// Type '{Tab}' in 'Final IP2' text box
        /// </summary>
        public string UIFinalIP2EditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '0' in 'Final IP3' text box
        /// </summary>
        public string UIFinalIP3EditText = "0";
        
        /// <summary>
        /// Type '{Tab}' in 'Final IP3' text box
        /// </summary>
        public string UIFinalIP3EditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '1' in 'Final IP4' text box
        /// </summary>
        public string UIFinalIP4EditText = "1";
        
        /// <summary>
        /// Type '{Tab}' in 'Final IP4' text box
        /// </summary>
        public string UIFinalIP4EditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '1111' in 'Initial primary port' text box
        /// </summary>
        public string UIInitialprimaryportEditText = "1111";
        
        /// <summary>
        /// Type '{Tab}' in 'Initial primary port' text box
        /// </summary>
        public string UIInitialprimaryportEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '1111' in 'Final primary port' text box
        /// </summary>
        public string UIFinalprimaryportEditText = "1111";
        
        /// <summary>
        /// Type '{Tab}' in 'Final primary port' text box
        /// </summary>
        public string UIFinalprimaryportEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '10' in 'Initial secondary IP' text box
        /// </summary>
        public string UIInitialsecondaryIPEditText = "10";
        
        /// <summary>
        /// Type '{Tab}' in 'Initial secondary IP' text box
        /// </summary>
        public string UIInitialsecondaryIPEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '0' in 'Inititial secondary IP2' text box
        /// </summary>
        public string UIInititialsecondaryIPEditText = "0";
        
        /// <summary>
        /// Type '{Tab}' in 'Inititial secondary IP2' text box
        /// </summary>
        public string UIInititialsecondaryIPEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '0' in 'Inititial secondary IP3' text box
        /// </summary>
        public string UIInititialsecondaryIPEdit1Text = "0";
        
        /// <summary>
        /// Type '{Tab}' in 'Inititial secondary IP3' text box
        /// </summary>
        public string UIInititialsecondaryIPEdit1SendKeys = "{Tab}";
        
        /// <summary>
        /// Type '1' in 'Inititial secondary IP4' text box
        /// </summary>
        public string UIInititialsecondaryIPEdit2Text = "1";
        
        /// <summary>
        /// Type '{Tab}' in 'Inititial secondary IP4' text box
        /// </summary>
        public string UIInititialsecondaryIPEdit2SendKeys = "{Tab}";
        
        /// <summary>
        /// Type '1111' in 'Initial secondary port' text box
        /// </summary>
        public string UIInitialsecondaryportEditText = "1111";
        
        /// <summary>
        /// Type '{Tab}' in 'Initial secondary port' text box
        /// </summary>
        public string UIInitialsecondaryportEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '{Enter}' in 'Create' button
        /// </summary>
        public string UICreateButtonSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'EditGroupProperties'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class EditGroupPropertiesParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'single modified                                                                                              ' in 'Group name' text box
        /// </summary>
        public string UIGroupnameEditText = "single modified                                                                  " +
            "                            ";
        
        /// <summary>
        /// Type '{Tab}' in 'Group name' text box
        /// </summary>
        public string UIGroupnameEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Select 'XML-data' in 'Meter type' combo box
        /// </summary>
        public string UIMetertypeComboBoxSelectedItem = "XML-data";
        
        /// <summary>
        /// Select 'MinMode' radio button
        /// </summary>
        public bool UIMinModeRadioButtonSelected = true;
        
        /// <summary>
        /// Type '{Tab}' in 'MinMode' radio button
        /// </summary>
        public string UIMinModeRadioButtonSendKeys = "{Tab}";
        
        /// <summary>
        /// Select '1' in 'MinutesE' combo box
        /// </summary>
        public string UIMinutesEComboBoxSelectedItem = "1";
        
        /// <summary>
        /// Select '00' in 'MinutesG' combo box
        /// </summary>
        public string UIMinutesGComboBoxSelectedItem = "00";
        
        /// <summary>
        /// Select 'HourMode' radio button
        /// </summary>
        public bool UIHourModeRadioButtonSelected = true;
        
        /// <summary>
        /// Type '{Tab}' in 'HourMode' radio button
        /// </summary>
        public string UIHourModeRadioButtonSendKeys = "{Tab}";
        
        /// <summary>
        /// Select '3' in 'HoursE' combo box
        /// </summary>
        public string UIHoursEComboBoxSelectedItem = "3";
        
        /// <summary>
        /// Select '00' in 'HoursG' combo box
        /// </summary>
        public string UIHoursGComboBoxSelectedItem = "00";
        
        /// <summary>
        /// Select 'DayMode' radio button
        /// </summary>
        public bool UIDayModeRadioButtonSelected = true;
        
        /// <summary>
        /// Type '{Tab}' in 'DayMode' radio button
        /// </summary>
        public string UIDayModeRadioButtonSendKeys = "{Tab}";
        
        /// <summary>
        /// Select '2' in 'DaysE' combo box
        /// </summary>
        public string UIDaysEComboBoxSelectedItem = "2";
        
        /// <summary>
        /// Select '1' in 'DaysG' combo box
        /// </summary>
        public string UIDaysGComboBoxSelectedItem = "1";
        
        /// <summary>
        /// Type '{Tab}' in 'Monday' check box
        /// </summary>
        public string UIMondayCheckBoxSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '{Tab}' in 'Tuesday' check box
        /// </summary>
        public string UITuesdayCheckBoxSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '{Tab}' in 'Wednesday' check box
        /// </summary>
        public string UIWednesdayCheckBoxSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '{Tab}' in 'Thursday' check box
        /// </summary>
        public string UIThursdayCheckBoxSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '{Tab}' in 'Friday' check box
        /// </summary>
        public string UIFridayCheckBoxSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '{Tab}' in 'Saturday' check box
        /// </summary>
        public string UISaturdayCheckBoxSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '{Tab}' in 'Sunday' check box
        /// </summary>
        public string UISundayCheckBoxSendKeys = "{Tab}";
        
        /// <summary>
        /// Select 'WeekMode' radio button
        /// </summary>
        public bool UIWeekModeRadioButtonSelected = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ViewGroupDetailsAndEdit'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class ViewGroupDetailsAndEditParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'single   modified                                                                                           ' in 'Group name' text box
        /// </summary>
        public string UIGroupnameEditText = "single   modified                                                                " +
            "                           ";
        
        /// <summary>
        /// Type '{Tab}' in 'Group name' text box
        /// </summary>
        public string UIGroupnameEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Select 'XML-data' in 'Meter type' combo box
        /// </summary>
        public string UIMetertypeComboBoxSelectedItem = "XML-data";
        
        /// <summary>
        /// Type '{Tab}' in 'MinMode' radio button
        /// </summary>
        public string UIMinModeRadioButtonSendKeys = "{Tab}";
        
        /// <summary>
        /// Select '1' in 'MinutesE' combo box
        /// </summary>
        public string UIMinutesEComboBoxSelectedItem = "1";
        
        /// <summary>
        /// Select 'MinMode' radio button
        /// </summary>
        public bool UIMinModeRadioButton1Selected = true;
        
        /// <summary>
        /// Type '{Tab}' in 'MinMode' radio button
        /// </summary>
        public string UIMinModeRadioButton1SendKeys = "{Tab}";
        
        /// <summary>
        /// Select '10' in 'MinutesG' combo box
        /// </summary>
        public string UIMinutesGComboBoxSelectedItem = "10";
        
        /// <summary>
        /// Type '{Tab}' in 'HourMode' radio button
        /// </summary>
        public string UIHourModeRadioButtonSendKeys = "{Tab}";
        
        /// <summary>
        /// Select '1' in 'HoursE' combo box
        /// </summary>
        public string UIHoursEComboBoxSelectedItem = "1";
        
        /// <summary>
        /// Select 'HourMode' radio button
        /// </summary>
        public bool UIHourModeRadioButton1Selected = true;
        
        /// <summary>
        /// Type '{Tab}' in 'HourMode' radio button
        /// </summary>
        public string UIHourModeRadioButton1SendKeys = "{Tab}";
        
        /// <summary>
        /// Select '02' in 'HoursG' combo box
        /// </summary>
        public string UIHoursGComboBoxSelectedItem = "02";
        
        /// <summary>
        /// Type '{Tab}' in 'DayMode' radio button
        /// </summary>
        public string UIDayModeRadioButtonSendKeys = "{Tab}";
        
        /// <summary>
        /// Select '1' in 'DaysE' combo box
        /// </summary>
        public string UIDaysEComboBoxSelectedItem = "1";
        
        /// <summary>
        /// Select 'DayMode' radio button
        /// </summary>
        public bool UIDayModeRadioButton1Selected = true;
        
        /// <summary>
        /// Type '{Tab}' in 'DayMode' radio button
        /// </summary>
        public string UIDayModeRadioButton1SendKeys = "{Tab}";
        
        /// <summary>
        /// Select '3' in 'DaysG' combo box
        /// </summary>
        public string UIDaysGComboBoxSelectedItem = "3";
        
        /// <summary>
        /// Type '{Tab}' in 'Monday' check box
        /// </summary>
        public string UIMondayCheckBoxSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '{Tab}' in 'Tuesday' check box
        /// </summary>
        public string UITuesdayCheckBoxSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '{Tab}' in 'Wednesday' check box
        /// </summary>
        public string UIWednesdayCheckBoxSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '{Tab}' in 'Thursday' check box
        /// </summary>
        public string UIThursdayCheckBoxSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '{Tab}' in 'Friday' check box
        /// </summary>
        public string UIFridayCheckBoxSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '{Tab}' in 'Saturday' check box
        /// </summary>
        public string UISaturdayCheckBoxSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '{Tab}' in 'Sunday' check box
        /// </summary>
        public string UISundayCheckBoxSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '{Tab}' in 'WeekMode' radio button
        /// </summary>
        public string UIWeekModeRadioButtonSendKeys = "{Tab}";
        
        /// <summary>
        /// Select '3' in 'WeeksG' combo box
        /// </summary>
        public string UIWeeksGComboBoxSelectedItem = "3";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ViewDeviceListAndAddSingle'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class ViewDeviceListAndAddSingleParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'sgl' in 'Device name' text box
        /// </summary>
        public string UIDevicenameEditText = "sgl";
        
        /// <summary>
        /// Type '{Tab}' in 'Device name' text box
        /// </summary>
        public string UIDevicenameEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Select 'single' in 'Group name' combo box
        /// </summary>
        public string UIGroupnameComboBoxSelectedItem = "single";
        
        /// <summary>
        /// Select 'XML-data' in 'Device type' combo box
        /// </summary>
        public string UIDevicetypeComboBoxSelectedItem = "XML-data";
        
        /// <summary>
        /// Type '1' in 'Internal address' text box
        /// </summary>
        public string UIInternaladdressEditText = "1";
        
        /// <summary>
        /// Type '{Tab}' in 'Internal address' text box
        /// </summary>
        public string UIInternaladdressEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '10' in 'IP1' text box
        /// </summary>
        public string UIIP1EditText = "10";
        
        /// <summary>
        /// Type '{Tab}' in 'IP1' text box
        /// </summary>
        public string UIIP1EditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '0' in 'IP2' text box
        /// </summary>
        public string UIIP2EditText = "0";
        
        /// <summary>
        /// Type '{Tab}' in 'IP2' text box
        /// </summary>
        public string UIIP2EditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '0' in 'IP3' text box
        /// </summary>
        public string UIIP3EditText = "0";
        
        /// <summary>
        /// Type '{Tab}' in 'IP3' text box
        /// </summary>
        public string UIIP3EditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '1' in 'IP4' text box
        /// </summary>
        public string UIIP4EditText = "1";
        
        /// <summary>
        /// Type '{Tab}' in 'IP4' text box
        /// </summary>
        public string UIIP4EditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '1000' in 'Primary port' text box
        /// </summary>
        public string UIPrimaryportEditText = "1000";
        
        /// <summary>
        /// Type '{Tab}' in 'Primary port' text box
        /// </summary>
        public string UIPrimaryportEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '10' in 'SecondaryIP1' text box
        /// </summary>
        public string UISecondaryIP1EditText = "10";
        
        /// <summary>
        /// Type '{Tab}' in 'SecondaryIP1' text box
        /// </summary>
        public string UISecondaryIP1EditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '0' in 'SecondaryIP2' text box
        /// </summary>
        public string UISecondaryIP2EditText = "0";
        
        /// <summary>
        /// Type '{Tab}' in 'SecondaryIP2' text box
        /// </summary>
        public string UISecondaryIP2EditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '0' in 'SecondaryIP3' text box
        /// </summary>
        public string UISecondaryIP3EditText = "0";
        
        /// <summary>
        /// Type '{Tab}' in 'SecondaryIP3' text box
        /// </summary>
        public string UISecondaryIP3EditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '1' in 'SecondaryIP4' text box
        /// </summary>
        public string UISecondaryIP4EditText = "1";
        
        /// <summary>
        /// Type '{Tab}' in 'SecondaryIP4' text box
        /// </summary>
        public string UISecondaryIP4EditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '1000' in 'Secondary port' text box
        /// </summary>
        public string UISecondaryportEditText = "1000";
        
        /// <summary>
        /// Type '{Tab}' in 'Secondary port' text box
        /// </summary>
        public string UISecondaryportEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Select 'Dmitry' in 'Device owner' combo box
        /// </summary>
        public string UIDeviceownerComboBoxSelectedItem = "Dmitry";
        
        /// <summary>
        /// Type '{Enter}' in 'Create' button
        /// </summary>
        public string UICreateButtonSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'EditDeviceDetails'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class EditDeviceDetailsParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'single modified' in 'Meter name' text box
        /// </summary>
        public string UIMeternameEditText = "single modified";
        
        /// <summary>
        /// Type '{Tab}' in 'Meter name' text box
        /// </summary>
        public string UIMeternameEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Select 'single' in 'Group name' combo box
        /// </summary>
        public string UIGroupnameComboBoxSelectedItem = "single";
        
        /// <summary>
        /// Select 'XML-data' in 'Meter type' combo box
        /// </summary>
        public string UIMetertypeComboBoxSelectedItem = "XML-data";
        
        /// <summary>
        /// Type '{Tab}' in 'Internal address' text box
        /// </summary>
        public string UIInternaladdressEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '{Tab}' in 'IP1' text box
        /// </summary>
        public string UIIP1EditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '{Tab}' in 'IP2' text box
        /// </summary>
        public string UIIP2EditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '{Tab}' in 'IP3' text box
        /// </summary>
        public string UIIP3EditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '10' in 'IP4' text box
        /// </summary>
        public string UIIP4EditText = "10";
        
        /// <summary>
        /// Type '{Tab}' in 'IP4' text box
        /// </summary>
        public string UIIP4EditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '{Tab}' in 'Primary port' text box
        /// </summary>
        public string UIPrimaryportEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '{Tab}' in 'SecondaryIP1' text box
        /// </summary>
        public string UISecondaryIP1EditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '{Tab}' in 'SecondaryIP2' text box
        /// </summary>
        public string UISecondaryIP2EditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '{Tab}' in 'SecondaryIP3' text box
        /// </summary>
        public string UISecondaryIP3EditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '10' in 'SecondaryIP4' text box
        /// </summary>
        public string UISecondaryIP4EditText = "10";
        
        /// <summary>
        /// Type '{Tab}' in 'SecondaryIP4' text box
        /// </summary>
        public string UISecondaryIP4EditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '1000' in 'Secondary port' text box
        /// </summary>
        public string UISecondaryportEditText = "1000";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CreateAccount'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class CreateAccountParams
    {
        
        #region Fields
        /// <summary>
        /// Go to web page 'http://localhost:2374/' using new browser instance
        /// </summary>
        public string UIBlankPageInternetExpWindow13Url = "http://localhost:2374/";
        
        /// <summary>
        /// Type 'dmorozov' in 'User name' text box
        /// </summary>
        public string UIUsernameEditText = "dmorozov";
        
        /// <summary>
        /// Type '{Tab}' in 'User name' text box
        /// </summary>
        public string UIUsernameEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '********' in 'Password' text box
        /// </summary>
        public string UIPasswordEditPassword = "lhJS4M1L4rlLtDMd0AqMCHkeBD8J/1JK";
        
        /// <summary>
        /// Type 'dmorozov' in 'User name' text box
        /// </summary>
        public string UIUsernameEditText1 = "dmorozov";
        
        /// <summary>
        /// Type '{Tab}' in 'User name' text box
        /// </summary>
        public string UIUsernameEditSendKeys1 = "{Tab}";
        
        /// <summary>
        /// Type 'dvmorozov@mail.ru' in 'Email address' text box
        /// </summary>
        public string UIEmailaddressEditText = "dvmorozov@mail.ru";
        
        /// <summary>
        /// Type '{Tab}' in 'Email address' text box
        /// </summary>
        public string UIEmailaddressEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '********' in 'Password' text box
        /// </summary>
        public string UIPasswordEditPassword1 = "lhJS4M1L4rlLtDMd0AqMCHkeBD8J/1JK";
        
        /// <summary>
        /// Type '{Tab}' in 'Password' text box
        /// </summary>
        public string UIPasswordEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '********' in 'Confirm password' text box
        /// </summary>
        public string UIConfirmpasswordEditPassword = "lhJS4M1L4rlLtDMd0AqMCHkeBD8J/1JK";
        
        /// <summary>
        /// Type '{Tab}' in 'Confirm password' text box
        /// </summary>
        public string UIConfirmpasswordEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type 'none' in 'Secret question' text box
        /// </summary>
        public string UISecretquestionEditText = "none";
        
        /// <summary>
        /// Type '{Tab}' in 'Secret question' text box
        /// </summary>
        public string UISecretquestionEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type 'none' in 'Answer' text box
        /// </summary>
        public string UIAnswerEditText = "none";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIMozillaFirefoxWindow : WinWindow
    {
        
        public UIMozillaFirefoxWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Mozilla Firefox";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "MozillaWindowClass";
            this.WindowTitles.Add("Mozilla Firefox");
            this.WindowTitles.Add("Welcome Rational City - Mozilla Firefox");
            this.WindowTitles.Add("Log On - Mozilla Firefox");
            this.WindowTitles.Add("Register - Mozilla Firefox");
            this.WindowTitles.Add("Meter groups - Mozilla Firefox");
            this.WindowTitles.Add("Create new meter records for IP-range - Mozilla Firefox");
            this.WindowTitles.Add("Delete the device group - Mozilla Firefox");
            this.WindowTitles.Add("Create new meter records for building group - Mozilla Firefox");
            this.WindowTitles.Add("Meters associated with group \"test buildings\" - Mozilla Firefox");
            this.WindowTitles.Add("Delete meter - Mozilla Firefox");
            this.WindowTitles.Add("Meters associated with group \"single meter\" - Mozilla Firefox");
            this.WindowTitles.Add("Meters associated with group \"tst\" - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public UIПанельнавигацииToolBar UIПанельнавигацииToolBar
        {
            get
            {
                if ((this.mUIПанельнавигацииToolBar == null))
                {
                    this.mUIПанельнавигацииToolBar = new UIПанельнавигацииToolBar(this);
                }
                return this.mUIПанельнавигацииToolBar;
            }
        }
        
        public UIПерейтинавебсайтComboBox UIПерейтинавебсайтComboBox
        {
            get
            {
                if ((this.mUIПерейтинавебсайтComboBox == null))
                {
                    this.mUIПерейтинавебсайтComboBox = new UIПерейтинавебсайтComboBox(this);
                }
                return this.mUIПерейтинавебсайтComboBox;
            }
        }
        
        public UILogOnHyperlink UILogOnHyperlink
        {
            get
            {
                if ((this.mUILogOnHyperlink == null))
                {
                    this.mUILogOnHyperlink = new UILogOnHyperlink(this);
                }
                return this.mUILogOnHyperlink;
            }
        }
        
        public UIAccountInformationGroup UIAccountInformationGroup
        {
            get
            {
                if ((this.mUIAccountInformationGroup == null))
                {
                    this.mUIAccountInformationGroup = new UIAccountInformationGroup(this);
                }
                return this.mUIAccountInformationGroup;
            }
        }
        
        public UILogOffChangePasswordListItem UILogOffChangePasswordListItem
        {
            get
            {
                if ((this.mUILogOffChangePasswordListItem == null))
                {
                    this.mUILogOffChangePasswordListItem = new UILogOffChangePasswordListItem(this);
                }
                return this.mUILogOffChangePasswordListItem;
            }
        }
        
        public UIWelcomeRationalCityMTitleBar UIWelcomeRationalCityMTitleBar
        {
            get
            {
                if ((this.mUIWelcomeRationalCityMTitleBar == null))
                {
                    this.mUIWelcomeRationalCityMTitleBar = new UIWelcomeRationalCityMTitleBar(this);
                }
                return this.mUIWelcomeRationalCityMTitleBar;
            }
        }
        
        public UIRegisterHyperlink UIRegisterHyperlink
        {
            get
            {
                if ((this.mUIRegisterHyperlink == null))
                {
                    this.mUIRegisterHyperlink = new UIRegisterHyperlink(this);
                }
                return this.mUIRegisterHyperlink;
            }
        }
        
        public UIItemCell UIItemCell
        {
            get
            {
                if ((this.mUIItemCell == null))
                {
                    this.mUIItemCell = new UIItemCell(this);
                }
                return this.mUIItemCell;
            }
        }
        
        public UIMetersListItem UIMetersListItem
        {
            get
            {
                if ((this.mUIMetersListItem == null))
                {
                    this.mUIMetersListItem = new UIMetersListItem(this);
                }
                return this.mUIMetersListItem;
            }
        }
        
        public UIAddMetersforIPrangeHyperlink UIAddMetersforIPrangeHyperlink
        {
            get
            {
                if ((this.mUIAddMetersforIPrangeHyperlink == null))
                {
                    this.mUIAddMetersforIPrangeHyperlink = new UIAddMetersforIPrangeHyperlink(this);
                }
                return this.mUIAddMetersforIPrangeHyperlink;
            }
        }
        
        public UIPrimaryIPpopulationGroup UIPrimaryIPpopulationGroup
        {
            get
            {
                if ((this.mUIPrimaryIPpopulationGroup == null))
                {
                    this.mUIPrimaryIPpopulationGroup = new UIPrimaryIPpopulationGroup(this);
                }
                return this.mUIPrimaryIPpopulationGroup;
            }
        }
        
        public UIPrimaryportpopulatioGroup UIPrimaryportpopulatioGroup
        {
            get
            {
                if ((this.mUIPrimaryportpopulatioGroup == null))
                {
                    this.mUIPrimaryportpopulatioGroup = new UIPrimaryportpopulatioGroup(this);
                }
                return this.mUIPrimaryportpopulatioGroup;
            }
        }
        
        public UISecondaryIPpopulatioGroup UISecondaryIPpopulatioGroup
        {
            get
            {
                if ((this.mUISecondaryIPpopulatioGroup == null))
                {
                    this.mUISecondaryIPpopulatioGroup = new UISecondaryIPpopulatioGroup(this);
                }
                return this.mUISecondaryIPpopulatioGroup;
            }
        }
        
        public UICreateButton UICreateButton
        {
            get
            {
                if ((this.mUICreateButton == null))
                {
                    this.mUICreateButton = new UICreateButton(this);
                }
                return this.mUICreateButton;
            }
        }
        
        public UILogOffHyperlink UILogOffHyperlink
        {
            get
            {
                if ((this.mUILogOffHyperlink == null))
                {
                    this.mUILogOffHyperlink = new UILogOffHyperlink(this);
                }
                return this.mUILogOffHyperlink;
            }
        }
        
        public UIDeleteHyperlink UIDeleteHyperlink
        {
            get
            {
                if ((this.mUIDeleteHyperlink == null))
                {
                    this.mUIDeleteHyperlink = new UIDeleteHyperlink(this);
                }
                return this.mUIDeleteHyperlink;
            }
        }
        
        public UIDeleteButton UIDeleteButton
        {
            get
            {
                if ((this.mUIDeleteButton == null))
                {
                    this.mUIDeleteButton = new UIDeleteButton(this);
                }
                return this.mUIDeleteButton;
            }
        }
        
        public UIMetersHyperlink UIMetersHyperlink
        {
            get
            {
                if ((this.mUIMetersHyperlink == null))
                {
                    this.mUIMetersHyperlink = new UIMetersHyperlink(this);
                }
                return this.mUIMetersHyperlink;
            }
        }
        
        public UIItemCell1 UIItemCell1
        {
            get
            {
                if ((this.mUIItemCell1 == null))
                {
                    this.mUIItemCell1 = new UIItemCell1(this);
                }
                return this.mUIItemCell1;
            }
        }
        
        public WinCustom UIMetergroupsMozillaFiCustom
        {
            get
            {
                if ((this.mUIMetergroupsMozillaFiCustom == null))
                {
                    this.mUIMetergroupsMozillaFiCustom = new WinCustom(this);
                    #region Search Criteria
                    this.mUIMetergroupsMozillaFiCustom.WindowTitles.Add("Meter groups - Mozilla Firefox");
                    #endregion
                }
                return this.mUIMetergroupsMozillaFiCustom;
            }
        }
        
        public UIPrimaryIPportpopulatGroup UIPrimaryIPportpopulatGroup
        {
            get
            {
                if ((this.mUIPrimaryIPportpopulatGroup == null))
                {
                    this.mUIPrimaryIPportpopulatGroup = new UIPrimaryIPportpopulatGroup(this);
                }
                return this.mUIPrimaryIPportpopulatGroup;
            }
        }
        
        public UIAddMetersforBuildingHyperlink UIAddMetersforBuildingHyperlink
        {
            get
            {
                if ((this.mUIAddMetersforBuildingHyperlink == null))
                {
                    this.mUIAddMetersforBuildingHyperlink = new UIAddMetersforBuildingHyperlink(this);
                }
                return this.mUIAddMetersforBuildingHyperlink;
            }
        }
        
        public UICommonaddressfieldsGroup UICommonaddressfieldsGroup
        {
            get
            {
                if ((this.mUICommonaddressfieldsGroup == null))
                {
                    this.mUICommonaddressfieldsGroup = new UICommonaddressfieldsGroup(this);
                }
                return this.mUICommonaddressfieldsGroup;
            }
        }
        
        public UIBuildingpopulationGroup UIBuildingpopulationGroup
        {
            get
            {
                if ((this.mUIBuildingpopulationGroup == null))
                {
                    this.mUIBuildingpopulationGroup = new UIBuildingpopulationGroup(this);
                }
                return this.mUIBuildingpopulationGroup;
            }
        }
        
        public UIApartmentOfficepopulGroup UIApartmentOfficepopulGroup
        {
            get
            {
                if ((this.mUIApartmentOfficepopulGroup == null))
                {
                    this.mUIApartmentOfficepopulGroup = new UIApartmentOfficepopulGroup(this);
                }
                return this.mUIApartmentOfficepopulGroup;
            }
        }
        
        public UIPrimaryIPaddressGroup UIPrimaryIPaddressGroup
        {
            get
            {
                if ((this.mUIPrimaryIPaddressGroup == null))
                {
                    this.mUIPrimaryIPaddressGroup = new UIPrimaryIPaddressGroup(this);
                }
                return this.mUIPrimaryIPaddressGroup;
            }
        }
        
        public UISecondaryIPaddressGroup UISecondaryIPaddressGroup
        {
            get
            {
                if ((this.mUISecondaryIPaddressGroup == null))
                {
                    this.mUISecondaryIPaddressGroup = new UISecondaryIPaddressGroup(this);
                }
                return this.mUISecondaryIPaddressGroup;
            }
        }
        
        public UICreatenewmeterrecordDocument UICreatenewmeterrecordDocument
        {
            get
            {
                if ((this.mUICreatenewmeterrecordDocument == null))
                {
                    this.mUICreatenewmeterrecordDocument = new UICreatenewmeterrecordDocument(this);
                }
                return this.mUICreatenewmeterrecordDocument;
            }
        }
        
        public UIGroupsHyperlink UIGroupsHyperlink
        {
            get
            {
                if ((this.mUIGroupsHyperlink == null))
                {
                    this.mUIGroupsHyperlink = new UIGroupsHyperlink(this);
                }
                return this.mUIGroupsHyperlink;
            }
        }
        
        public UIItemPropertyPage UIItemPropertyPage
        {
            get
            {
                if ((this.mUIItemPropertyPage == null))
                {
                    this.mUIItemPropertyPage = new UIItemPropertyPage(this);
                }
                return this.mUIItemPropertyPage;
            }
        }
        
        public UICreatenewmeterrecordDocument1 UICreatenewmeterrecordDocument1
        {
            get
            {
                if ((this.mUICreatenewmeterrecordDocument1 == null))
                {
                    this.mUICreatenewmeterrecordDocument1 = new UICreatenewmeterrecordDocument1(this);
                }
                return this.mUICreatenewmeterrecordDocument1;
            }
        }
        
        public UIDeletemeterDocument UIDeletemeterDocument
        {
            get
            {
                if ((this.mUIDeletemeterDocument == null))
                {
                    this.mUIDeletemeterDocument = new UIDeletemeterDocument(this);
                }
                return this.mUIDeletemeterDocument;
            }
        }
        
        public UIMeterGroupsListItem UIMeterGroupsListItem
        {
            get
            {
                if ((this.mUIMeterGroupsListItem == null))
                {
                    this.mUIMeterGroupsListItem = new UIMeterGroupsListItem(this);
                }
                return this.mUIMeterGroupsListItem;
            }
        }
        
        public UIMeterGroupsHyperlink UIMeterGroupsHyperlink
        {
            get
            {
                if ((this.mUIMeterGroupsHyperlink == null))
                {
                    this.mUIMeterGroupsHyperlink = new UIMeterGroupsHyperlink(this);
                }
                return this.mUIMeterGroupsHyperlink;
            }
        }
        
        public UIDeletethedevicegroupDocument UIDeletethedevicegroupDocument
        {
            get
            {
                if ((this.mUIDeletethedevicegroupDocument == null))
                {
                    this.mUIDeletethedevicegroupDocument = new UIDeletethedevicegroupDocument(this);
                }
                return this.mUIDeletethedevicegroupDocument;
            }
        }
        
        public UIDeleteGroupHyperlink UIDeleteGroupHyperlink
        {
            get
            {
                if ((this.mUIDeleteGroupHyperlink == null))
                {
                    this.mUIDeleteGroupHyperlink = new UIDeleteGroupHyperlink(this);
                }
                return this.mUIDeleteGroupHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private UIПанельнавигацииToolBar mUIПанельнавигацииToolBar;
        
        private UIПерейтинавебсайтComboBox mUIПерейтинавебсайтComboBox;
        
        private UILogOnHyperlink mUILogOnHyperlink;
        
        private UIAccountInformationGroup mUIAccountInformationGroup;
        
        private UILogOffChangePasswordListItem mUILogOffChangePasswordListItem;
        
        private UIWelcomeRationalCityMTitleBar mUIWelcomeRationalCityMTitleBar;
        
        private UIRegisterHyperlink mUIRegisterHyperlink;
        
        private UIItemCell mUIItemCell;
        
        private UIMetersListItem mUIMetersListItem;
        
        private UIAddMetersforIPrangeHyperlink mUIAddMetersforIPrangeHyperlink;
        
        private UIPrimaryIPpopulationGroup mUIPrimaryIPpopulationGroup;
        
        private UIPrimaryportpopulatioGroup mUIPrimaryportpopulatioGroup;
        
        private UISecondaryIPpopulatioGroup mUISecondaryIPpopulatioGroup;
        
        private UICreateButton mUICreateButton;
        
        private UILogOffHyperlink mUILogOffHyperlink;
        
        private UIDeleteHyperlink mUIDeleteHyperlink;
        
        private UIDeleteButton mUIDeleteButton;
        
        private UIMetersHyperlink mUIMetersHyperlink;
        
        private UIItemCell1 mUIItemCell1;
        
        private WinCustom mUIMetergroupsMozillaFiCustom;
        
        private UIPrimaryIPportpopulatGroup mUIPrimaryIPportpopulatGroup;
        
        private UIAddMetersforBuildingHyperlink mUIAddMetersforBuildingHyperlink;
        
        private UICommonaddressfieldsGroup mUICommonaddressfieldsGroup;
        
        private UIBuildingpopulationGroup mUIBuildingpopulationGroup;
        
        private UIApartmentOfficepopulGroup mUIApartmentOfficepopulGroup;
        
        private UIPrimaryIPaddressGroup mUIPrimaryIPaddressGroup;
        
        private UISecondaryIPaddressGroup mUISecondaryIPaddressGroup;
        
        private UICreatenewmeterrecordDocument mUICreatenewmeterrecordDocument;
        
        private UIGroupsHyperlink mUIGroupsHyperlink;
        
        private UIItemPropertyPage mUIItemPropertyPage;
        
        private UICreatenewmeterrecordDocument1 mUICreatenewmeterrecordDocument1;
        
        private UIDeletemeterDocument mUIDeletemeterDocument;
        
        private UIMeterGroupsListItem mUIMeterGroupsListItem;
        
        private UIMeterGroupsHyperlink mUIMeterGroupsHyperlink;
        
        private UIDeletethedevicegroupDocument mUIDeletethedevicegroupDocument;
        
        private UIDeleteGroupHyperlink mUIDeleteGroupHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIПанельнавигацииToolBar : WinToolBar
    {
        
        public UIПанельнавигацииToolBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinToolBar.PropertyNames.Name] = "Панель навигации";
            this.WindowTitles.Add("Mozilla Firefox");
            this.WindowTitles.Add("Welcome Rational City - Mozilla Firefox");
            this.WindowTitles.Add("Log On - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIПерейтинавебсайтComboBox
        {
            get
            {
                if ((this.mUIПерейтинавебсайтComboBox == null))
                {
                    this.mUIПерейтинавебсайтComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIПерейтинавебсайтComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "Перейти на веб-сайт";
                    this.mUIПерейтинавебсайтComboBox.WindowTitles.Add("Mozilla Firefox");
                    this.mUIПерейтинавебсайтComboBox.WindowTitles.Add("Welcome Rational City - Mozilla Firefox");
                    this.mUIПерейтинавебсайтComboBox.WindowTitles.Add("Log On - Mozilla Firefox");
                    #endregion
                }
                return this.mUIПерейтинавебсайтComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIПерейтинавебсайтComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIПерейтинавебсайтComboBox : WinComboBox
    {
        
        public UIПерейтинавебсайтComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinComboBox.PropertyNames.Name] = "Перейти на веб-сайт";
            this.WindowTitles.Add("Mozilla Firefox");
            this.WindowTitles.Add("Welcome Rational City - Mozilla Firefox");
            this.WindowTitles.Add("Log On - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinEdit UIПерейтинавебсайтEdit
        {
            get
            {
                if ((this.mUIПерейтинавебсайтEdit == null))
                {
                    this.mUIПерейтинавебсайтEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIПерейтинавебсайтEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Перейти на веб-сайт";
                    this.mUIПерейтинавебсайтEdit.WindowTitles.Add("Mozilla Firefox");
                    this.mUIПерейтинавебсайтEdit.WindowTitles.Add("Welcome Rational City - Mozilla Firefox");
                    this.mUIПерейтинавебсайтEdit.WindowTitles.Add("Log On - Mozilla Firefox");
                    #endregion
                }
                return this.mUIПерейтинавебсайтEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIПерейтинавебсайтEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UILogOnHyperlink : WinHyperlink
    {
        
        public UILogOnHyperlink(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinHyperlink.PropertyNames.Name] = "Log On";
            this.WindowTitles.Add("Welcome Rational City - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinEdit UILogOnEdit
        {
            get
            {
                if ((this.mUILogOnEdit == null))
                {
                    this.mUILogOnEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUILogOnEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Log On";
                    this.mUILogOnEdit.WindowTitles.Add("Welcome Rational City - Mozilla Firefox");
                    #endregion
                }
                return this.mUILogOnEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUILogOnEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIAccountInformationGroup : WinGroup
    {
        
        public UIAccountInformationGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Account Information ";
            this.WindowTitles.Add("Log On - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinEdit UIUsernameEdit
        {
            get
            {
                if ((this.mUIUsernameEdit == null))
                {
                    this.mUIUsernameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIUsernameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "User name";
                    this.mUIUsernameEdit.WindowTitles.Add("Log On - Mozilla Firefox");
                    #endregion
                }
                return this.mUIUsernameEdit;
            }
        }
        
        public WinEdit UIPasswordEdit
        {
            get
            {
                if ((this.mUIPasswordEdit == null))
                {
                    this.mUIPasswordEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIPasswordEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Password";
                    this.mUIPasswordEdit.WindowTitles.Add("Log On - Mozilla Firefox");
                    #endregion
                }
                return this.mUIPasswordEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIUsernameEdit;
        
        private WinEdit mUIPasswordEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UILogOffChangePasswordListItem : WinListItem
    {
        
        public UILogOffChangePasswordListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "Log Off Change Password";
            this.WindowTitles.Add("Welcome Rational City - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinHyperlink UILogOffHyperlink
        {
            get
            {
                if ((this.mUILogOffHyperlink == null))
                {
                    this.mUILogOffHyperlink = new WinHyperlink(this);
                    #region Search Criteria
                    this.mUILogOffHyperlink.SearchProperties[WinHyperlink.PropertyNames.Name] = "Log Off";
                    this.mUILogOffHyperlink.WindowTitles.Add("Welcome Rational City - Mozilla Firefox");
                    #endregion
                }
                return this.mUILogOffHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private WinHyperlink mUILogOffHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIWelcomeRationalCityMTitleBar : WinTitleBar
    {
        
        public UIWelcomeRationalCityMTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Welcome Rational City - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinButton UIЗакрытьButton
        {
            get
            {
                if ((this.mUIЗакрытьButton == null))
                {
                    this.mUIЗакрытьButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIЗакрытьButton.SearchProperties[WinButton.PropertyNames.Name] = "Закрыть";
                    this.mUIЗакрытьButton.WindowTitles.Add("Welcome Rational City - Mozilla Firefox");
                    #endregion
                }
                return this.mUIЗакрытьButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIЗакрытьButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRegisterHyperlink : WinHyperlink
    {
        
        public UIRegisterHyperlink(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinHyperlink.PropertyNames.Name] = "Register";
            this.WindowTitles.Add("Log On - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinEdit UIRegisterEdit
        {
            get
            {
                if ((this.mUIRegisterEdit == null))
                {
                    this.mUIRegisterEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIRegisterEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Register";
                    this.mUIRegisterEdit.WindowTitles.Add("Log On - Mozilla Firefox");
                    #endregion
                }
                return this.mUIRegisterEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIRegisterEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItemCell : WinCell
    {
        
        public UIItemCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Register - Mozilla Firefox");
            this.WindowTitles.Add("Create new meter records for IP-range - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinEdit UIUsernameEdit
        {
            get
            {
                if ((this.mUIUsernameEdit == null))
                {
                    this.mUIUsernameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIUsernameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "User name";
                    this.mUIUsernameEdit.WindowTitles.Add("Register - Mozilla Firefox");
                    #endregion
                }
                return this.mUIUsernameEdit;
            }
        }
        
        public WinEdit UIGroupnameEdit
        {
            get
            {
                if ((this.mUIGroupnameEdit == null))
                {
                    this.mUIGroupnameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIGroupnameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Group name";
                    this.mUIGroupnameEdit.WindowTitles.Add("Create new meter records for IP-range - Mozilla Firefox");
                    #endregion
                }
                return this.mUIGroupnameEdit;
            }
        }
        
        public WinEdit UIMeternameprefixEdit
        {
            get
            {
                if ((this.mUIMeternameprefixEdit == null))
                {
                    this.mUIMeternameprefixEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIMeternameprefixEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Meter name prefix";
                    this.mUIMeternameprefixEdit.WindowTitles.Add("Create new meter records for IP-range - Mozilla Firefox");
                    #endregion
                }
                return this.mUIMeternameprefixEdit;
            }
        }
        
        public WinGroup UIPrimaryIPpopulationGroup
        {
            get
            {
                if ((this.mUIPrimaryIPpopulationGroup == null))
                {
                    this.mUIPrimaryIPpopulationGroup = new WinGroup(this);
                    #region Search Criteria
                    this.mUIPrimaryIPpopulationGroup.SearchProperties[WinControl.PropertyNames.Name] = "Primary IP population ";
                    this.mUIPrimaryIPpopulationGroup.WindowTitles.Add("Create new meter records for IP-range - Mozilla Firefox");
                    #endregion
                }
                return this.mUIPrimaryIPpopulationGroup;
            }
        }
        
        public WinComboBox UIDevicetypeComboBox
        {
            get
            {
                if ((this.mUIDevicetypeComboBox == null))
                {
                    this.mUIDevicetypeComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIDevicetypeComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "Device type";
                    this.mUIDevicetypeComboBox.WindowTitles.Add("Create new meter records for IP-range - Mozilla Firefox");
                    #endregion
                }
                return this.mUIDevicetypeComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIUsernameEdit;
        
        private WinEdit mUIGroupnameEdit;
        
        private WinEdit mUIMeternameprefixEdit;
        
        private WinGroup mUIPrimaryIPpopulationGroup;
        
        private WinComboBox mUIDevicetypeComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIMetersListItem : WinListItem
    {
        
        public UIMetersListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "Meters";
            this.WindowTitles.Add("Welcome Rational City - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinHyperlink UIMetersHyperlink
        {
            get
            {
                if ((this.mUIMetersHyperlink == null))
                {
                    this.mUIMetersHyperlink = new WinHyperlink(this);
                    #region Search Criteria
                    this.mUIMetersHyperlink.SearchProperties[WinHyperlink.PropertyNames.Name] = "Meters";
                    this.mUIMetersHyperlink.WindowTitles.Add("Welcome Rational City - Mozilla Firefox");
                    #endregion
                }
                return this.mUIMetersHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private WinHyperlink mUIMetersHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIAddMetersforIPrangeHyperlink : WinHyperlink
    {
        
        public UIAddMetersforIPrangeHyperlink(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinHyperlink.PropertyNames.Name] = "Add Meters for IP-range";
            this.WindowTitles.Add("Meter groups - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinEdit UIAddMetersforIPrangeEdit
        {
            get
            {
                if ((this.mUIAddMetersforIPrangeEdit == null))
                {
                    this.mUIAddMetersforIPrangeEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIAddMetersforIPrangeEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Add Meters for IP-range";
                    this.mUIAddMetersforIPrangeEdit.WindowTitles.Add("Meter groups - Mozilla Firefox");
                    #endregion
                }
                return this.mUIAddMetersforIPrangeEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIAddMetersforIPrangeEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIPrimaryIPpopulationGroup : WinGroup
    {
        
        public UIPrimaryIPpopulationGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Primary IP population ";
            this.WindowTitles.Add("Create new meter records for IP-range - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinEdit UIInitialIPaddressEdit
        {
            get
            {
                if ((this.mUIInitialIPaddressEdit == null))
                {
                    this.mUIInitialIPaddressEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIInitialIPaddressEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Initial IP address";
                    this.mUIInitialIPaddressEdit.WindowTitles.Add("Create new meter records for IP-range - Mozilla Firefox");
                    #endregion
                }
                return this.mUIInitialIPaddressEdit;
            }
        }
        
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.SearchProperties[WinEdit.PropertyNames.Instance] = "3";
                    this.mUIItemEdit.WindowTitles.Add("Create new meter records for IP-range - Mozilla Firefox");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        
        public WinEdit UIItemEdit1
        {
            get
            {
                if ((this.mUIItemEdit1 == null))
                {
                    this.mUIItemEdit1 = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit1.SearchProperties[WinEdit.PropertyNames.Instance] = "5";
                    this.mUIItemEdit1.WindowTitles.Add("Create new meter records for IP-range - Mozilla Firefox");
                    #endregion
                }
                return this.mUIItemEdit1;
            }
        }
        
        public WinEdit UIItemEdit2
        {
            get
            {
                if ((this.mUIItemEdit2 == null))
                {
                    this.mUIItemEdit2 = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit2.SearchProperties[WinEdit.PropertyNames.Instance] = "7";
                    this.mUIItemEdit2.WindowTitles.Add("Create new meter records for IP-range - Mozilla Firefox");
                    #endregion
                }
                return this.mUIItemEdit2;
            }
        }
        
        public WinEdit UIFinalIPaddressEdit
        {
            get
            {
                if ((this.mUIFinalIPaddressEdit == null))
                {
                    this.mUIFinalIPaddressEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIFinalIPaddressEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Final IP address";
                    this.mUIFinalIPaddressEdit.WindowTitles.Add("Create new meter records for IP-range - Mozilla Firefox");
                    #endregion
                }
                return this.mUIFinalIPaddressEdit;
            }
        }
        
        public WinEdit UIStartingIP2StartingIEdit
        {
            get
            {
                if ((this.mUIStartingIP2StartingIEdit == null))
                {
                    this.mUIStartingIP2StartingIEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIStartingIP2StartingIEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Starting IP2Starting IP3Starting IP4";
                    this.mUIStartingIP2StartingIEdit.WindowTitles.Add("Create new meter records for IP-range - Mozilla Firefox");
                    #endregion
                }
                return this.mUIStartingIP2StartingIEdit;
            }
        }
        
        public WinEdit UIStartingIP2Edit
        {
            get
            {
                if ((this.mUIStartingIP2Edit == null))
                {
                    this.mUIStartingIP2Edit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIStartingIP2Edit.SearchProperties[WinEdit.PropertyNames.Name] = "Starting IP2";
                    this.mUIStartingIP2Edit.WindowTitles.Add("Create new meter records for IP-range - Mozilla Firefox");
                    #endregion
                }
                return this.mUIStartingIP2Edit;
            }
        }
        
        public WinEdit UIStartingIP3Edit
        {
            get
            {
                if ((this.mUIStartingIP3Edit == null))
                {
                    this.mUIStartingIP3Edit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIStartingIP3Edit.SearchProperties[WinEdit.PropertyNames.Name] = "Starting IP3";
                    this.mUIStartingIP3Edit.WindowTitles.Add("Create new meter records for IP-range - Mozilla Firefox");
                    #endregion
                }
                return this.mUIStartingIP3Edit;
            }
        }
        
        public WinEdit UIStartingIP4Edit
        {
            get
            {
                if ((this.mUIStartingIP4Edit == null))
                {
                    this.mUIStartingIP4Edit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIStartingIP4Edit.SearchProperties[WinEdit.PropertyNames.Name] = "Starting IP4";
                    this.mUIStartingIP4Edit.WindowTitles.Add("Create new meter records for IP-range - Mozilla Firefox");
                    #endregion
                }
                return this.mUIStartingIP4Edit;
            }
        }
        
        public WinEdit UIItemEdit3
        {
            get
            {
                if ((this.mUIItemEdit3 == null))
                {
                    this.mUIItemEdit3 = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit3.SearchProperties[WinEdit.PropertyNames.Name] = ".";
                    this.mUIItemEdit3.WindowTitles.Add("Create new meter records for IP-range - Mozilla Firefox");
                    #endregion
                }
                return this.mUIItemEdit3;
            }
        }
        
        public WinEdit UIItemEdit11
        {
            get
            {
                if ((this.mUIItemEdit11 == null))
                {
                    this.mUIItemEdit11 = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit11.SearchProperties[WinEdit.PropertyNames.Name] = ".";
                    this.mUIItemEdit11.WindowTitles.Add("Create new meter records for IP-range - Mozilla Firefox");
                    #endregion
                }
                return this.mUIItemEdit11;
            }
        }
        
        public WinEdit UIItemEdit21
        {
            get
            {
                if ((this.mUIItemEdit21 == null))
                {
                    this.mUIItemEdit21 = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit21.SearchProperties[WinEdit.PropertyNames.Name] = ".";
                    this.mUIItemEdit21.WindowTitles.Add("Create new meter records for IP-range - Mozilla Firefox");
                    #endregion
                }
                return this.mUIItemEdit21;
            }
        }
        
        public WinEdit UIInitialprimaryIPEdit
        {
            get
            {
                if ((this.mUIInitialprimaryIPEdit == null))
                {
                    this.mUIInitialprimaryIPEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIInitialprimaryIPEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Initial primary IP";
                    this.mUIInitialprimaryIPEdit.WindowTitles.Add("Create new meter records for IP-range - Mozilla Firefox");
                    #endregion
                }
                return this.mUIInitialprimaryIPEdit;
            }
        }
        
        public WinEdit UIInititialIP2Edit
        {
            get
            {
                if ((this.mUIInititialIP2Edit == null))
                {
                    this.mUIInititialIP2Edit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIInititialIP2Edit.SearchProperties[WinEdit.PropertyNames.Name] = "Inititial IP2";
                    this.mUIInititialIP2Edit.WindowTitles.Add("Create new meter records for IP-range - Mozilla Firefox");
                    #endregion
                }
                return this.mUIInititialIP2Edit;
            }
        }
        
        public WinEdit UIInititialIP3Edit
        {
            get
            {
                if ((this.mUIInititialIP3Edit == null))
                {
                    this.mUIInititialIP3Edit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIInititialIP3Edit.SearchProperties[WinEdit.PropertyNames.Name] = "Inititial IP3";
                    this.mUIInititialIP3Edit.WindowTitles.Add("Create new meter records for IP-range - Mozilla Firefox");
                    #endregion
                }
                return this.mUIInititialIP3Edit;
            }
        }
        
        public WinEdit UIInititialIP4Edit
        {
            get
            {
                if ((this.mUIInititialIP4Edit == null))
                {
                    this.mUIInititialIP4Edit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIInititialIP4Edit.SearchProperties[WinEdit.PropertyNames.Name] = "Inititial IP4";
                    this.mUIInititialIP4Edit.WindowTitles.Add("Create new meter records for IP-range - Mozilla Firefox");
                    #endregion
                }
                return this.mUIInititialIP4Edit;
            }
        }
        
        public WinEdit UIFinalprimaryIPEdit
        {
            get
            {
                if ((this.mUIFinalprimaryIPEdit == null))
                {
                    this.mUIFinalprimaryIPEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIFinalprimaryIPEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Final primary IP";
                    this.mUIFinalprimaryIPEdit.WindowTitles.Add("Create new meter records for IP-range - Mozilla Firefox");
                    #endregion
                }
                return this.mUIFinalprimaryIPEdit;
            }
        }
        
        public WinEdit UIFinalIP2Edit
        {
            get
            {
                if ((this.mUIFinalIP2Edit == null))
                {
                    this.mUIFinalIP2Edit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIFinalIP2Edit.SearchProperties[WinEdit.PropertyNames.Name] = "Final IP2";
                    this.mUIFinalIP2Edit.WindowTitles.Add("Create new meter records for IP-range - Mozilla Firefox");
                    #endregion
                }
                return this.mUIFinalIP2Edit;
            }
        }
        
        public WinEdit UIFinalIP3Edit
        {
            get
            {
                if ((this.mUIFinalIP3Edit == null))
                {
                    this.mUIFinalIP3Edit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIFinalIP3Edit.SearchProperties[WinEdit.PropertyNames.Name] = "Final IP3";
                    this.mUIFinalIP3Edit.WindowTitles.Add("Create new meter records for IP-range - Mozilla Firefox");
                    #endregion
                }
                return this.mUIFinalIP3Edit;
            }
        }
        
        public WinEdit UIFinalIP4Edit
        {
            get
            {
                if ((this.mUIFinalIP4Edit == null))
                {
                    this.mUIFinalIP4Edit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIFinalIP4Edit.SearchProperties[WinEdit.PropertyNames.Name] = "Final IP4";
                    this.mUIFinalIP4Edit.WindowTitles.Add("Create new meter records for IP-range - Mozilla Firefox");
                    #endregion
                }
                return this.mUIFinalIP4Edit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIInitialIPaddressEdit;
        
        private WinEdit mUIItemEdit;
        
        private WinEdit mUIItemEdit1;
        
        private WinEdit mUIItemEdit2;
        
        private WinEdit mUIFinalIPaddressEdit;
        
        private WinEdit mUIStartingIP2StartingIEdit;
        
        private WinEdit mUIStartingIP2Edit;
        
        private WinEdit mUIStartingIP3Edit;
        
        private WinEdit mUIStartingIP4Edit;
        
        private WinEdit mUIItemEdit3;
        
        private WinEdit mUIItemEdit11;
        
        private WinEdit mUIItemEdit21;
        
        private WinEdit mUIInitialprimaryIPEdit;
        
        private WinEdit mUIInititialIP2Edit;
        
        private WinEdit mUIInititialIP3Edit;
        
        private WinEdit mUIInititialIP4Edit;
        
        private WinEdit mUIFinalprimaryIPEdit;
        
        private WinEdit mUIFinalIP2Edit;
        
        private WinEdit mUIFinalIP3Edit;
        
        private WinEdit mUIFinalIP4Edit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIPrimaryportpopulatioGroup : WinGroup
    {
        
        public UIPrimaryportpopulatioGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Primary port population ";
            this.WindowTitles.Add("Create new meter records for IP-range - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinEdit UIStartingIPportEdit
        {
            get
            {
                if ((this.mUIStartingIPportEdit == null))
                {
                    this.mUIStartingIPportEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIStartingIPportEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Starting IP port";
                    this.mUIStartingIPportEdit.WindowTitles.Add("Create new meter records for IP-range - Mozilla Firefox");
                    #endregion
                }
                return this.mUIStartingIPportEdit;
            }
        }
        
        public WinEdit UIFinalIPportEdit
        {
            get
            {
                if ((this.mUIFinalIPportEdit == null))
                {
                    this.mUIFinalIPportEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIFinalIPportEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Final IP port";
                    this.mUIFinalIPportEdit.WindowTitles.Add("Create new meter records for IP-range - Mozilla Firefox");
                    #endregion
                }
                return this.mUIFinalIPportEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIStartingIPportEdit;
        
        private WinEdit mUIFinalIPportEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UISecondaryIPpopulatioGroup : WinGroup
    {
        
        public UISecondaryIPpopulatioGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Secondary IP population ";
            this.WindowTitles.Add("Create new meter records for IP-range - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinEdit UIStartingIPaddressEdit
        {
            get
            {
                if ((this.mUIStartingIPaddressEdit == null))
                {
                    this.mUIStartingIPaddressEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIStartingIPaddressEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Starting IP address";
                    this.mUIStartingIPaddressEdit.WindowTitles.Add("Create new meter records for IP-range - Mozilla Firefox");
                    #endregion
                }
                return this.mUIStartingIPaddressEdit;
            }
        }
        
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.SearchProperties[WinEdit.PropertyNames.Instance] = "3";
                    this.mUIItemEdit.WindowTitles.Add("Create new meter records for IP-range - Mozilla Firefox");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        
        public WinEdit UIItemEdit1
        {
            get
            {
                if ((this.mUIItemEdit1 == null))
                {
                    this.mUIItemEdit1 = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit1.SearchProperties[WinEdit.PropertyNames.Instance] = "5";
                    this.mUIItemEdit1.WindowTitles.Add("Create new meter records for IP-range - Mozilla Firefox");
                    #endregion
                }
                return this.mUIItemEdit1;
            }
        }
        
        public WinEdit UIItemEdit2
        {
            get
            {
                if ((this.mUIItemEdit2 == null))
                {
                    this.mUIItemEdit2 = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit2.SearchProperties[WinEdit.PropertyNames.Instance] = "7";
                    this.mUIItemEdit2.WindowTitles.Add("Create new meter records for IP-range - Mozilla Firefox");
                    #endregion
                }
                return this.mUIItemEdit2;
            }
        }
        
        public WinEdit UIStartingIPportEdit
        {
            get
            {
                if ((this.mUIStartingIPportEdit == null))
                {
                    this.mUIStartingIPportEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIStartingIPportEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Starting IP port";
                    this.mUIStartingIPportEdit.WindowTitles.Add("Create new meter records for IP-range - Mozilla Firefox");
                    #endregion
                }
                return this.mUIStartingIPportEdit;
            }
        }
        
        public WinEdit UIInitialsecondaryIPEdit
        {
            get
            {
                if ((this.mUIInitialsecondaryIPEdit == null))
                {
                    this.mUIInitialsecondaryIPEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIInitialsecondaryIPEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Initial secondary IP";
                    this.mUIInitialsecondaryIPEdit.WindowTitles.Add("Create new meter records for IP-range - Mozilla Firefox");
                    #endregion
                }
                return this.mUIInitialsecondaryIPEdit;
            }
        }
        
        public WinEdit UIInititialsecondaryIPEdit
        {
            get
            {
                if ((this.mUIInititialsecondaryIPEdit == null))
                {
                    this.mUIInititialsecondaryIPEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIInititialsecondaryIPEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Inititial secondary IP2";
                    this.mUIInititialsecondaryIPEdit.WindowTitles.Add("Create new meter records for IP-range - Mozilla Firefox");
                    #endregion
                }
                return this.mUIInititialsecondaryIPEdit;
            }
        }
        
        public WinEdit UIInititialsecondaryIPEdit1
        {
            get
            {
                if ((this.mUIInititialsecondaryIPEdit1 == null))
                {
                    this.mUIInititialsecondaryIPEdit1 = new WinEdit(this);
                    #region Search Criteria
                    this.mUIInititialsecondaryIPEdit1.SearchProperties[WinEdit.PropertyNames.Name] = "Inititial secondary IP3";
                    this.mUIInititialsecondaryIPEdit1.WindowTitles.Add("Create new meter records for IP-range - Mozilla Firefox");
                    #endregion
                }
                return this.mUIInititialsecondaryIPEdit1;
            }
        }
        
        public WinEdit UIInititialsecondaryIPEdit2
        {
            get
            {
                if ((this.mUIInititialsecondaryIPEdit2 == null))
                {
                    this.mUIInititialsecondaryIPEdit2 = new WinEdit(this);
                    #region Search Criteria
                    this.mUIInititialsecondaryIPEdit2.SearchProperties[WinEdit.PropertyNames.Name] = "Inititial secondary IP4";
                    this.mUIInititialsecondaryIPEdit2.WindowTitles.Add("Create new meter records for IP-range - Mozilla Firefox");
                    #endregion
                }
                return this.mUIInititialsecondaryIPEdit2;
            }
        }
        
        public WinEdit UIInitialsecondaryportEdit
        {
            get
            {
                if ((this.mUIInitialsecondaryportEdit == null))
                {
                    this.mUIInitialsecondaryportEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIInitialsecondaryportEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Initial secondary port";
                    this.mUIInitialsecondaryportEdit.WindowTitles.Add("Create new meter records for IP-range - Mozilla Firefox");
                    #endregion
                }
                return this.mUIInitialsecondaryportEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIStartingIPaddressEdit;
        
        private WinEdit mUIItemEdit;
        
        private WinEdit mUIItemEdit1;
        
        private WinEdit mUIItemEdit2;
        
        private WinEdit mUIStartingIPportEdit;
        
        private WinEdit mUIInitialsecondaryIPEdit;
        
        private WinEdit mUIInititialsecondaryIPEdit;
        
        private WinEdit mUIInititialsecondaryIPEdit1;
        
        private WinEdit mUIInititialsecondaryIPEdit2;
        
        private WinEdit mUIInitialsecondaryportEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UICreateButton : WinButton
    {
        
        public UICreateButton(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinButton.PropertyNames.Name] = "Create";
            this.WindowTitles.Add("Create new meter records for IP-range - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinEdit UICreateEdit
        {
            get
            {
                if ((this.mUICreateEdit == null))
                {
                    this.mUICreateEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICreateEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Create";
                    this.mUICreateEdit.WindowTitles.Add("Create new meter records for IP-range - Mozilla Firefox");
                    #endregion
                }
                return this.mUICreateEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICreateEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UILogOffHyperlink : WinHyperlink
    {
        
        public UILogOffHyperlink(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinHyperlink.PropertyNames.Name] = "Log Off";
            this.WindowTitles.Add("Meter groups - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinEdit UILogOffEdit
        {
            get
            {
                if ((this.mUILogOffEdit == null))
                {
                    this.mUILogOffEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUILogOffEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Log Off";
                    this.mUILogOffEdit.WindowTitles.Add("Meter groups - Mozilla Firefox");
                    #endregion
                }
                return this.mUILogOffEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUILogOffEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDeleteHyperlink : WinHyperlink
    {
        
        public UIDeleteHyperlink(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinHyperlink.PropertyNames.Name] = "Delete";
            this.WindowTitles.Add("Meter groups - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinEdit UIDeleteEdit
        {
            get
            {
                if ((this.mUIDeleteEdit == null))
                {
                    this.mUIDeleteEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIDeleteEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Delete";
                    this.mUIDeleteEdit.WindowTitles.Add("Meter groups - Mozilla Firefox");
                    #endregion
                }
                return this.mUIDeleteEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIDeleteEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDeleteButton : WinButton
    {
        
        public UIDeleteButton(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinButton.PropertyNames.Name] = "Delete";
            this.WindowTitles.Add("Delete the device group - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinEdit UIDeleteEdit
        {
            get
            {
                if ((this.mUIDeleteEdit == null))
                {
                    this.mUIDeleteEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIDeleteEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Delete";
                    this.mUIDeleteEdit.WindowTitles.Add("Delete the device group - Mozilla Firefox");
                    #endregion
                }
                return this.mUIDeleteEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIDeleteEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIMetersHyperlink : WinHyperlink
    {
        
        public UIMetersHyperlink(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinHyperlink.PropertyNames.Name] = "Meters";
            this.WindowTitles.Add("Meter groups - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinEdit UIMetersEdit
        {
            get
            {
                if ((this.mUIMetersEdit == null))
                {
                    this.mUIMetersEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIMetersEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Meters";
                    this.mUIMetersEdit.WindowTitles.Add("Meter groups - Mozilla Firefox");
                    #endregion
                }
                return this.mUIMetersEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIMetersEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItemCell1 : WinCell
    {
        
        public UIItemCell1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Create new meter records for IP-range - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinEdit UIMeternameprefixEdit
        {
            get
            {
                if ((this.mUIMeternameprefixEdit == null))
                {
                    this.mUIMeternameprefixEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIMeternameprefixEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Meter name prefix";
                    this.mUIMeternameprefixEdit.WindowTitles.Add("Create new meter records for IP-range - Mozilla Firefox");
                    #endregion
                }
                return this.mUIMeternameprefixEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIMeternameprefixEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIPrimaryIPportpopulatGroup : WinGroup
    {
        
        public UIPrimaryIPportpopulatGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Primary IP-port population ";
            this.WindowTitles.Add("Create new meter records for IP-range - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinEdit UIInitialprimaryportEdit
        {
            get
            {
                if ((this.mUIInitialprimaryportEdit == null))
                {
                    this.mUIInitialprimaryportEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIInitialprimaryportEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Initial primary port";
                    this.mUIInitialprimaryportEdit.WindowTitles.Add("Create new meter records for IP-range - Mozilla Firefox");
                    #endregion
                }
                return this.mUIInitialprimaryportEdit;
            }
        }
        
        public WinEdit UIFinalprimaryportEdit
        {
            get
            {
                if ((this.mUIFinalprimaryportEdit == null))
                {
                    this.mUIFinalprimaryportEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIFinalprimaryportEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Final primary port";
                    this.mUIFinalprimaryportEdit.WindowTitles.Add("Create new meter records for IP-range - Mozilla Firefox");
                    #endregion
                }
                return this.mUIFinalprimaryportEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIInitialprimaryportEdit;
        
        private WinEdit mUIFinalprimaryportEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIAddMetersforBuildingHyperlink : WinHyperlink
    {
        
        public UIAddMetersforBuildingHyperlink(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinHyperlink.PropertyNames.Name] = "Add Meters for Buildings";
            this.WindowTitles.Add("Meter groups - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinEdit UIAddMetersforBuildingEdit
        {
            get
            {
                if ((this.mUIAddMetersforBuildingEdit == null))
                {
                    this.mUIAddMetersforBuildingEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIAddMetersforBuildingEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Add Meters for Buildings";
                    this.mUIAddMetersforBuildingEdit.WindowTitles.Add("Meter groups - Mozilla Firefox");
                    #endregion
                }
                return this.mUIAddMetersforBuildingEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIAddMetersforBuildingEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UICommonaddressfieldsGroup : WinGroup
    {
        
        public UICommonaddressfieldsGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Common address fields ";
            this.WindowTitles.Add("Create new meter records for building group - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinEdit UIStreetEdit
        {
            get
            {
                if ((this.mUIStreetEdit == null))
                {
                    this.mUIStreetEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIStreetEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Street";
                    this.mUIStreetEdit.WindowTitles.Add("Create new meter records for building group - Mozilla Firefox");
                    #endregion
                }
                return this.mUIStreetEdit;
            }
        }
        
        public WinEdit UICityEdit
        {
            get
            {
                if ((this.mUICityEdit == null))
                {
                    this.mUICityEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICityEdit.SearchProperties[WinEdit.PropertyNames.Name] = "City";
                    this.mUICityEdit.WindowTitles.Add("Create new meter records for building group - Mozilla Firefox");
                    #endregion
                }
                return this.mUICityEdit;
            }
        }
        
        public WinEdit UIStateEdit
        {
            get
            {
                if ((this.mUIStateEdit == null))
                {
                    this.mUIStateEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIStateEdit.SearchProperties[WinEdit.PropertyNames.Name] = "State";
                    this.mUIStateEdit.WindowTitles.Add("Create new meter records for building group - Mozilla Firefox");
                    #endregion
                }
                return this.mUIStateEdit;
            }
        }
        
        public WinEdit UICountryEdit
        {
            get
            {
                if ((this.mUICountryEdit == null))
                {
                    this.mUICountryEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICountryEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Country";
                    this.mUICountryEdit.WindowTitles.Add("Create new meter records for building group - Mozilla Firefox");
                    #endregion
                }
                return this.mUICountryEdit;
            }
        }
        
        public WinCustom UIItemCustom
        {
            get
            {
                if ((this.mUIItemCustom == null))
                {
                    this.mUIItemCustom = new WinCustom(this);
                    #region Search Criteria
                    this.mUIItemCustom.SearchProperties["Instance"] = "7";
                    this.mUIItemCustom.WindowTitles.Add("Create new meter records for building group - Mozilla Firefox");
                    #endregion
                }
                return this.mUIItemCustom;
            }
        }
        
        public WinEdit UIZipcodeEdit
        {
            get
            {
                if ((this.mUIZipcodeEdit == null))
                {
                    this.mUIZipcodeEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIZipcodeEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Zip code";
                    this.mUIZipcodeEdit.WindowTitles.Add("Create new meter records for building group - Mozilla Firefox");
                    #endregion
                }
                return this.mUIZipcodeEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIStreetEdit;
        
        private WinEdit mUICityEdit;
        
        private WinEdit mUIStateEdit;
        
        private WinEdit mUICountryEdit;
        
        private WinCustom mUIItemCustom;
        
        private WinEdit mUIZipcodeEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIBuildingpopulationGroup : WinGroup
    {
        
        public UIBuildingpopulationGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Building population ";
            this.WindowTitles.Add("Create new meter records for building group - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinEdit UIInitialbuildingnumbeEdit
        {
            get
            {
                if ((this.mUIInitialbuildingnumbeEdit == null))
                {
                    this.mUIInitialbuildingnumbeEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIInitialbuildingnumbeEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Initial building number";
                    this.mUIInitialbuildingnumbeEdit.WindowTitles.Add("Create new meter records for building group - Mozilla Firefox");
                    #endregion
                }
                return this.mUIInitialbuildingnumbeEdit;
            }
        }
        
        public WinEdit UIFinalbuildingnumberEdit
        {
            get
            {
                if ((this.mUIFinalbuildingnumberEdit == null))
                {
                    this.mUIFinalbuildingnumberEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIFinalbuildingnumberEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Final building number";
                    this.mUIFinalbuildingnumberEdit.WindowTitles.Add("Create new meter records for building group - Mozilla Firefox");
                    #endregion
                }
                return this.mUIFinalbuildingnumberEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIInitialbuildingnumbeEdit;
        
        private WinEdit mUIFinalbuildingnumberEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIApartmentOfficepopulGroup : WinGroup
    {
        
        public UIApartmentOfficepopulGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Apartment/Office population ";
            this.WindowTitles.Add("Create new meter records for building group - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinEdit UIInitialapartmentnumbEdit
        {
            get
            {
                if ((this.mUIInitialapartmentnumbEdit == null))
                {
                    this.mUIInitialapartmentnumbEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIInitialapartmentnumbEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Initial apartment number";
                    this.mUIInitialapartmentnumbEdit.WindowTitles.Add("Create new meter records for building group - Mozilla Firefox");
                    #endregion
                }
                return this.mUIInitialapartmentnumbEdit;
            }
        }
        
        public WinEdit UIFinalapartmentnumberEdit
        {
            get
            {
                if ((this.mUIFinalapartmentnumberEdit == null))
                {
                    this.mUIFinalapartmentnumberEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIFinalapartmentnumberEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Final apartment number";
                    this.mUIFinalapartmentnumberEdit.WindowTitles.Add("Create new meter records for building group - Mozilla Firefox");
                    #endregion
                }
                return this.mUIFinalapartmentnumberEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIInitialapartmentnumbEdit;
        
        private WinEdit mUIFinalapartmentnumberEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIPrimaryIPaddressGroup : WinGroup
    {
        
        public UIPrimaryIPaddressGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Primary IP-address ";
            this.WindowTitles.Add("Create new meter records for building group - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinEdit UIInitialprimaryIPIPswEdit
        {
            get
            {
                if ((this.mUIInitialprimaryIPIPswEdit == null))
                {
                    this.mUIInitialprimaryIPIPswEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIInitialprimaryIPIPswEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Initial primary IP (IPs will be assigned by incrementing this address)";
                    this.mUIInitialprimaryIPIPswEdit.WindowTitles.Add("Create new meter records for building group - Mozilla Firefox");
                    #endregion
                }
                return this.mUIInitialprimaryIPIPswEdit;
            }
        }
        
        public WinEdit UIInititialIP2Edit
        {
            get
            {
                if ((this.mUIInititialIP2Edit == null))
                {
                    this.mUIInititialIP2Edit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIInititialIP2Edit.SearchProperties[WinEdit.PropertyNames.Name] = "Inititial IP2";
                    this.mUIInititialIP2Edit.WindowTitles.Add("Create new meter records for building group - Mozilla Firefox");
                    #endregion
                }
                return this.mUIInititialIP2Edit;
            }
        }
        
        public WinEdit UIInititialIP3Edit
        {
            get
            {
                if ((this.mUIInititialIP3Edit == null))
                {
                    this.mUIInititialIP3Edit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIInititialIP3Edit.SearchProperties[WinEdit.PropertyNames.Name] = "Inititial IP3";
                    this.mUIInititialIP3Edit.WindowTitles.Add("Create new meter records for building group - Mozilla Firefox");
                    #endregion
                }
                return this.mUIInititialIP3Edit;
            }
        }
        
        public WinEdit UIInititialIP4Edit
        {
            get
            {
                if ((this.mUIInititialIP4Edit == null))
                {
                    this.mUIInititialIP4Edit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIInititialIP4Edit.SearchProperties[WinEdit.PropertyNames.Name] = "Inititial IP4";
                    this.mUIInititialIP4Edit.WindowTitles.Add("Create new meter records for building group - Mozilla Firefox");
                    #endregion
                }
                return this.mUIInititialIP4Edit;
            }
        }
        
        public WinEdit UIInitialprimaryportwiEdit
        {
            get
            {
                if ((this.mUIInitialprimaryportwiEdit == null))
                {
                    this.mUIInitialprimaryportwiEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIInitialprimaryportwiEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Initial primary port (will be the same for all meters)";
                    this.mUIInitialprimaryportwiEdit.WindowTitles.Add("Create new meter records for building group - Mozilla Firefox");
                    #endregion
                }
                return this.mUIInitialprimaryportwiEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIInitialprimaryIPIPswEdit;
        
        private WinEdit mUIInititialIP2Edit;
        
        private WinEdit mUIInititialIP3Edit;
        
        private WinEdit mUIInititialIP4Edit;
        
        private WinEdit mUIInitialprimaryportwiEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UISecondaryIPaddressGroup : WinGroup
    {
        
        public UISecondaryIPaddressGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Secondary IP-address ";
            this.WindowTitles.Add("Create new meter records for building group - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinEdit UIInitialsecondaryIPIPEdit
        {
            get
            {
                if ((this.mUIInitialsecondaryIPIPEdit == null))
                {
                    this.mUIInitialsecondaryIPIPEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIInitialsecondaryIPIPEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Initial secondary IP (IPs will be assigned by incrementing this address)";
                    this.mUIInitialsecondaryIPIPEdit.WindowTitles.Add("Create new meter records for building group - Mozilla Firefox");
                    #endregion
                }
                return this.mUIInitialsecondaryIPIPEdit;
            }
        }
        
        public WinEdit UIInititialIP2Edit
        {
            get
            {
                if ((this.mUIInititialIP2Edit == null))
                {
                    this.mUIInititialIP2Edit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIInititialIP2Edit.SearchProperties[WinEdit.PropertyNames.Name] = "Inititial IP2";
                    this.mUIInititialIP2Edit.WindowTitles.Add("Create new meter records for building group - Mozilla Firefox");
                    #endregion
                }
                return this.mUIInititialIP2Edit;
            }
        }
        
        public WinEdit UIInititialIP3Edit
        {
            get
            {
                if ((this.mUIInititialIP3Edit == null))
                {
                    this.mUIInititialIP3Edit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIInititialIP3Edit.SearchProperties[WinEdit.PropertyNames.Name] = "Inititial IP3";
                    this.mUIInititialIP3Edit.WindowTitles.Add("Create new meter records for building group - Mozilla Firefox");
                    #endregion
                }
                return this.mUIInititialIP3Edit;
            }
        }
        
        public WinEdit UIInititialIP4Edit
        {
            get
            {
                if ((this.mUIInititialIP4Edit == null))
                {
                    this.mUIInititialIP4Edit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIInititialIP4Edit.SearchProperties[WinEdit.PropertyNames.Name] = "Inititial IP4";
                    this.mUIInititialIP4Edit.WindowTitles.Add("Create new meter records for building group - Mozilla Firefox");
                    #endregion
                }
                return this.mUIInititialIP4Edit;
            }
        }
        
        public WinEdit UIInitialsecondaryportEdit
        {
            get
            {
                if ((this.mUIInitialsecondaryportEdit == null))
                {
                    this.mUIInitialsecondaryportEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIInitialsecondaryportEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Initial secondary port (will be the same for all meters)";
                    this.mUIInitialsecondaryportEdit.WindowTitles.Add("Create new meter records for building group - Mozilla Firefox");
                    #endregion
                }
                return this.mUIInitialsecondaryportEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIInitialsecondaryIPIPEdit;
        
        private WinEdit mUIInititialIP2Edit;
        
        private WinEdit mUIInititialIP3Edit;
        
        private WinEdit mUIInititialIP4Edit;
        
        private WinEdit mUIInitialsecondaryportEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UICreatenewmeterrecordDocument : WinControl
    {
        
        public UICreatenewmeterrecordDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Create new meter records for building group";
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "Document";
            this.WindowTitles.Add("Create new meter records for building group - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinButton UICreateButton
        {
            get
            {
                if ((this.mUICreateButton == null))
                {
                    this.mUICreateButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICreateButton.SearchProperties[WinButton.PropertyNames.Name] = "Create";
                    this.mUICreateButton.WindowTitles.Add("Create new meter records for building group - Mozilla Firefox");
                    #endregion
                }
                return this.mUICreateButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICreateButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIGroupsHyperlink : WinHyperlink
    {
        
        public UIGroupsHyperlink(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinHyperlink.PropertyNames.Name] = "Groups";
            this.WindowTitles.Add("Meters associated with group \"test buildings\" - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinEdit UIGroupsEdit
        {
            get
            {
                if ((this.mUIGroupsEdit == null))
                {
                    this.mUIGroupsEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIGroupsEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Groups";
                    this.mUIGroupsEdit.WindowTitles.Add("Meters associated with group \"test buildings\" - Mozilla Firefox");
                    #endregion
                }
                return this.mUIGroupsEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIGroupsEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItemPropertyPage : WinControl
    {
        
        public UIItemPropertyPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "PropertyPage";
            this.WindowTitles.Add("Create new meter records for IP-range - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinControl UICreatenewmeterrecordDocument
        {
            get
            {
                if ((this.mUICreatenewmeterrecordDocument == null))
                {
                    this.mUICreatenewmeterrecordDocument = new WinControl(this);
                    #region Search Criteria
                    this.mUICreatenewmeterrecordDocument.SearchProperties[UITestControl.PropertyNames.Name] = "Create new meter records for IP-range";
                    this.mUICreatenewmeterrecordDocument.SearchProperties[UITestControl.PropertyNames.ControlType] = "Document";
                    this.mUICreatenewmeterrecordDocument.WindowTitles.Add("Create new meter records for IP-range - Mozilla Firefox");
                    #endregion
                }
                return this.mUICreatenewmeterrecordDocument;
            }
        }
        #endregion
        
        #region Fields
        private WinControl mUICreatenewmeterrecordDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UICreatenewmeterrecordDocument1 : WinControl
    {
        
        public UICreatenewmeterrecordDocument1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Create new meter records for IP-range";
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "Document";
            this.WindowTitles.Add("Create new meter records for IP-range - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinButton UICreateButton
        {
            get
            {
                if ((this.mUICreateButton == null))
                {
                    this.mUICreateButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICreateButton.SearchProperties[WinButton.PropertyNames.Name] = "Create";
                    this.mUICreateButton.WindowTitles.Add("Create new meter records for IP-range - Mozilla Firefox");
                    #endregion
                }
                return this.mUICreateButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICreateButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDeletemeterDocument : WinControl
    {
        
        public UIDeletemeterDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Delete meter";
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "Document";
            this.WindowTitles.Add("Delete meter - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinButton UIDeleteButton
        {
            get
            {
                if ((this.mUIDeleteButton == null))
                {
                    this.mUIDeleteButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIDeleteButton.SearchProperties[WinButton.PropertyNames.Name] = "Delete";
                    this.mUIDeleteButton.WindowTitles.Add("Delete meter - Mozilla Firefox");
                    #endregion
                }
                return this.mUIDeleteButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIDeleteButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIMeterGroupsListItem : WinListItem
    {
        
        public UIMeterGroupsListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "Meter Groups";
            this.WindowTitles.Add("Welcome Rational City - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinHyperlink UIMeterGroupsHyperlink
        {
            get
            {
                if ((this.mUIMeterGroupsHyperlink == null))
                {
                    this.mUIMeterGroupsHyperlink = new WinHyperlink(this);
                    #region Search Criteria
                    this.mUIMeterGroupsHyperlink.SearchProperties[WinHyperlink.PropertyNames.Name] = "Meter Groups";
                    this.mUIMeterGroupsHyperlink.WindowTitles.Add("Welcome Rational City - Mozilla Firefox");
                    #endregion
                }
                return this.mUIMeterGroupsHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private WinHyperlink mUIMeterGroupsHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIMeterGroupsHyperlink : WinHyperlink
    {
        
        public UIMeterGroupsHyperlink(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinHyperlink.PropertyNames.Name] = "Meter Groups";
            this.WindowTitles.Add("Meter groups - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinEdit UIMeterGroupsEdit
        {
            get
            {
                if ((this.mUIMeterGroupsEdit == null))
                {
                    this.mUIMeterGroupsEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIMeterGroupsEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Meter Groups";
                    this.mUIMeterGroupsEdit.WindowTitles.Add("Meter groups - Mozilla Firefox");
                    #endregion
                }
                return this.mUIMeterGroupsEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIMeterGroupsEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDeletethedevicegroupDocument : WinControl
    {
        
        public UIDeletethedevicegroupDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Delete the device group";
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "Document";
            this.WindowTitles.Add("Delete the device group - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinButton UIDeleteButton
        {
            get
            {
                if ((this.mUIDeleteButton == null))
                {
                    this.mUIDeleteButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIDeleteButton.SearchProperties[WinButton.PropertyNames.Name] = "Delete";
                    this.mUIDeleteButton.WindowTitles.Add("Delete the device group - Mozilla Firefox");
                    #endregion
                }
                return this.mUIDeleteButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIDeleteButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDeleteGroupHyperlink : WinHyperlink
    {
        
        public UIDeleteGroupHyperlink(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinHyperlink.PropertyNames.Name] = "Delete Group";
            this.WindowTitles.Add("Meter groups - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinEdit UIDeleteGroupEdit
        {
            get
            {
                if ((this.mUIDeleteGroupEdit == null))
                {
                    this.mUIDeleteGroupEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIDeleteGroupEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Delete Group";
                    this.mUIDeleteGroupEdit.WindowTitles.Add("Meter groups - Mozilla Firefox");
                    #endregion
                }
                return this.mUIDeleteGroupEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIDeleteGroupEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIMetergroupsInternetEWindow : BrowserWindow
    {
        
        public UIMetergroupsInternetEWindow()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Meter groups";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Meter groups");
            this.WindowTitles.Add("Meters associated with group \"tst\"");
            this.WindowTitles.Add("Delete meter");
            this.WindowTitles.Add("Delete the device group");
            this.WindowTitles.Add("Create new meter records for IP-range");
            this.WindowTitles.Add("Create new meter records for building group");
            this.WindowTitles.Add("Meters associated with group \"single\"");
            this.WindowTitles.Add("Blank Page");
            this.WindowTitles.Add("Welcome Rational City");
            this.WindowTitles.Add("Log On");
            this.WindowTitles.Add("Edit meter group properties");
            this.WindowTitles.Add("Details of meter group");
            this.WindowTitles.Add("Create new device associated with group \"single\"");
            this.WindowTitles.Add("Edit meter properties");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIMetergroupsDocument UIMetergroupsDocument
        {
            get
            {
                if ((this.mUIMetergroupsDocument == null))
                {
                    this.mUIMetergroupsDocument = new UIMetergroupsDocument(this);
                }
                return this.mUIMetergroupsDocument;
            }
        }
        
        public UIMetersassociatedwithDocument UIMetersassociatedwithDocument
        {
            get
            {
                if ((this.mUIMetersassociatedwithDocument == null))
                {
                    this.mUIMetersassociatedwithDocument = new UIMetersassociatedwithDocument(this);
                }
                return this.mUIMetersassociatedwithDocument;
            }
        }
        
        public UIDeletemeterDocument1 UIDeletemeterDocument
        {
            get
            {
                if ((this.mUIDeletemeterDocument == null))
                {
                    this.mUIDeletemeterDocument = new UIDeletemeterDocument1(this);
                }
                return this.mUIDeletemeterDocument;
            }
        }
        
        public UIDeletethedevicegroupDocument1 UIDeletethedevicegroupDocument
        {
            get
            {
                if ((this.mUIDeletethedevicegroupDocument == null))
                {
                    this.mUIDeletethedevicegroupDocument = new UIDeletethedevicegroupDocument1(this);
                }
                return this.mUIDeletethedevicegroupDocument;
            }
        }
        
        public UICreatenewmeterrecordDocument2 UICreatenewmeterrecordDocument
        {
            get
            {
                if ((this.mUICreatenewmeterrecordDocument == null))
                {
                    this.mUICreatenewmeterrecordDocument = new UICreatenewmeterrecordDocument2(this);
                }
                return this.mUICreatenewmeterrecordDocument;
            }
        }
        
        public UIDeletethedevicegroupDocument11 UIDeletethedevicegroupDocument1
        {
            get
            {
                if ((this.mUIDeletethedevicegroupDocument1 == null))
                {
                    this.mUIDeletethedevicegroupDocument1 = new UIDeletethedevicegroupDocument11(this);
                }
                return this.mUIDeletethedevicegroupDocument1;
            }
        }
        
        public UICreatenewmeterrecordDocument11 UICreatenewmeterrecordDocument1
        {
            get
            {
                if ((this.mUICreatenewmeterrecordDocument1 == null))
                {
                    this.mUICreatenewmeterrecordDocument1 = new UICreatenewmeterrecordDocument11(this);
                }
                return this.mUICreatenewmeterrecordDocument1;
            }
        }
        
        public UIDeletethedevicegroupDocument2 UIDeletethedevicegroupDocument2
        {
            get
            {
                if ((this.mUIDeletethedevicegroupDocument2 == null))
                {
                    this.mUIDeletethedevicegroupDocument2 = new UIDeletethedevicegroupDocument2(this);
                }
                return this.mUIDeletethedevicegroupDocument2;
            }
        }
        
        public UIMetersassociatedwithDocument1 UIMetersassociatedwithDocument1
        {
            get
            {
                if ((this.mUIMetersassociatedwithDocument1 == null))
                {
                    this.mUIMetersassociatedwithDocument1 = new UIMetersassociatedwithDocument1(this);
                }
                return this.mUIMetersassociatedwithDocument1;
            }
        }
        
        public UIDeletemeterDocument11 UIDeletemeterDocument1
        {
            get
            {
                if ((this.mUIDeletemeterDocument1 == null))
                {
                    this.mUIDeletemeterDocument1 = new UIDeletemeterDocument11(this);
                }
                return this.mUIDeletemeterDocument1;
            }
        }
        
        public UIDeletethedevicegroupDocument3 UIDeletethedevicegroupDocument3
        {
            get
            {
                if ((this.mUIDeletethedevicegroupDocument3 == null))
                {
                    this.mUIDeletethedevicegroupDocument3 = new UIDeletethedevicegroupDocument3(this);
                }
                return this.mUIDeletethedevicegroupDocument3;
            }
        }
        #endregion
        
        #region Fields
        private UIMetergroupsDocument mUIMetergroupsDocument;
        
        private UIMetersassociatedwithDocument mUIMetersassociatedwithDocument;
        
        private UIDeletemeterDocument1 mUIDeletemeterDocument;
        
        private UIDeletethedevicegroupDocument1 mUIDeletethedevicegroupDocument;
        
        private UICreatenewmeterrecordDocument2 mUICreatenewmeterrecordDocument;
        
        private UIDeletethedevicegroupDocument11 mUIDeletethedevicegroupDocument1;
        
        private UICreatenewmeterrecordDocument11 mUICreatenewmeterrecordDocument1;
        
        private UIDeletethedevicegroupDocument2 mUIDeletethedevicegroupDocument2;
        
        private UIMetersassociatedwithDocument1 mUIMetersassociatedwithDocument1;
        
        private UIDeletemeterDocument11 mUIDeletemeterDocument1;
        
        private UIDeletethedevicegroupDocument3 mUIDeletethedevicegroupDocument3;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIMetergroupsDocument : HtmlDocument
    {
        
        public UIMetergroupsDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Meter groups";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Group";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost:2374/Group";
            this.WindowTitles.Add("Meter groups");
            #endregion
        }
        
        #region Properties
        public UIMenuCustom UIMenuCustom
        {
            get
            {
                if ((this.mUIMenuCustom == null))
                {
                    this.mUIMenuCustom = new UIMenuCustom(this);
                }
                return this.mUIMenuCustom;
            }
        }
        
        public UIGridPane UIGridPane
        {
            get
            {
                if ((this.mUIGridPane == null))
                {
                    this.mUIGridPane = new UIGridPane(this);
                }
                return this.mUIGridPane;
            }
        }
        
        public UIMainPane UIMainPane
        {
            get
            {
                if ((this.mUIMainPane == null))
                {
                    this.mUIMainPane = new UIMainPane(this);
                }
                return this.mUIMainPane;
            }
        }
        
        public UIGridPane1 UIGridPane1
        {
            get
            {
                if ((this.mUIGridPane1 == null))
                {
                    this.mUIGridPane1 = new UIGridPane1(this);
                }
                return this.mUIGridPane1;
            }
        }
        
        public UIGridPane2 UIGridPane2
        {
            get
            {
                if ((this.mUIGridPane2 == null))
                {
                    this.mUIGridPane2 = new UIGridPane2(this);
                }
                return this.mUIGridPane2;
            }
        }
        
        public UIGridPane3 UIGridPane3
        {
            get
            {
                if ((this.mUIGridPane3 == null))
                {
                    this.mUIGridPane3 = new UIGridPane3(this);
                }
                return this.mUIGridPane3;
            }
        }
        #endregion
        
        #region Fields
        private UIMenuCustom mUIMenuCustom;
        
        private UIGridPane mUIGridPane;
        
        private UIMainPane mUIMainPane;
        
        private UIGridPane1 mUIGridPane1;
        
        private UIGridPane2 mUIGridPane2;
        
        private UIGridPane3 mUIGridPane3;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIMenuCustom : HtmlCustom
    {
        
        public UIMenuCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties["Id"] = "menu";
            this.SearchProperties[UITestControl.PropertyNames.Name] = null;
            this.SearchProperties["TagName"] = "UL";
            this.FilterProperties["Class"] = null;
            this.FilterProperties["ControlDefinition"] = "id=menu";
            this.FilterProperties["TagInstance"] = "1";
            this.WindowTitles.Add("Meter groups");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIMeterGroupsHyperlink
        {
            get
            {
                if ((this.mUIMeterGroupsHyperlink == null))
                {
                    this.mUIMeterGroupsHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIMeterGroupsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIMeterGroupsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIMeterGroupsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIMeterGroupsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Meter Groups";
                    this.mUIMeterGroupsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Group";
                    this.mUIMeterGroupsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIMeterGroupsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:2374/Group";
                    this.mUIMeterGroupsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIMeterGroupsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/Group\"";
                    this.mUIMeterGroupsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "1";
                    this.mUIMeterGroupsHyperlink.WindowTitles.Add("Meter groups");
                    #endregion
                }
                return this.mUIMeterGroupsHyperlink;
            }
        }
        
        public HtmlHyperlink UILogOffHyperlink
        {
            get
            {
                if ((this.mUILogOffHyperlink == null))
                {
                    this.mUILogOffHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUILogOffHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUILogOffHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUILogOffHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUILogOffHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Log Off";
                    this.mUILogOffHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Account/LogOff";
                    this.mUILogOffHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUILogOffHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:2374/Account/LogOff";
                    this.mUILogOffHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUILogOffHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/Account/LogOff\"";
                    this.mUILogOffHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "3";
                    this.mUILogOffHyperlink.WindowTitles.Add("Meter groups");
                    #endregion
                }
                return this.mUILogOffHyperlink;
            }
        }
        
        public HtmlHyperlink UIHomeHyperlink
        {
            get
            {
                if ((this.mUIHomeHyperlink == null))
                {
                    this.mUIHomeHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIHomeHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIHomeHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIHomeHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIHomeHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Home";
                    this.mUIHomeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/";
                    this.mUIHomeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIHomeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:2374/";
                    this.mUIHomeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIHomeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/\"";
                    this.mUIHomeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "2";
                    this.mUIHomeHyperlink.WindowTitles.Add("Meter groups");
                    #endregion
                }
                return this.mUIHomeHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIMeterGroupsHyperlink;
        
        private HtmlHyperlink mUILogOffHyperlink;
        
        private HtmlHyperlink mUIHomeHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIGridPane : HtmlDiv
    {
        
        public UIGridPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "grid";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "GroupMeter TypeDay Mode\r\ntst XML-data";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=grid";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "7";
            this.WindowTitles.Add("Meter groups");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIMetersHyperlink
        {
            get
            {
                if ((this.mUIMetersHyperlink == null))
                {
                    this.mUIMetersHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIMetersHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIMetersHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIMetersHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIMetersHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Meters";
                    this.mUIMetersHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Device/GroupDevices/92";
                    this.mUIMetersHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIMetersHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:2374/Device/GroupDevices/92";
                    this.mUIMetersHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIMetersHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/Device/GroupDevices/92\"";
                    this.mUIMetersHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "4";
                    this.mUIMetersHyperlink.WindowTitles.Add("Meter groups");
                    #endregion
                }
                return this.mUIMetersHyperlink;
            }
        }
        
        public HtmlHyperlink UIDeleteGroupHyperlink
        {
            get
            {
                if ((this.mUIDeleteGroupHyperlink == null))
                {
                    this.mUIDeleteGroupHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIDeleteGroupHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIDeleteGroupHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIDeleteGroupHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIDeleteGroupHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Delete Group";
                    this.mUIDeleteGroupHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Group/Delete/92";
                    this.mUIDeleteGroupHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIDeleteGroupHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:2374/Group/Delete/92";
                    this.mUIDeleteGroupHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIDeleteGroupHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/Group/Delete/92\"";
                    this.mUIDeleteGroupHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "7";
                    this.mUIDeleteGroupHyperlink.WindowTitles.Add("Meter groups");
                    #endregion
                }
                return this.mUIDeleteGroupHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIMetersHyperlink;
        
        private HtmlHyperlink mUIDeleteGroupHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIMainPane : HtmlDiv
    {
        
        public UIMainPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "main";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Meter groups\r\nAdd Meters for Buildings |";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=main";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "6";
            this.WindowTitles.Add("Meter groups");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIAddMetersforIPrangeHyperlink
        {
            get
            {
                if ((this.mUIAddMetersforIPrangeHyperlink == null))
                {
                    this.mUIAddMetersforIPrangeHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIAddMetersforIPrangeHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIAddMetersforIPrangeHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIAddMetersforIPrangeHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIAddMetersforIPrangeHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Add Meters for IP-range";
                    this.mUIAddMetersforIPrangeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Group/AddMetersForIPs";
                    this.mUIAddMetersforIPrangeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIAddMetersforIPrangeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:2374/Group/AddMetersForIPs";
                    this.mUIAddMetersforIPrangeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIAddMetersforIPrangeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/Group/AddMetersForIPs\"";
                    this.mUIAddMetersforIPrangeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "2";
                    this.mUIAddMetersforIPrangeHyperlink.WindowTitles.Add("Meter groups");
                    #endregion
                }
                return this.mUIAddMetersforIPrangeHyperlink;
            }
        }
        
        public HtmlHyperlink UIAddMetersforBuildingHyperlink
        {
            get
            {
                if ((this.mUIAddMetersforBuildingHyperlink == null))
                {
                    this.mUIAddMetersforBuildingHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIAddMetersforBuildingHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIAddMetersforBuildingHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIAddMetersforBuildingHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIAddMetersforBuildingHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Add Meters for Buildings";
                    this.mUIAddMetersforBuildingHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Group/AddMetersForBuildings";
                    this.mUIAddMetersforBuildingHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIAddMetersforBuildingHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:2374/Group/AddMetersForBuildings";
                    this.mUIAddMetersforBuildingHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIAddMetersforBuildingHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/Group/AddMetersForBuildings\"";
                    this.mUIAddMetersforBuildingHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "1";
                    this.mUIAddMetersforBuildingHyperlink.WindowTitles.Add("Meter groups");
                    #endregion
                }
                return this.mUIAddMetersforBuildingHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIAddMetersforIPrangeHyperlink;
        
        private HtmlHyperlink mUIAddMetersforBuildingHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIGridPane1 : HtmlDiv
    {
        
        public UIGridPane1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "grid";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "GroupMeter TypeDay Mode\r\nips XML-data";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=grid";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "7";
            this.WindowTitles.Add("Meter groups");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIDeleteGroupHyperlink
        {
            get
            {
                if ((this.mUIDeleteGroupHyperlink == null))
                {
                    this.mUIDeleteGroupHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIDeleteGroupHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIDeleteGroupHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIDeleteGroupHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIDeleteGroupHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Delete Group";
                    this.mUIDeleteGroupHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Group/Delete/95";
                    this.mUIDeleteGroupHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIDeleteGroupHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:2374/Group/Delete/95";
                    this.mUIDeleteGroupHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIDeleteGroupHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/Group/Delete/95\"";
                    this.mUIDeleteGroupHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "7";
                    this.mUIDeleteGroupHyperlink.WindowTitles.Add("Meter groups");
                    #endregion
                }
                return this.mUIDeleteGroupHyperlink;
            }
        }
        
        public HtmlHyperlink UIDeleteGroupHyperlink1
        {
            get
            {
                if ((this.mUIDeleteGroupHyperlink1 == null))
                {
                    this.mUIDeleteGroupHyperlink1 = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIDeleteGroupHyperlink1.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIDeleteGroupHyperlink1.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIDeleteGroupHyperlink1.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIDeleteGroupHyperlink1.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Delete Group";
                    this.mUIDeleteGroupHyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Group/Delete/98";
                    this.mUIDeleteGroupHyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIDeleteGroupHyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:2374/Group/Delete/98";
                    this.mUIDeleteGroupHyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIDeleteGroupHyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/Group/Delete/98\"";
                    this.mUIDeleteGroupHyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "7";
                    this.mUIDeleteGroupHyperlink1.WindowTitles.Add("Meter groups");
                    #endregion
                }
                return this.mUIDeleteGroupHyperlink1;
            }
        }
        
        public HtmlHyperlink UIDeleteGroupHyperlink2
        {
            get
            {
                if ((this.mUIDeleteGroupHyperlink2 == null))
                {
                    this.mUIDeleteGroupHyperlink2 = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIDeleteGroupHyperlink2.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIDeleteGroupHyperlink2.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIDeleteGroupHyperlink2.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIDeleteGroupHyperlink2.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Delete Group";
                    this.mUIDeleteGroupHyperlink2.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Group/Delete/106";
                    this.mUIDeleteGroupHyperlink2.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIDeleteGroupHyperlink2.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:2374/Group/Delete/106";
                    this.mUIDeleteGroupHyperlink2.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIDeleteGroupHyperlink2.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/Group/Delete/106\"";
                    this.mUIDeleteGroupHyperlink2.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "7";
                    this.mUIDeleteGroupHyperlink2.WindowTitles.Add("Meter groups");
                    #endregion
                }
                return this.mUIDeleteGroupHyperlink2;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIDeleteGroupHyperlink;
        
        private HtmlHyperlink mUIDeleteGroupHyperlink1;
        
        private HtmlHyperlink mUIDeleteGroupHyperlink2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIGridPane2 : HtmlDiv
    {
        
        public UIGridPane2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "grid";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "GroupMeter TypeDay Mode\r\nbld XML-data";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=grid";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "7";
            this.WindowTitles.Add("Meter groups");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIDeleteGroupHyperlink
        {
            get
            {
                if ((this.mUIDeleteGroupHyperlink == null))
                {
                    this.mUIDeleteGroupHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIDeleteGroupHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIDeleteGroupHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIDeleteGroupHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIDeleteGroupHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Delete Group";
                    this.mUIDeleteGroupHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Group/Delete/96";
                    this.mUIDeleteGroupHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIDeleteGroupHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:2374/Group/Delete/96";
                    this.mUIDeleteGroupHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIDeleteGroupHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/Group/Delete/96\"";
                    this.mUIDeleteGroupHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "7";
                    this.mUIDeleteGroupHyperlink.WindowTitles.Add("Meter groups");
                    #endregion
                }
                return this.mUIDeleteGroupHyperlink;
            }
        }
        
        public HtmlHyperlink UIDeleteGroupHyperlink1
        {
            get
            {
                if ((this.mUIDeleteGroupHyperlink1 == null))
                {
                    this.mUIDeleteGroupHyperlink1 = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIDeleteGroupHyperlink1.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIDeleteGroupHyperlink1.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIDeleteGroupHyperlink1.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIDeleteGroupHyperlink1.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Delete Group";
                    this.mUIDeleteGroupHyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Group/Delete/100";
                    this.mUIDeleteGroupHyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIDeleteGroupHyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:2374/Group/Delete/100";
                    this.mUIDeleteGroupHyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIDeleteGroupHyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/Group/Delete/100\"";
                    this.mUIDeleteGroupHyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "7";
                    this.mUIDeleteGroupHyperlink1.WindowTitles.Add("Meter groups");
                    #endregion
                }
                return this.mUIDeleteGroupHyperlink1;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIDeleteGroupHyperlink;
        
        private HtmlHyperlink mUIDeleteGroupHyperlink1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIGridPane3 : HtmlDiv
    {
        
        public UIGridPane3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "grid";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "GroupMeter TypeDay Mode\r\nsingle Satec EM";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=grid";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "7";
            this.WindowTitles.Add("Meter groups");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIMetersHyperlink
        {
            get
            {
                if ((this.mUIMetersHyperlink == null))
                {
                    this.mUIMetersHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIMetersHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIMetersHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIMetersHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIMetersHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Meters";
                    this.mUIMetersHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Device/GroupDevices/97";
                    this.mUIMetersHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIMetersHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:2374/Device/GroupDevices/97";
                    this.mUIMetersHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIMetersHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/Device/GroupDevices/97\"";
                    this.mUIMetersHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "4";
                    this.mUIMetersHyperlink.WindowTitles.Add("Meter groups");
                    #endregion
                }
                return this.mUIMetersHyperlink;
            }
        }
        
        public HtmlHyperlink UIDeleteGroupHyperlink
        {
            get
            {
                if ((this.mUIDeleteGroupHyperlink == null))
                {
                    this.mUIDeleteGroupHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIDeleteGroupHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIDeleteGroupHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIDeleteGroupHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIDeleteGroupHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Delete Group";
                    this.mUIDeleteGroupHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Group/Delete/97";
                    this.mUIDeleteGroupHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIDeleteGroupHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:2374/Group/Delete/97";
                    this.mUIDeleteGroupHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIDeleteGroupHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/Group/Delete/97\"";
                    this.mUIDeleteGroupHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "7";
                    this.mUIDeleteGroupHyperlink.WindowTitles.Add("Meter groups");
                    #endregion
                }
                return this.mUIDeleteGroupHyperlink;
            }
        }
        
        public HtmlHyperlink UIMetersHyperlink1
        {
            get
            {
                if ((this.mUIMetersHyperlink1 == null))
                {
                    this.mUIMetersHyperlink1 = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIMetersHyperlink1.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIMetersHyperlink1.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIMetersHyperlink1.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIMetersHyperlink1.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Meters";
                    this.mUIMetersHyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Device/GroupDevices/102";
                    this.mUIMetersHyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIMetersHyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:2374/Device/GroupDevices/102";
                    this.mUIMetersHyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIMetersHyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/Device/GroupDevices/102\"";
                    this.mUIMetersHyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "4";
                    this.mUIMetersHyperlink1.WindowTitles.Add("Meter groups");
                    #endregion
                }
                return this.mUIMetersHyperlink1;
            }
        }
        
        public HtmlHyperlink UIDeleteGroupHyperlink1
        {
            get
            {
                if ((this.mUIDeleteGroupHyperlink1 == null))
                {
                    this.mUIDeleteGroupHyperlink1 = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIDeleteGroupHyperlink1.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIDeleteGroupHyperlink1.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIDeleteGroupHyperlink1.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIDeleteGroupHyperlink1.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Delete Group";
                    this.mUIDeleteGroupHyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Group/Delete/102";
                    this.mUIDeleteGroupHyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIDeleteGroupHyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:2374/Group/Delete/102";
                    this.mUIDeleteGroupHyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIDeleteGroupHyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/Group/Delete/102\"";
                    this.mUIDeleteGroupHyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "7";
                    this.mUIDeleteGroupHyperlink1.WindowTitles.Add("Meter groups");
                    #endregion
                }
                return this.mUIDeleteGroupHyperlink1;
            }
        }
        
        public HtmlHyperlink UIEditHyperlink
        {
            get
            {
                if ((this.mUIEditHyperlink == null))
                {
                    this.mUIEditHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIEditHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIEditHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIEditHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIEditHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Edit";
                    this.mUIEditHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Group/Edit/113";
                    this.mUIEditHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIEditHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:2374/Group/Edit/113";
                    this.mUIEditHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIEditHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/Group//113\"";
                    this.mUIEditHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "5";
                    this.mUIEditHyperlink.WindowTitles.Add("Meter groups");
                    #endregion
                }
                return this.mUIEditHyperlink;
            }
        }
        
        public HtmlHyperlink UIDetailsHyperlink
        {
            get
            {
                if ((this.mUIDetailsHyperlink == null))
                {
                    this.mUIDetailsHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIDetailsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIDetailsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIDetailsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIDetailsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Details";
                    this.mUIDetailsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Group/Details/150";
                    this.mUIDetailsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIDetailsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:2374/Group/Details/150";
                    this.mUIDetailsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIDetailsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/Group//150\"";
                    this.mUIDetailsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "6";
                    this.mUIDetailsHyperlink.WindowTitles.Add("Meter groups");
                    #endregion
                }
                return this.mUIDetailsHyperlink;
            }
        }
        
        public HtmlHyperlink UIMetersHyperlink2
        {
            get
            {
                if ((this.mUIMetersHyperlink2 == null))
                {
                    this.mUIMetersHyperlink2 = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIMetersHyperlink2.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIMetersHyperlink2.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIMetersHyperlink2.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIMetersHyperlink2.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Meters";
                    this.mUIMetersHyperlink2.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Device/GroupDevices/153";
                    this.mUIMetersHyperlink2.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIMetersHyperlink2.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:2374/Device/GroupDevices/153";
                    this.mUIMetersHyperlink2.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIMetersHyperlink2.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/Device/GroupDevices/153\"";
                    this.mUIMetersHyperlink2.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "4";
                    this.mUIMetersHyperlink2.WindowTitles.Add("Meter groups");
                    #endregion
                }
                return this.mUIMetersHyperlink2;
            }
        }
        
        public HtmlHyperlink UIMetersHyperlink3
        {
            get
            {
                if ((this.mUIMetersHyperlink3 == null))
                {
                    this.mUIMetersHyperlink3 = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIMetersHyperlink3.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIMetersHyperlink3.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIMetersHyperlink3.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIMetersHyperlink3.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Meters";
                    this.mUIMetersHyperlink3.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Device/GroupDevices/170";
                    this.mUIMetersHyperlink3.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIMetersHyperlink3.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:2374/Device/GroupDevices/170";
                    this.mUIMetersHyperlink3.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIMetersHyperlink3.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/Device/GroupDevices/170\"";
                    this.mUIMetersHyperlink3.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "4";
                    this.mUIMetersHyperlink3.WindowTitles.Add("Meter groups");
                    #endregion
                }
                return this.mUIMetersHyperlink3;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIMetersHyperlink;
        
        private HtmlHyperlink mUIDeleteGroupHyperlink;
        
        private HtmlHyperlink mUIMetersHyperlink1;
        
        private HtmlHyperlink mUIDeleteGroupHyperlink1;
        
        private HtmlHyperlink mUIEditHyperlink;
        
        private HtmlHyperlink mUIDetailsHyperlink;
        
        private HtmlHyperlink mUIMetersHyperlink2;
        
        private HtmlHyperlink mUIMetersHyperlink3;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIMetersassociatedwithDocument : HtmlDocument
    {
        
        public UIMetersassociatedwithDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Meters associated with group \"tst\"";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Device/GroupDevices/92";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost:2374/Device/GroupDevices/92";
            this.WindowTitles.Add("Meters associated with group \"tst\"");
            #endregion
        }
        
        #region Properties
        public UIGridPane4 UIGridPane
        {
            get
            {
                if ((this.mUIGridPane == null))
                {
                    this.mUIGridPane = new UIGridPane4(this);
                }
                return this.mUIGridPane;
            }
        }
        
        public UIMainPane1 UIMainPane
        {
            get
            {
                if ((this.mUIMainPane == null))
                {
                    this.mUIMainPane = new UIMainPane1(this);
                }
                return this.mUIMainPane;
            }
        }
        #endregion
        
        #region Fields
        private UIGridPane4 mUIGridPane;
        
        private UIMainPane1 mUIMainPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIGridPane4 : HtmlDiv
    {
        
        public UIGridPane4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "grid";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "NameTypeOwnerGroupPrimary IPPrimary Port";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=grid";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "7";
            this.WindowTitles.Add("Meters associated with group \"tst\"");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIDeleteHyperlink
        {
            get
            {
                if ((this.mUIDeleteHyperlink == null))
                {
                    this.mUIDeleteHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIDeleteHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIDeleteHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIDeleteHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIDeleteHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Delete";
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Device/Delete/81348";
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:2374/Device/Delete/81348";
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/Device//81348\"";
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "14";
                    this.mUIDeleteHyperlink.WindowTitles.Add("Meters associated with group \"tst\"");
                    #endregion
                }
                return this.mUIDeleteHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIDeleteHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIMainPane1 : HtmlDiv
    {
        
        public UIMainPane1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "main";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Meters associated with group \"tst\"\r\nCrea";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=main";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "6";
            this.WindowTitles.Add("Meters associated with group \"tst\"");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIGroupsHyperlink
        {
            get
            {
                if ((this.mUIGroupsHyperlink == null))
                {
                    this.mUIGroupsHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIGroupsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIGroupsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIGroupsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIGroupsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Groups";
                    this.mUIGroupsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Group";
                    this.mUIGroupsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIGroupsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:2374/Group";
                    this.mUIGroupsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIGroupsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/Group\"";
                    this.mUIGroupsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "2";
                    this.mUIGroupsHyperlink.WindowTitles.Add("Meters associated with group \"tst\"");
                    #endregion
                }
                return this.mUIGroupsHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIGroupsHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDeletemeterDocument1 : HtmlDocument
    {
        
        public UIDeletemeterDocument1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Delete meter";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Device/Delete/81348";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost:2374/Device/Delete/81348";
            this.WindowTitles.Add("Delete meter");
            #endregion
        }
        
        #region Properties
        public HtmlInputButton UIDeleteButton
        {
            get
            {
                if ((this.mUIDeleteButton == null))
                {
                    this.mUIDeleteButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.Id] = "Submit";
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.Name] = "Submit";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.DisplayText] = "Delete";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.Class] = null;
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "id=Submit value=Delete type=submit name=";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "1";
                    this.mUIDeleteButton.WindowTitles.Add("Delete meter");
                    #endregion
                }
                return this.mUIDeleteButton;
            }
        }
        #endregion
        
        #region Fields
        private HtmlInputButton mUIDeleteButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDeletethedevicegroupDocument1 : HtmlDocument
    {
        
        public UIDeletethedevicegroupDocument1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Delete the device group";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Group/Delete/92";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost:2374/Group/Delete/92";
            this.WindowTitles.Add("Delete the device group");
            #endregion
        }
        
        #region Properties
        public HtmlInputButton UIDeleteButton
        {
            get
            {
                if ((this.mUIDeleteButton == null))
                {
                    this.mUIDeleteButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.Id] = "Submit";
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.Name] = "Submit";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.DisplayText] = "Delete";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.Class] = null;
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "id=Submit value=Delete type=submit name=";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "1";
                    this.mUIDeleteButton.WindowTitles.Add("Delete the device group");
                    #endregion
                }
                return this.mUIDeleteButton;
            }
        }
        #endregion
        
        #region Fields
        private HtmlInputButton mUIDeleteButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UICreatenewmeterrecordDocument2 : HtmlDocument
    {
        
        public UICreatenewmeterrecordDocument2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Create new meter records for IP-range";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Group/AddMetersForIPs";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost:2374/Group/AddMetersForIPs";
            this.WindowTitles.Add("Create new meter records for IP-range");
            #endregion
        }
        
        #region Properties
        public HtmlEdit UIGroupnameEdit
        {
            get
            {
                if ((this.mUIGroupnameEdit == null))
                {
                    this.mUIGroupnameEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIGroupnameEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "Name";
                    this.mUIGroupnameEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "Name";
                    this.mUIGroupnameEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Group name";
                    this.mUIGroupnameEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIGroupnameEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIGroupnameEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUIGroupnameEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "id=Name type=text name=Name";
                    this.mUIGroupnameEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "1";
                    this.mUIGroupnameEdit.WindowTitles.Add("Create new meter records for IP-range");
                    #endregion
                }
                return this.mUIGroupnameEdit;
            }
        }
        
        public HtmlComboBox UIDevicetypeComboBox
        {
            get
            {
                if ((this.mUIDevicetypeComboBox == null))
                {
                    this.mUIDevicetypeComboBox = new HtmlComboBox(this);
                    #region Search Criteria
                    this.mUIDevicetypeComboBox.SearchProperties[HtmlComboBox.PropertyNames.Id] = "DeviceTypeID";
                    this.mUIDevicetypeComboBox.SearchProperties[HtmlComboBox.PropertyNames.Name] = "DeviceTypeID";
                    this.mUIDevicetypeComboBox.FilterProperties[HtmlComboBox.PropertyNames.Size] = "0";
                    this.mUIDevicetypeComboBox.FilterProperties[HtmlComboBox.PropertyNames.LabeledBy] = "Device type";
                    this.mUIDevicetypeComboBox.FilterProperties[HtmlComboBox.PropertyNames.Title] = null;
                    this.mUIDevicetypeComboBox.FilterProperties[HtmlComboBox.PropertyNames.ItemCount] = "1";
                    this.mUIDevicetypeComboBox.FilterProperties[HtmlComboBox.PropertyNames.Class] = null;
                    this.mUIDevicetypeComboBox.FilterProperties[HtmlComboBox.PropertyNames.ControlDefinition] = "id=DeviceTypeID name=DeviceTypeID";
                    this.mUIDevicetypeComboBox.FilterProperties[HtmlComboBox.PropertyNames.TagInstance] = "1";
                    this.mUIDevicetypeComboBox.WindowTitles.Add("Create new meter records for IP-range");
                    #endregion
                }
                return this.mUIDevicetypeComboBox;
            }
        }
        
        public HtmlEdit UIMeternameprefixEdit
        {
            get
            {
                if ((this.mUIMeternameprefixEdit == null))
                {
                    this.mUIMeternameprefixEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIMeternameprefixEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "DeviceNamePrefix";
                    this.mUIMeternameprefixEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "DeviceNamePrefix";
                    this.mUIMeternameprefixEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Meter name prefix";
                    this.mUIMeternameprefixEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIMeternameprefixEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIMeternameprefixEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUIMeternameprefixEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "id=DeviceNamePrefix type=text name=Devic";
                    this.mUIMeternameprefixEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "2";
                    this.mUIMeternameprefixEdit.WindowTitles.Add("Create new meter records for IP-range");
                    #endregion
                }
                return this.mUIMeternameprefixEdit;
            }
        }
        
        public HtmlEdit UIInitialprimaryIPEdit
        {
            get
            {
                if ((this.mUIInitialprimaryIPEdit == null))
                {
                    this.mUIInitialprimaryIPEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIInitialprimaryIPEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "StartingIP1";
                    this.mUIInitialprimaryIPEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "StartingIP1";
                    this.mUIInitialprimaryIPEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Initial primary IP";
                    this.mUIInitialprimaryIPEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIInitialprimaryIPEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIInitialprimaryIPEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUIInitialprimaryIPEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "style=\"WIDTH: 33px\" id=StartingIP1 type=";
                    this.mUIInitialprimaryIPEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "3";
                    this.mUIInitialprimaryIPEdit.WindowTitles.Add("Create new meter records for IP-range");
                    #endregion
                }
                return this.mUIInitialprimaryIPEdit;
            }
        }
        
        public HtmlEdit UIInititialIP2Edit
        {
            get
            {
                if ((this.mUIInititialIP2Edit == null))
                {
                    this.mUIInititialIP2Edit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIInititialIP2Edit.SearchProperties[HtmlEdit.PropertyNames.Id] = "StartingIP2";
                    this.mUIInititialIP2Edit.SearchProperties[HtmlEdit.PropertyNames.Name] = "StartingIP2";
                    this.mUIInititialIP2Edit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Inititial IP2";
                    this.mUIInititialIP2Edit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIInititialIP2Edit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIInititialIP2Edit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUIInititialIP2Edit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "style=\"WIDTH: 33px\" id=StartingIP2 type=";
                    this.mUIInititialIP2Edit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "4";
                    this.mUIInititialIP2Edit.WindowTitles.Add("Create new meter records for IP-range");
                    #endregion
                }
                return this.mUIInititialIP2Edit;
            }
        }
        
        public HtmlEdit UIInititialIP3Edit
        {
            get
            {
                if ((this.mUIInititialIP3Edit == null))
                {
                    this.mUIInititialIP3Edit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIInititialIP3Edit.SearchProperties[HtmlEdit.PropertyNames.Id] = "StartingIP3";
                    this.mUIInititialIP3Edit.SearchProperties[HtmlEdit.PropertyNames.Name] = "StartingIP3";
                    this.mUIInititialIP3Edit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Inititial IP3";
                    this.mUIInititialIP3Edit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIInititialIP3Edit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIInititialIP3Edit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUIInititialIP3Edit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "style=\"WIDTH: 33px\" id=StartingIP3 type=";
                    this.mUIInititialIP3Edit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "5";
                    this.mUIInititialIP3Edit.WindowTitles.Add("Create new meter records for IP-range");
                    #endregion
                }
                return this.mUIInititialIP3Edit;
            }
        }
        
        public HtmlEdit UIInititialIP4Edit
        {
            get
            {
                if ((this.mUIInititialIP4Edit == null))
                {
                    this.mUIInititialIP4Edit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIInititialIP4Edit.SearchProperties[HtmlEdit.PropertyNames.Id] = "StartingIP4";
                    this.mUIInititialIP4Edit.SearchProperties[HtmlEdit.PropertyNames.Name] = "StartingIP4";
                    this.mUIInititialIP4Edit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Inititial IP4";
                    this.mUIInititialIP4Edit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIInititialIP4Edit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIInititialIP4Edit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUIInititialIP4Edit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "style=\"WIDTH: 33px\" id=StartingIP4 type=";
                    this.mUIInititialIP4Edit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "6";
                    this.mUIInititialIP4Edit.WindowTitles.Add("Create new meter records for IP-range");
                    #endregion
                }
                return this.mUIInititialIP4Edit;
            }
        }
        
        public HtmlEdit UIFinalprimaryIPEdit
        {
            get
            {
                if ((this.mUIFinalprimaryIPEdit == null))
                {
                    this.mUIFinalprimaryIPEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIFinalprimaryIPEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "EndingIP1";
                    this.mUIFinalprimaryIPEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "EndingIP1";
                    this.mUIFinalprimaryIPEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Final primary IP";
                    this.mUIFinalprimaryIPEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIFinalprimaryIPEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIFinalprimaryIPEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUIFinalprimaryIPEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "style=\"WIDTH: 33px\" id=EndingIP1 type=te";
                    this.mUIFinalprimaryIPEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "7";
                    this.mUIFinalprimaryIPEdit.WindowTitles.Add("Create new meter records for IP-range");
                    #endregion
                }
                return this.mUIFinalprimaryIPEdit;
            }
        }
        
        public HtmlEdit UIFinalIP2Edit
        {
            get
            {
                if ((this.mUIFinalIP2Edit == null))
                {
                    this.mUIFinalIP2Edit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIFinalIP2Edit.SearchProperties[HtmlEdit.PropertyNames.Id] = "EndingIP2";
                    this.mUIFinalIP2Edit.SearchProperties[HtmlEdit.PropertyNames.Name] = "EndingIP2";
                    this.mUIFinalIP2Edit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Final IP2";
                    this.mUIFinalIP2Edit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIFinalIP2Edit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIFinalIP2Edit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUIFinalIP2Edit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "style=\"WIDTH: 33px\" id=EndingIP2 type=te";
                    this.mUIFinalIP2Edit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "8";
                    this.mUIFinalIP2Edit.WindowTitles.Add("Create new meter records for IP-range");
                    #endregion
                }
                return this.mUIFinalIP2Edit;
            }
        }
        
        public HtmlEdit UIFinalIP3Edit
        {
            get
            {
                if ((this.mUIFinalIP3Edit == null))
                {
                    this.mUIFinalIP3Edit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIFinalIP3Edit.SearchProperties[HtmlEdit.PropertyNames.Id] = "EndingIP3";
                    this.mUIFinalIP3Edit.SearchProperties[HtmlEdit.PropertyNames.Name] = "EndingIP3";
                    this.mUIFinalIP3Edit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Final IP3";
                    this.mUIFinalIP3Edit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIFinalIP3Edit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIFinalIP3Edit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUIFinalIP3Edit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "style=\"WIDTH: 33px\" id=EndingIP3 type=te";
                    this.mUIFinalIP3Edit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "9";
                    this.mUIFinalIP3Edit.WindowTitles.Add("Create new meter records for IP-range");
                    #endregion
                }
                return this.mUIFinalIP3Edit;
            }
        }
        
        public HtmlEdit UIFinalIP4Edit
        {
            get
            {
                if ((this.mUIFinalIP4Edit == null))
                {
                    this.mUIFinalIP4Edit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIFinalIP4Edit.SearchProperties[HtmlEdit.PropertyNames.Id] = "EndingIP4";
                    this.mUIFinalIP4Edit.SearchProperties[HtmlEdit.PropertyNames.Name] = "EndingIP4";
                    this.mUIFinalIP4Edit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Final IP4";
                    this.mUIFinalIP4Edit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIFinalIP4Edit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIFinalIP4Edit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUIFinalIP4Edit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "style=\"WIDTH: 33px\" id=EndingIP4 type=te";
                    this.mUIFinalIP4Edit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "10";
                    this.mUIFinalIP4Edit.WindowTitles.Add("Create new meter records for IP-range");
                    #endregion
                }
                return this.mUIFinalIP4Edit;
            }
        }
        
        public HtmlEdit UIInitialprimaryportEdit
        {
            get
            {
                if ((this.mUIInitialprimaryportEdit == null))
                {
                    this.mUIInitialprimaryportEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIInitialprimaryportEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "StartingIPPort";
                    this.mUIInitialprimaryportEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "StartingIPPort";
                    this.mUIInitialprimaryportEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Initial primary port";
                    this.mUIInitialprimaryportEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIInitialprimaryportEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIInitialprimaryportEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUIInitialprimaryportEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "style=\"WIDTH: 50px\" id=StartingIPPort ty";
                    this.mUIInitialprimaryportEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "11";
                    this.mUIInitialprimaryportEdit.WindowTitles.Add("Create new meter records for IP-range");
                    #endregion
                }
                return this.mUIInitialprimaryportEdit;
            }
        }
        
        public HtmlEdit UIFinalprimaryportEdit
        {
            get
            {
                if ((this.mUIFinalprimaryportEdit == null))
                {
                    this.mUIFinalprimaryportEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIFinalprimaryportEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "EndingIPPort";
                    this.mUIFinalprimaryportEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "EndingIPPort";
                    this.mUIFinalprimaryportEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Final primary port";
                    this.mUIFinalprimaryportEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIFinalprimaryportEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIFinalprimaryportEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUIFinalprimaryportEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "style=\"WIDTH: 50px\" id=EndingIPPort type";
                    this.mUIFinalprimaryportEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "12";
                    this.mUIFinalprimaryportEdit.WindowTitles.Add("Create new meter records for IP-range");
                    #endregion
                }
                return this.mUIFinalprimaryportEdit;
            }
        }
        
        public HtmlEdit UIInitialsecondaryIPEdit
        {
            get
            {
                if ((this.mUIInitialsecondaryIPEdit == null))
                {
                    this.mUIInitialsecondaryIPEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIInitialsecondaryIPEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "SecondaryStartingIP1";
                    this.mUIInitialsecondaryIPEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "SecondaryStartingIP1";
                    this.mUIInitialsecondaryIPEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Initial secondary IP";
                    this.mUIInitialsecondaryIPEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIInitialsecondaryIPEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIInitialsecondaryIPEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUIInitialsecondaryIPEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "style=\"WIDTH: 33px\" id=SecondaryStarting";
                    this.mUIInitialsecondaryIPEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "13";
                    this.mUIInitialsecondaryIPEdit.WindowTitles.Add("Create new meter records for IP-range");
                    #endregion
                }
                return this.mUIInitialsecondaryIPEdit;
            }
        }
        
        public HtmlEdit UIInititialsecondaryIPEdit
        {
            get
            {
                if ((this.mUIInititialsecondaryIPEdit == null))
                {
                    this.mUIInititialsecondaryIPEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIInititialsecondaryIPEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "SecondaryStartingIP2";
                    this.mUIInititialsecondaryIPEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "SecondaryStartingIP2";
                    this.mUIInititialsecondaryIPEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Inititial secondary IP2";
                    this.mUIInititialsecondaryIPEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIInititialsecondaryIPEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIInititialsecondaryIPEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUIInititialsecondaryIPEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "style=\"WIDTH: 33px\" id=SecondaryStarting";
                    this.mUIInititialsecondaryIPEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "14";
                    this.mUIInititialsecondaryIPEdit.WindowTitles.Add("Create new meter records for IP-range");
                    #endregion
                }
                return this.mUIInititialsecondaryIPEdit;
            }
        }
        
        public HtmlEdit UIInititialsecondaryIPEdit1
        {
            get
            {
                if ((this.mUIInititialsecondaryIPEdit1 == null))
                {
                    this.mUIInititialsecondaryIPEdit1 = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIInititialsecondaryIPEdit1.SearchProperties[HtmlEdit.PropertyNames.Id] = "SecondaryStartingIP3";
                    this.mUIInititialsecondaryIPEdit1.SearchProperties[HtmlEdit.PropertyNames.Name] = "SecondaryStartingIP3";
                    this.mUIInititialsecondaryIPEdit1.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Inititial secondary IP3";
                    this.mUIInititialsecondaryIPEdit1.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIInititialsecondaryIPEdit1.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIInititialsecondaryIPEdit1.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUIInititialsecondaryIPEdit1.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "style=\"WIDTH: 33px\" id=SecondaryStarting";
                    this.mUIInititialsecondaryIPEdit1.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "15";
                    this.mUIInititialsecondaryIPEdit1.WindowTitles.Add("Create new meter records for IP-range");
                    #endregion
                }
                return this.mUIInititialsecondaryIPEdit1;
            }
        }
        
        public HtmlEdit UIInititialsecondaryIPEdit2
        {
            get
            {
                if ((this.mUIInititialsecondaryIPEdit2 == null))
                {
                    this.mUIInititialsecondaryIPEdit2 = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIInititialsecondaryIPEdit2.SearchProperties[HtmlEdit.PropertyNames.Id] = "SecondaryStartingIP4";
                    this.mUIInititialsecondaryIPEdit2.SearchProperties[HtmlEdit.PropertyNames.Name] = "SecondaryStartingIP4";
                    this.mUIInititialsecondaryIPEdit2.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Inititial secondary IP4";
                    this.mUIInititialsecondaryIPEdit2.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIInititialsecondaryIPEdit2.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIInititialsecondaryIPEdit2.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUIInititialsecondaryIPEdit2.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "style=\"WIDTH: 33px\" id=SecondaryStarting";
                    this.mUIInititialsecondaryIPEdit2.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "16";
                    this.mUIInititialsecondaryIPEdit2.WindowTitles.Add("Create new meter records for IP-range");
                    #endregion
                }
                return this.mUIInititialsecondaryIPEdit2;
            }
        }
        
        public HtmlEdit UIInitialsecondaryportEdit
        {
            get
            {
                if ((this.mUIInitialsecondaryportEdit == null))
                {
                    this.mUIInitialsecondaryportEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIInitialsecondaryportEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "SecondaryStartingIPPort";
                    this.mUIInitialsecondaryportEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "SecondaryStartingIPPort";
                    this.mUIInitialsecondaryportEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Initial secondary port";
                    this.mUIInitialsecondaryportEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIInitialsecondaryportEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIInitialsecondaryportEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUIInitialsecondaryportEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "style=\"WIDTH: 50px\" id=SecondaryStarting";
                    this.mUIInitialsecondaryportEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "17";
                    this.mUIInitialsecondaryportEdit.WindowTitles.Add("Create new meter records for IP-range");
                    #endregion
                }
                return this.mUIInitialsecondaryportEdit;
            }
        }
        
        public UIMainPane2 UIMainPane
        {
            get
            {
                if ((this.mUIMainPane == null))
                {
                    this.mUIMainPane = new UIMainPane2(this);
                }
                return this.mUIMainPane;
            }
        }
        
        public UIMenuCustom1 UIMenuCustom
        {
            get
            {
                if ((this.mUIMenuCustom == null))
                {
                    this.mUIMenuCustom = new UIMenuCustom1(this);
                }
                return this.mUIMenuCustom;
            }
        }
        #endregion
        
        #region Fields
        private HtmlEdit mUIGroupnameEdit;
        
        private HtmlComboBox mUIDevicetypeComboBox;
        
        private HtmlEdit mUIMeternameprefixEdit;
        
        private HtmlEdit mUIInitialprimaryIPEdit;
        
        private HtmlEdit mUIInititialIP2Edit;
        
        private HtmlEdit mUIInititialIP3Edit;
        
        private HtmlEdit mUIInititialIP4Edit;
        
        private HtmlEdit mUIFinalprimaryIPEdit;
        
        private HtmlEdit mUIFinalIP2Edit;
        
        private HtmlEdit mUIFinalIP3Edit;
        
        private HtmlEdit mUIFinalIP4Edit;
        
        private HtmlEdit mUIInitialprimaryportEdit;
        
        private HtmlEdit mUIFinalprimaryportEdit;
        
        private HtmlEdit mUIInitialsecondaryIPEdit;
        
        private HtmlEdit mUIInititialsecondaryIPEdit;
        
        private HtmlEdit mUIInititialsecondaryIPEdit1;
        
        private HtmlEdit mUIInititialsecondaryIPEdit2;
        
        private HtmlEdit mUIInitialsecondaryportEdit;
        
        private UIMainPane2 mUIMainPane;
        
        private UIMenuCustom1 mUIMenuCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIMainPane2 : HtmlDiv
    {
        
        public UIMainPane2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "main";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Create new meter records for IP-range\r\nD";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=main";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "6";
            this.WindowTitles.Add("Create new meter records for IP-range");
            #endregion
        }
        
        #region Properties
        public HtmlInputButton UICreateButton
        {
            get
            {
                if ((this.mUICreateButton == null))
                {
                    this.mUICreateButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUICreateButton.SearchProperties[HtmlButton.PropertyNames.Id] = null;
                    this.mUICreateButton.SearchProperties[HtmlButton.PropertyNames.Name] = null;
                    this.mUICreateButton.SearchProperties[HtmlButton.PropertyNames.DisplayText] = "Create";
                    this.mUICreateButton.FilterProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUICreateButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUICreateButton.FilterProperties[HtmlButton.PropertyNames.Class] = null;
                    this.mUICreateButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "value=Create type=submit";
                    this.mUICreateButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "18";
                    this.mUICreateButton.WindowTitles.Add("Create new meter records for IP-range");
                    #endregion
                }
                return this.mUICreateButton;
            }
        }
        #endregion
        
        #region Fields
        private HtmlInputButton mUICreateButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIMenuCustom1 : HtmlCustom
    {
        
        public UIMenuCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties["Id"] = "menu";
            this.SearchProperties[UITestControl.PropertyNames.Name] = null;
            this.SearchProperties["TagName"] = "UL";
            this.FilterProperties["Class"] = null;
            this.FilterProperties["ControlDefinition"] = "id=menu";
            this.FilterProperties["TagInstance"] = "1";
            this.WindowTitles.Add("Create new meter records for IP-range");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIMeterGroupsHyperlink
        {
            get
            {
                if ((this.mUIMeterGroupsHyperlink == null))
                {
                    this.mUIMeterGroupsHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIMeterGroupsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIMeterGroupsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIMeterGroupsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIMeterGroupsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Meter Groups";
                    this.mUIMeterGroupsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Group";
                    this.mUIMeterGroupsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIMeterGroupsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:2374/Group";
                    this.mUIMeterGroupsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIMeterGroupsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/Group\"";
                    this.mUIMeterGroupsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "1";
                    this.mUIMeterGroupsHyperlink.WindowTitles.Add("Create new meter records for IP-range");
                    #endregion
                }
                return this.mUIMeterGroupsHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIMeterGroupsHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDeletethedevicegroupDocument11 : HtmlDocument
    {
        
        public UIDeletethedevicegroupDocument11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Delete the device group";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Group/Delete/95";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost:2374/Group/Delete/95";
            this.WindowTitles.Add("Delete the device group");
            #endregion
        }
        
        #region Properties
        public HtmlInputButton UIDeleteButton
        {
            get
            {
                if ((this.mUIDeleteButton == null))
                {
                    this.mUIDeleteButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.Id] = "Submit";
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.Name] = "Submit";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.DisplayText] = "Delete";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.Class] = null;
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "id=Submit value=Delete type=submit name=";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "1";
                    this.mUIDeleteButton.WindowTitles.Add("Delete the device group");
                    #endregion
                }
                return this.mUIDeleteButton;
            }
        }
        #endregion
        
        #region Fields
        private HtmlInputButton mUIDeleteButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UICreatenewmeterrecordDocument11 : HtmlDocument
    {
        
        public UICreatenewmeterrecordDocument11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Create new meter records for building group";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Group/AddMetersForBuildings";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost:2374/Group/AddMetersForBuildings";
            this.WindowTitles.Add("Create new meter records for building group");
            #endregion
        }
        
        #region Properties
        public HtmlEdit UIGroupnameEdit
        {
            get
            {
                if ((this.mUIGroupnameEdit == null))
                {
                    this.mUIGroupnameEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIGroupnameEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "Name";
                    this.mUIGroupnameEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "Name";
                    this.mUIGroupnameEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Group name";
                    this.mUIGroupnameEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIGroupnameEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIGroupnameEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUIGroupnameEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "id=Name type=text name=Name";
                    this.mUIGroupnameEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "1";
                    this.mUIGroupnameEdit.WindowTitles.Add("Create new meter records for building group");
                    #endregion
                }
                return this.mUIGroupnameEdit;
            }
        }
        
        public HtmlComboBox UIDevicetypeComboBox
        {
            get
            {
                if ((this.mUIDevicetypeComboBox == null))
                {
                    this.mUIDevicetypeComboBox = new HtmlComboBox(this);
                    #region Search Criteria
                    this.mUIDevicetypeComboBox.SearchProperties[HtmlComboBox.PropertyNames.Id] = "DeviceTypeID";
                    this.mUIDevicetypeComboBox.SearchProperties[HtmlComboBox.PropertyNames.Name] = "DeviceTypeID";
                    this.mUIDevicetypeComboBox.FilterProperties[HtmlComboBox.PropertyNames.Size] = "0";
                    this.mUIDevicetypeComboBox.FilterProperties[HtmlComboBox.PropertyNames.LabeledBy] = "Device type";
                    this.mUIDevicetypeComboBox.FilterProperties[HtmlComboBox.PropertyNames.Title] = null;
                    this.mUIDevicetypeComboBox.FilterProperties[HtmlComboBox.PropertyNames.ItemCount] = "1";
                    this.mUIDevicetypeComboBox.FilterProperties[HtmlComboBox.PropertyNames.Class] = null;
                    this.mUIDevicetypeComboBox.FilterProperties[HtmlComboBox.PropertyNames.ControlDefinition] = "id=DeviceTypeID name=DeviceTypeID";
                    this.mUIDevicetypeComboBox.FilterProperties[HtmlComboBox.PropertyNames.TagInstance] = "1";
                    this.mUIDevicetypeComboBox.WindowTitles.Add("Create new meter records for building group");
                    #endregion
                }
                return this.mUIDevicetypeComboBox;
            }
        }
        
        public HtmlEdit UIMeternameprefixEdit
        {
            get
            {
                if ((this.mUIMeternameprefixEdit == null))
                {
                    this.mUIMeternameprefixEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIMeternameprefixEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "DeviceNamePrefix";
                    this.mUIMeternameprefixEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "DeviceNamePrefix";
                    this.mUIMeternameprefixEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Meter name prefix";
                    this.mUIMeternameprefixEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIMeternameprefixEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIMeternameprefixEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUIMeternameprefixEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "id=DeviceNamePrefix type=text name=Devic";
                    this.mUIMeternameprefixEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "2";
                    this.mUIMeternameprefixEdit.WindowTitles.Add("Create new meter records for building group");
                    #endregion
                }
                return this.mUIMeternameprefixEdit;
            }
        }
        
        public HtmlEdit UIStreetEdit
        {
            get
            {
                if ((this.mUIStreetEdit == null))
                {
                    this.mUIStreetEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIStreetEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "Street";
                    this.mUIStreetEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "Street";
                    this.mUIStreetEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Street";
                    this.mUIStreetEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIStreetEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIStreetEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUIStreetEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "id=Street type=text name=Street";
                    this.mUIStreetEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "3";
                    this.mUIStreetEdit.WindowTitles.Add("Create new meter records for building group");
                    #endregion
                }
                return this.mUIStreetEdit;
            }
        }
        
        public HtmlEdit UICityEdit
        {
            get
            {
                if ((this.mUICityEdit == null))
                {
                    this.mUICityEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUICityEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "City";
                    this.mUICityEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "City";
                    this.mUICityEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "City";
                    this.mUICityEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUICityEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUICityEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUICityEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "id=City type=text name=City";
                    this.mUICityEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "4";
                    this.mUICityEdit.WindowTitles.Add("Create new meter records for building group");
                    #endregion
                }
                return this.mUICityEdit;
            }
        }
        
        public HtmlEdit UIStateEdit
        {
            get
            {
                if ((this.mUIStateEdit == null))
                {
                    this.mUIStateEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIStateEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "State";
                    this.mUIStateEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "State";
                    this.mUIStateEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "State";
                    this.mUIStateEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIStateEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIStateEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUIStateEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "id=State type=text name=State";
                    this.mUIStateEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "5";
                    this.mUIStateEdit.WindowTitles.Add("Create new meter records for building group");
                    #endregion
                }
                return this.mUIStateEdit;
            }
        }
        
        public HtmlEdit UICountryEdit
        {
            get
            {
                if ((this.mUICountryEdit == null))
                {
                    this.mUICountryEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUICountryEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "Country";
                    this.mUICountryEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "Country";
                    this.mUICountryEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Country";
                    this.mUICountryEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUICountryEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUICountryEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUICountryEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "id=Country type=text name=Country";
                    this.mUICountryEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "6";
                    this.mUICountryEdit.WindowTitles.Add("Create new meter records for building group");
                    #endregion
                }
                return this.mUICountryEdit;
            }
        }
        
        public HtmlEdit UIZipcodeEdit
        {
            get
            {
                if ((this.mUIZipcodeEdit == null))
                {
                    this.mUIZipcodeEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIZipcodeEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "ZipCode";
                    this.mUIZipcodeEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "ZipCode";
                    this.mUIZipcodeEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Zip code";
                    this.mUIZipcodeEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIZipcodeEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIZipcodeEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUIZipcodeEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "id=ZipCode type=text name=ZipCode";
                    this.mUIZipcodeEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "7";
                    this.mUIZipcodeEdit.WindowTitles.Add("Create new meter records for building group");
                    #endregion
                }
                return this.mUIZipcodeEdit;
            }
        }
        
        public HtmlEdit UIInitialbuildingnumbeEdit
        {
            get
            {
                if ((this.mUIInitialbuildingnumbeEdit == null))
                {
                    this.mUIInitialbuildingnumbeEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIInitialbuildingnumbeEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "StartingBuilding";
                    this.mUIInitialbuildingnumbeEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "StartingBuilding";
                    this.mUIInitialbuildingnumbeEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Initial building number";
                    this.mUIInitialbuildingnumbeEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIInitialbuildingnumbeEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIInitialbuildingnumbeEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUIInitialbuildingnumbeEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "id=StartingBuilding type=text name=Start";
                    this.mUIInitialbuildingnumbeEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "8";
                    this.mUIInitialbuildingnumbeEdit.WindowTitles.Add("Create new meter records for building group");
                    #endregion
                }
                return this.mUIInitialbuildingnumbeEdit;
            }
        }
        
        public HtmlEdit UIFinalbuildingnumberEdit
        {
            get
            {
                if ((this.mUIFinalbuildingnumberEdit == null))
                {
                    this.mUIFinalbuildingnumberEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIFinalbuildingnumberEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "EndingBuilding";
                    this.mUIFinalbuildingnumberEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "EndingBuilding";
                    this.mUIFinalbuildingnumberEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Final building number";
                    this.mUIFinalbuildingnumberEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIFinalbuildingnumberEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIFinalbuildingnumberEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUIFinalbuildingnumberEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "id=EndingBuilding type=text name=EndingB";
                    this.mUIFinalbuildingnumberEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "9";
                    this.mUIFinalbuildingnumberEdit.WindowTitles.Add("Create new meter records for building group");
                    #endregion
                }
                return this.mUIFinalbuildingnumberEdit;
            }
        }
        
        public HtmlEdit UIInitialapartmentnumbEdit
        {
            get
            {
                if ((this.mUIInitialapartmentnumbEdit == null))
                {
                    this.mUIInitialapartmentnumbEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIInitialapartmentnumbEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "StartingApartment";
                    this.mUIInitialapartmentnumbEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "StartingApartment";
                    this.mUIInitialapartmentnumbEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Initial apartment number";
                    this.mUIInitialapartmentnumbEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIInitialapartmentnumbEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIInitialapartmentnumbEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUIInitialapartmentnumbEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "id=StartingApartment type=text name=Star";
                    this.mUIInitialapartmentnumbEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "10";
                    this.mUIInitialapartmentnumbEdit.WindowTitles.Add("Create new meter records for building group");
                    #endregion
                }
                return this.mUIInitialapartmentnumbEdit;
            }
        }
        
        public HtmlEdit UIFinalapartmentnumberEdit
        {
            get
            {
                if ((this.mUIFinalapartmentnumberEdit == null))
                {
                    this.mUIFinalapartmentnumberEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIFinalapartmentnumberEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "EndingApartment";
                    this.mUIFinalapartmentnumberEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "EndingApartment";
                    this.mUIFinalapartmentnumberEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Final apartment number";
                    this.mUIFinalapartmentnumberEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIFinalapartmentnumberEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIFinalapartmentnumberEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUIFinalapartmentnumberEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "id=EndingApartment type=text name=Ending";
                    this.mUIFinalapartmentnumberEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "11";
                    this.mUIFinalapartmentnumberEdit.WindowTitles.Add("Create new meter records for building group");
                    #endregion
                }
                return this.mUIFinalapartmentnumberEdit;
            }
        }
        
        public HtmlEdit UIInitialprimaryIPIPswEdit
        {
            get
            {
                if ((this.mUIInitialprimaryIPIPswEdit == null))
                {
                    this.mUIInitialprimaryIPIPswEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIInitialprimaryIPIPswEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "StartingIP1";
                    this.mUIInitialprimaryIPIPswEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "StartingIP1";
                    this.mUIInitialprimaryIPIPswEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Initial primary IP (IPs will be assigned by incrementing this address)";
                    this.mUIInitialprimaryIPIPswEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIInitialprimaryIPIPswEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIInitialprimaryIPIPswEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUIInitialprimaryIPIPswEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "style=\"WIDTH: 33px\" id=StartingIP1 type=";
                    this.mUIInitialprimaryIPIPswEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "12";
                    this.mUIInitialprimaryIPIPswEdit.WindowTitles.Add("Create new meter records for building group");
                    #endregion
                }
                return this.mUIInitialprimaryIPIPswEdit;
            }
        }
        
        public HtmlEdit UIInititialIP2Edit
        {
            get
            {
                if ((this.mUIInititialIP2Edit == null))
                {
                    this.mUIInititialIP2Edit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIInititialIP2Edit.SearchProperties[HtmlEdit.PropertyNames.Id] = "StartingIP2";
                    this.mUIInititialIP2Edit.SearchProperties[HtmlEdit.PropertyNames.Name] = "StartingIP2";
                    this.mUIInititialIP2Edit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Inititial IP2";
                    this.mUIInititialIP2Edit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIInititialIP2Edit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIInititialIP2Edit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUIInititialIP2Edit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "style=\"WIDTH: 33px\" id=StartingIP2 type=";
                    this.mUIInititialIP2Edit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "13";
                    this.mUIInititialIP2Edit.WindowTitles.Add("Create new meter records for building group");
                    #endregion
                }
                return this.mUIInititialIP2Edit;
            }
        }
        
        public HtmlEdit UIInititialIP3Edit
        {
            get
            {
                if ((this.mUIInititialIP3Edit == null))
                {
                    this.mUIInititialIP3Edit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIInititialIP3Edit.SearchProperties[HtmlEdit.PropertyNames.Id] = "StartingIP3";
                    this.mUIInititialIP3Edit.SearchProperties[HtmlEdit.PropertyNames.Name] = "StartingIP3";
                    this.mUIInititialIP3Edit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Inititial IP3";
                    this.mUIInititialIP3Edit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIInititialIP3Edit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIInititialIP3Edit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUIInititialIP3Edit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "style=\"WIDTH: 33px\" id=StartingIP3 type=";
                    this.mUIInititialIP3Edit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "14";
                    this.mUIInititialIP3Edit.WindowTitles.Add("Create new meter records for building group");
                    #endregion
                }
                return this.mUIInititialIP3Edit;
            }
        }
        
        public HtmlEdit UIInititialIP4Edit
        {
            get
            {
                if ((this.mUIInititialIP4Edit == null))
                {
                    this.mUIInititialIP4Edit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIInititialIP4Edit.SearchProperties[HtmlEdit.PropertyNames.Id] = "StartingIP4";
                    this.mUIInititialIP4Edit.SearchProperties[HtmlEdit.PropertyNames.Name] = "StartingIP4";
                    this.mUIInititialIP4Edit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Inititial IP4";
                    this.mUIInititialIP4Edit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIInititialIP4Edit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIInititialIP4Edit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUIInititialIP4Edit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "style=\"WIDTH: 33px\" id=StartingIP4 type=";
                    this.mUIInititialIP4Edit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "15";
                    this.mUIInititialIP4Edit.WindowTitles.Add("Create new meter records for building group");
                    #endregion
                }
                return this.mUIInititialIP4Edit;
            }
        }
        
        public HtmlEdit UIInitialprimaryportwiEdit
        {
            get
            {
                if ((this.mUIInitialprimaryportwiEdit == null))
                {
                    this.mUIInitialprimaryportwiEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIInitialprimaryportwiEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "StartingIPPort";
                    this.mUIInitialprimaryportwiEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "StartingIPPort";
                    this.mUIInitialprimaryportwiEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Initial primary port (will be the same for all meters)";
                    this.mUIInitialprimaryportwiEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIInitialprimaryportwiEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIInitialprimaryportwiEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUIInitialprimaryportwiEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "style=\"WIDTH: 50px\" id=StartingIPPort ty";
                    this.mUIInitialprimaryportwiEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "16";
                    this.mUIInitialprimaryportwiEdit.WindowTitles.Add("Create new meter records for building group");
                    #endregion
                }
                return this.mUIInitialprimaryportwiEdit;
            }
        }
        
        public HtmlEdit UIInitialsecondaryIPIPEdit
        {
            get
            {
                if ((this.mUIInitialsecondaryIPIPEdit == null))
                {
                    this.mUIInitialsecondaryIPIPEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIInitialsecondaryIPIPEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "SecondaryStartingIP1";
                    this.mUIInitialsecondaryIPIPEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "SecondaryStartingIP1";
                    this.mUIInitialsecondaryIPIPEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Initial secondary IP (IPs will be assigned by incrementing this address)";
                    this.mUIInitialsecondaryIPIPEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIInitialsecondaryIPIPEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIInitialsecondaryIPIPEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUIInitialsecondaryIPIPEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "style=\"WIDTH: 33px\" id=SecondaryStarting";
                    this.mUIInitialsecondaryIPIPEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "17";
                    this.mUIInitialsecondaryIPIPEdit.WindowTitles.Add("Create new meter records for building group");
                    #endregion
                }
                return this.mUIInitialsecondaryIPIPEdit;
            }
        }
        
        public HtmlEdit UIInititialIP2Edit1
        {
            get
            {
                if ((this.mUIInititialIP2Edit1 == null))
                {
                    this.mUIInititialIP2Edit1 = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIInititialIP2Edit1.SearchProperties[HtmlEdit.PropertyNames.Id] = "SecondaryStartingIP2";
                    this.mUIInititialIP2Edit1.SearchProperties[HtmlEdit.PropertyNames.Name] = "SecondaryStartingIP2";
                    this.mUIInititialIP2Edit1.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Inititial IP2";
                    this.mUIInititialIP2Edit1.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIInititialIP2Edit1.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIInititialIP2Edit1.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUIInititialIP2Edit1.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "style=\"WIDTH: 33px\" id=SecondaryStarting";
                    this.mUIInititialIP2Edit1.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "18";
                    this.mUIInititialIP2Edit1.WindowTitles.Add("Create new meter records for building group");
                    #endregion
                }
                return this.mUIInititialIP2Edit1;
            }
        }
        
        public HtmlEdit UIInititialIP3Edit1
        {
            get
            {
                if ((this.mUIInititialIP3Edit1 == null))
                {
                    this.mUIInititialIP3Edit1 = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIInititialIP3Edit1.SearchProperties[HtmlEdit.PropertyNames.Id] = "SecondaryStartingIP3";
                    this.mUIInititialIP3Edit1.SearchProperties[HtmlEdit.PropertyNames.Name] = "SecondaryStartingIP3";
                    this.mUIInititialIP3Edit1.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Inititial IP3";
                    this.mUIInititialIP3Edit1.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIInititialIP3Edit1.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIInititialIP3Edit1.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUIInititialIP3Edit1.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "style=\"WIDTH: 33px\" id=SecondaryStarting";
                    this.mUIInititialIP3Edit1.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "19";
                    this.mUIInititialIP3Edit1.WindowTitles.Add("Create new meter records for building group");
                    #endregion
                }
                return this.mUIInititialIP3Edit1;
            }
        }
        
        public HtmlEdit UIInititialIP4Edit1
        {
            get
            {
                if ((this.mUIInititialIP4Edit1 == null))
                {
                    this.mUIInititialIP4Edit1 = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIInititialIP4Edit1.SearchProperties[HtmlEdit.PropertyNames.Id] = "SecondaryStartingIP4";
                    this.mUIInititialIP4Edit1.SearchProperties[HtmlEdit.PropertyNames.Name] = "SecondaryStartingIP4";
                    this.mUIInititialIP4Edit1.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Inititial IP4";
                    this.mUIInititialIP4Edit1.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIInititialIP4Edit1.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIInititialIP4Edit1.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUIInititialIP4Edit1.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "style=\"WIDTH: 33px\" id=SecondaryStarting";
                    this.mUIInititialIP4Edit1.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "20";
                    this.mUIInititialIP4Edit1.WindowTitles.Add("Create new meter records for building group");
                    #endregion
                }
                return this.mUIInititialIP4Edit1;
            }
        }
        
        public HtmlEdit UIInitialsecondaryportEdit
        {
            get
            {
                if ((this.mUIInitialsecondaryportEdit == null))
                {
                    this.mUIInitialsecondaryportEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIInitialsecondaryportEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "SecondaryStartingIPPort";
                    this.mUIInitialsecondaryportEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "SecondaryStartingIPPort";
                    this.mUIInitialsecondaryportEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Initial secondary port (will be the same for all meters)";
                    this.mUIInitialsecondaryportEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIInitialsecondaryportEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIInitialsecondaryportEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUIInitialsecondaryportEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "style=\"WIDTH: 50px\" id=SecondaryStarting";
                    this.mUIInitialsecondaryportEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "21";
                    this.mUIInitialsecondaryportEdit.WindowTitles.Add("Create new meter records for building group");
                    #endregion
                }
                return this.mUIInitialsecondaryportEdit;
            }
        }
        
        public UIMainPane3 UIMainPane
        {
            get
            {
                if ((this.mUIMainPane == null))
                {
                    this.mUIMainPane = new UIMainPane3(this);
                }
                return this.mUIMainPane;
            }
        }
        #endregion
        
        #region Fields
        private HtmlEdit mUIGroupnameEdit;
        
        private HtmlComboBox mUIDevicetypeComboBox;
        
        private HtmlEdit mUIMeternameprefixEdit;
        
        private HtmlEdit mUIStreetEdit;
        
        private HtmlEdit mUICityEdit;
        
        private HtmlEdit mUIStateEdit;
        
        private HtmlEdit mUICountryEdit;
        
        private HtmlEdit mUIZipcodeEdit;
        
        private HtmlEdit mUIInitialbuildingnumbeEdit;
        
        private HtmlEdit mUIFinalbuildingnumberEdit;
        
        private HtmlEdit mUIInitialapartmentnumbEdit;
        
        private HtmlEdit mUIFinalapartmentnumberEdit;
        
        private HtmlEdit mUIInitialprimaryIPIPswEdit;
        
        private HtmlEdit mUIInititialIP2Edit;
        
        private HtmlEdit mUIInititialIP3Edit;
        
        private HtmlEdit mUIInititialIP4Edit;
        
        private HtmlEdit mUIInitialprimaryportwiEdit;
        
        private HtmlEdit mUIInitialsecondaryIPIPEdit;
        
        private HtmlEdit mUIInititialIP2Edit1;
        
        private HtmlEdit mUIInititialIP3Edit1;
        
        private HtmlEdit mUIInititialIP4Edit1;
        
        private HtmlEdit mUIInitialsecondaryportEdit;
        
        private UIMainPane3 mUIMainPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIMainPane3 : HtmlDiv
    {
        
        public UIMainPane3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "main";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Create new meter records for building gr";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=main";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "6";
            this.WindowTitles.Add("Create new meter records for building group");
            #endregion
        }
        
        #region Properties
        public HtmlInputButton UICreateButton
        {
            get
            {
                if ((this.mUICreateButton == null))
                {
                    this.mUICreateButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUICreateButton.SearchProperties[HtmlButton.PropertyNames.Id] = null;
                    this.mUICreateButton.SearchProperties[HtmlButton.PropertyNames.Name] = null;
                    this.mUICreateButton.SearchProperties[HtmlButton.PropertyNames.DisplayText] = "Create";
                    this.mUICreateButton.FilterProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUICreateButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUICreateButton.FilterProperties[HtmlButton.PropertyNames.Class] = null;
                    this.mUICreateButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "value=Create type=submit";
                    this.mUICreateButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "22";
                    this.mUICreateButton.WindowTitles.Add("Create new meter records for building group");
                    #endregion
                }
                return this.mUICreateButton;
            }
        }
        #endregion
        
        #region Fields
        private HtmlInputButton mUICreateButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDeletethedevicegroupDocument2 : HtmlDocument
    {
        
        public UIDeletethedevicegroupDocument2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Delete the device group";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Group/Delete/96";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost:2374/Group/Delete/96";
            this.WindowTitles.Add("Delete the device group");
            #endregion
        }
        
        #region Properties
        public HtmlInputButton UIDeleteButton
        {
            get
            {
                if ((this.mUIDeleteButton == null))
                {
                    this.mUIDeleteButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.Id] = "Submit";
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.Name] = "Submit";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.DisplayText] = "Delete";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.Class] = null;
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "id=Submit value=Delete type=submit name=";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "1";
                    this.mUIDeleteButton.WindowTitles.Add("Delete the device group");
                    #endregion
                }
                return this.mUIDeleteButton;
            }
        }
        #endregion
        
        #region Fields
        private HtmlInputButton mUIDeleteButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIMetersassociatedwithDocument1 : HtmlDocument
    {
        
        public UIMetersassociatedwithDocument1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Meters associated with group \"single\"";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Device/GroupDevices/97";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost:2374/Device/GroupDevices/97";
            this.WindowTitles.Add("Meters associated with group \"single\"");
            #endregion
        }
        
        #region Properties
        public UIGridPane5 UIGridPane
        {
            get
            {
                if ((this.mUIGridPane == null))
                {
                    this.mUIGridPane = new UIGridPane5(this);
                }
                return this.mUIGridPane;
            }
        }
        
        public UIMainPane4 UIMainPane
        {
            get
            {
                if ((this.mUIMainPane == null))
                {
                    this.mUIMainPane = new UIMainPane4(this);
                }
                return this.mUIMainPane;
            }
        }
        #endregion
        
        #region Fields
        private UIGridPane5 mUIGridPane;
        
        private UIMainPane4 mUIMainPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIGridPane5 : HtmlDiv
    {
        
        public UIGridPane5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "grid";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "NameTypeOwnerGroupPrimary IPPrimary Port";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=grid";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "7";
            this.WindowTitles.Add("Meters associated with group \"single\"");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIDeleteHyperlink
        {
            get
            {
                if ((this.mUIDeleteHyperlink == null))
                {
                    this.mUIDeleteHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIDeleteHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIDeleteHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIDeleteHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIDeleteHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Delete";
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Device/Delete/81523";
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:2374/Device/Delete/81523";
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/Device//81523\"";
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "14";
                    this.mUIDeleteHyperlink.WindowTitles.Add("Meters associated with group \"single\"");
                    #endregion
                }
                return this.mUIDeleteHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIDeleteHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIMainPane4 : HtmlDiv
    {
        
        public UIMainPane4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "main";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Meters associated with group \"single\"\r\nC";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=main";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "6";
            this.WindowTitles.Add("Meters associated with group \"single\"");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIGroupsHyperlink
        {
            get
            {
                if ((this.mUIGroupsHyperlink == null))
                {
                    this.mUIGroupsHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIGroupsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIGroupsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIGroupsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIGroupsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Groups";
                    this.mUIGroupsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Group";
                    this.mUIGroupsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIGroupsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:2374/Group";
                    this.mUIGroupsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIGroupsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/Group\"";
                    this.mUIGroupsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "2";
                    this.mUIGroupsHyperlink.WindowTitles.Add("Meters associated with group \"single\"");
                    #endregion
                }
                return this.mUIGroupsHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIGroupsHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDeletemeterDocument11 : HtmlDocument
    {
        
        public UIDeletemeterDocument11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Delete meter";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Device/Delete/81523";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost:2374/Device/Delete/81523";
            this.WindowTitles.Add("Delete meter");
            #endregion
        }
        
        #region Properties
        public HtmlInputButton UIDeleteButton
        {
            get
            {
                if ((this.mUIDeleteButton == null))
                {
                    this.mUIDeleteButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.Id] = "Submit";
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.Name] = "Submit";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.DisplayText] = "Delete";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.Class] = null;
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "id=Submit value=Delete type=submit name=";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "1";
                    this.mUIDeleteButton.WindowTitles.Add("Delete meter");
                    #endregion
                }
                return this.mUIDeleteButton;
            }
        }
        #endregion
        
        #region Fields
        private HtmlInputButton mUIDeleteButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDeletethedevicegroupDocument3 : HtmlDocument
    {
        
        public UIDeletethedevicegroupDocument3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Delete the device group";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Group/Delete/97";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost:2374/Group/Delete/97";
            this.WindowTitles.Add("Delete the device group");
            #endregion
        }
        
        #region Properties
        public HtmlInputButton UIDeleteButton
        {
            get
            {
                if ((this.mUIDeleteButton == null))
                {
                    this.mUIDeleteButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.Id] = "Submit";
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.Name] = "Submit";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.DisplayText] = "Delete";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.Class] = null;
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "id=Submit value=Delete type=submit name=";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "1";
                    this.mUIDeleteButton.WindowTitles.Add("Delete the device group");
                    #endregion
                }
                return this.mUIDeleteButton;
            }
        }
        #endregion
        
        #region Fields
        private HtmlInputButton mUIDeleteButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIBlankPageInternetExpWindow : BrowserWindow
    {
        
        public UIBlankPageInternetExpWindow()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Blank Page";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Blank Page");
            this.WindowTitles.Add("Welcome Rational City");
            this.WindowTitles.Add("Log On");
            this.WindowTitles.Add("Meter groups");
            this.WindowTitles.Add("Create new meter records for IP-range");
            this.WindowTitles.Add("Register");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIWelcomeRationalCityDocument UIWelcomeRationalCityDocument
        {
            get
            {
                if ((this.mUIWelcomeRationalCityDocument == null))
                {
                    this.mUIWelcomeRationalCityDocument = new UIWelcomeRationalCityDocument(this);
                }
                return this.mUIWelcomeRationalCityDocument;
            }
        }
        
        public UILogOnDocument UILogOnDocument
        {
            get
            {
                if ((this.mUILogOnDocument == null))
                {
                    this.mUILogOnDocument = new UILogOnDocument(this);
                }
                return this.mUILogOnDocument;
            }
        }
        
        public UIWelcomeRationalCityITitleBar UIWelcomeRationalCityITitleBar
        {
            get
            {
                if ((this.mUIWelcomeRationalCityITitleBar == null))
                {
                    this.mUIWelcomeRationalCityITitleBar = new UIWelcomeRationalCityITitleBar(this);
                }
                return this.mUIWelcomeRationalCityITitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIWelcomeRationalCityDocument mUIWelcomeRationalCityDocument;
        
        private UILogOnDocument mUILogOnDocument;
        
        private UIWelcomeRationalCityITitleBar mUIWelcomeRationalCityITitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIWelcomeRationalCityDocument : HtmlDocument
    {
        
        public UIWelcomeRationalCityDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Welcome Rational City";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost:2374/";
            this.WindowTitles.Add("Welcome Rational City");
            #endregion
        }
        
        #region Properties
        public UIMenuCustom2 UIMenuCustom
        {
            get
            {
                if ((this.mUIMenuCustom == null))
                {
                    this.mUIMenuCustom = new UIMenuCustom2(this);
                }
                return this.mUIMenuCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIMenuCustom2 mUIMenuCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIMenuCustom2 : HtmlCustom
    {
        
        public UIMenuCustom2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties["Id"] = "menu";
            this.SearchProperties[UITestControl.PropertyNames.Name] = null;
            this.SearchProperties["TagName"] = "UL";
            this.FilterProperties["Class"] = null;
            this.FilterProperties["ControlDefinition"] = "id=menu";
            this.FilterProperties["TagInstance"] = "1";
            this.WindowTitles.Add("Welcome Rational City");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UILogOnHyperlink
        {
            get
            {
                if ((this.mUILogOnHyperlink == null))
                {
                    this.mUILogOnHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUILogOnHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUILogOnHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUILogOnHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUILogOnHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Log On";
                    this.mUILogOnHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Account/LogOn";
                    this.mUILogOnHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUILogOnHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:2374/Account/LogOn";
                    this.mUILogOnHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUILogOnHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/Account/LogOn\"";
                    this.mUILogOnHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "2";
                    this.mUILogOnHyperlink.WindowTitles.Add("Welcome Rational City");
                    #endregion
                }
                return this.mUILogOnHyperlink;
            }
        }
        
        public HtmlHyperlink UILogOffHyperlink
        {
            get
            {
                if ((this.mUILogOffHyperlink == null))
                {
                    this.mUILogOffHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUILogOffHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUILogOffHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUILogOffHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUILogOffHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Log Off";
                    this.mUILogOffHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Account/LogOff";
                    this.mUILogOffHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUILogOffHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:2374/Account/LogOff";
                    this.mUILogOffHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUILogOffHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/Account/LogOff\"";
                    this.mUILogOffHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "3";
                    this.mUILogOffHyperlink.WindowTitles.Add("Welcome Rational City");
                    #endregion
                }
                return this.mUILogOffHyperlink;
            }
        }
        
        public HtmlHyperlink UIMeterGroupsHyperlink
        {
            get
            {
                if ((this.mUIMeterGroupsHyperlink == null))
                {
                    this.mUIMeterGroupsHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIMeterGroupsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIMeterGroupsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIMeterGroupsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIMeterGroupsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Meter Groups";
                    this.mUIMeterGroupsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Group";
                    this.mUIMeterGroupsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIMeterGroupsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:2374/Group";
                    this.mUIMeterGroupsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIMeterGroupsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/Group\"";
                    this.mUIMeterGroupsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "1";
                    this.mUIMeterGroupsHyperlink.WindowTitles.Add("Welcome Rational City");
                    #endregion
                }
                return this.mUIMeterGroupsHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUILogOnHyperlink;
        
        private HtmlHyperlink mUILogOffHyperlink;
        
        private HtmlHyperlink mUIMeterGroupsHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UILogOnDocument : HtmlDocument
    {
        
        public UILogOnDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Log On";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Account/LogOn";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost:2374/Account/LogOn";
            this.WindowTitles.Add("Log On");
            #endregion
        }
        
        #region Properties
        public HtmlEdit UIUsernameEdit
        {
            get
            {
                if ((this.mUIUsernameEdit == null))
                {
                    this.mUIUsernameEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIUsernameEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "UserName";
                    this.mUIUsernameEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "UserName";
                    this.mUIUsernameEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "User name";
                    this.mUIUsernameEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIUsernameEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIUsernameEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUIUsernameEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "id=UserName type=text name=UserName  dat";
                    this.mUIUsernameEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "1";
                    this.mUIUsernameEdit.WindowTitles.Add("Log On");
                    #endregion
                }
                return this.mUIUsernameEdit;
            }
        }
        
        public HtmlEdit UIPasswordEdit
        {
            get
            {
                if ((this.mUIPasswordEdit == null))
                {
                    this.mUIPasswordEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIPasswordEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "Password";
                    this.mUIPasswordEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "Password";
                    this.mUIPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Password";
                    this.mUIPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "PASSWORD";
                    this.mUIPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUIPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "id=Password value=\"\" type=password name=";
                    this.mUIPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "2";
                    this.mUIPasswordEdit.WindowTitles.Add("Log On");
                    #endregion
                }
                return this.mUIPasswordEdit;
            }
        }
        
        public UIMainPane5 UIMainPane
        {
            get
            {
                if ((this.mUIMainPane == null))
                {
                    this.mUIMainPane = new UIMainPane5(this);
                }
                return this.mUIMainPane;
            }
        }
        #endregion
        
        #region Fields
        private HtmlEdit mUIUsernameEdit;
        
        private HtmlEdit mUIPasswordEdit;
        
        private UIMainPane5 mUIMainPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIMainPane5 : HtmlDiv
    {
        
        public UIMainPane5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "main";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Log On\r\nPlease enter your user name and ";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=main";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "6";
            this.WindowTitles.Add("Log On");
            #endregion
        }
        
        #region Properties
        public HtmlCustom UIItemCustom
        {
            get
            {
                if ((this.mUIItemCustom == null))
                {
                    this.mUIItemCustom = new HtmlCustom(this);
                    #region Search Criteria
                    this.mUIItemCustom.SearchProperties["Id"] = null;
                    this.mUIItemCustom.SearchProperties[UITestControl.PropertyNames.Name] = null;
                    this.mUIItemCustom.SearchProperties["TagName"] = "FIELDSET";
                    this.mUIItemCustom.FilterProperties["Class"] = null;
                    this.mUIItemCustom.FilterProperties["ControlDefinition"] = null;
                    this.mUIItemCustom.FilterProperties["TagInstance"] = "1";
                    this.mUIItemCustom.WindowTitles.Add("Log On");
                    #endregion
                }
                return this.mUIItemCustom;
            }
        }
        
        public HtmlHyperlink UIRegisterHyperlink
        {
            get
            {
                if ((this.mUIRegisterHyperlink == null))
                {
                    this.mUIRegisterHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIRegisterHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIRegisterHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIRegisterHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIRegisterHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Register";
                    this.mUIRegisterHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Account/Register";
                    this.mUIRegisterHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIRegisterHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:2374/Account/Register";
                    this.mUIRegisterHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIRegisterHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/Account/\"";
                    this.mUIRegisterHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "1";
                    this.mUIRegisterHyperlink.WindowTitles.Add("Log On");
                    #endregion
                }
                return this.mUIRegisterHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlCustom mUIItemCustom;
        
        private HtmlHyperlink mUIRegisterHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIWelcomeRationalCityITitleBar : WinTitleBar
    {
        
        public UIWelcomeRationalCityITitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Welcome Rational City");
            #endregion
        }
        
        #region Properties
        public WinButton UIЗакрытьButton
        {
            get
            {
                if ((this.mUIЗакрытьButton == null))
                {
                    this.mUIЗакрытьButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIЗакрытьButton.SearchProperties[WinButton.PropertyNames.Name] = "Закрыть";
                    this.mUIЗакрытьButton.WindowTitles.Add("Welcome Rational City");
                    #endregion
                }
                return this.mUIЗакрытьButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIЗакрытьButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIBlankPageInternetExpWindow1 : BrowserWindow
    {
        
        public UIBlankPageInternetExpWindow1()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Blank Page";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Blank Page");
            this.WindowTitles.Add("Welcome Rational City");
            this.WindowTitles.Add("Log On");
            this.WindowTitles.Add("Meter groups");
            this.WindowTitles.Add("Delete the device group");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIBlankPageInternetExpWindow2 : BrowserWindow
    {
        
        public UIBlankPageInternetExpWindow2()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Blank Page";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Blank Page");
            this.WindowTitles.Add("Welcome Rational City");
            this.WindowTitles.Add("Log On");
            this.WindowTitles.Add("Meter groups");
            this.WindowTitles.Add("Delete the device group");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIDeletethedevicegroupDocument4 UIDeletethedevicegroupDocument
        {
            get
            {
                if ((this.mUIDeletethedevicegroupDocument == null))
                {
                    this.mUIDeletethedevicegroupDocument = new UIDeletethedevicegroupDocument4(this);
                }
                return this.mUIDeletethedevicegroupDocument;
            }
        }
        #endregion
        
        #region Fields
        private UIDeletethedevicegroupDocument4 mUIDeletethedevicegroupDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDeletethedevicegroupDocument4 : HtmlDocument
    {
        
        public UIDeletethedevicegroupDocument4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Delete the device group";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Group/Delete/98";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost:2374/Group/Delete/98";
            this.WindowTitles.Add("Delete the device group");
            #endregion
        }
        
        #region Properties
        public HtmlInputButton UIDeleteButton
        {
            get
            {
                if ((this.mUIDeleteButton == null))
                {
                    this.mUIDeleteButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.Id] = "Submit";
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.Name] = "Submit";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.DisplayText] = "Delete";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.Class] = null;
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "id=Submit value=Delete type=submit name=";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "1";
                    this.mUIDeleteButton.WindowTitles.Add("Delete the device group");
                    #endregion
                }
                return this.mUIDeleteButton;
            }
        }
        #endregion
        
        #region Fields
        private HtmlInputButton mUIDeleteButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIBlankPageInternetExpWindow3 : BrowserWindow
    {
        
        public UIBlankPageInternetExpWindow3()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Blank Page";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Blank Page");
            this.WindowTitles.Add("Welcome Rational City");
            this.WindowTitles.Add("Log On");
            this.WindowTitles.Add("Meter groups");
            this.WindowTitles.Add("Create new meter records for building group");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIBlankPageInternetExpWindow4 : BrowserWindow
    {
        
        public UIBlankPageInternetExpWindow4()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Blank Page";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Blank Page");
            this.WindowTitles.Add("Welcome Rational City");
            this.WindowTitles.Add("Log On");
            this.WindowTitles.Add("Meter groups");
            this.WindowTitles.Add("Delete the device group");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIBlankPageInternetExpWindow5 : BrowserWindow
    {
        
        public UIBlankPageInternetExpWindow5()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Blank Page";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Blank Page");
            this.WindowTitles.Add("Welcome Rational City");
            this.WindowTitles.Add("Log On");
            this.WindowTitles.Add("Meter groups");
            this.WindowTitles.Add("Delete the device group");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIDeletethedevicegroupDocument5 UIDeletethedevicegroupDocument
        {
            get
            {
                if ((this.mUIDeletethedevicegroupDocument == null))
                {
                    this.mUIDeletethedevicegroupDocument = new UIDeletethedevicegroupDocument5(this);
                }
                return this.mUIDeletethedevicegroupDocument;
            }
        }
        #endregion
        
        #region Fields
        private UIDeletethedevicegroupDocument5 mUIDeletethedevicegroupDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDeletethedevicegroupDocument5 : HtmlDocument
    {
        
        public UIDeletethedevicegroupDocument5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Delete the device group";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Group/Delete/100";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost:2374/Group/Delete/100";
            this.WindowTitles.Add("Delete the device group");
            #endregion
        }
        
        #region Properties
        public HtmlInputButton UIDeleteButton
        {
            get
            {
                if ((this.mUIDeleteButton == null))
                {
                    this.mUIDeleteButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.Id] = "Submit";
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.Name] = "Submit";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.DisplayText] = "Delete";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.Class] = null;
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "id=Submit value=Delete type=submit name=";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "1";
                    this.mUIDeleteButton.WindowTitles.Add("Delete the device group");
                    #endregion
                }
                return this.mUIDeleteButton;
            }
        }
        #endregion
        
        #region Fields
        private HtmlInputButton mUIDeleteButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIBlankPageInternetExpWindow6 : BrowserWindow
    {
        
        public UIBlankPageInternetExpWindow6()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Blank Page";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Blank Page");
            this.WindowTitles.Add("Welcome Rational City");
            this.WindowTitles.Add("Log On");
            this.WindowTitles.Add("Meter groups");
            this.WindowTitles.Add("Create new meter records for IP-range");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIBlankPageInternetExpWindow7 : BrowserWindow
    {
        
        public UIBlankPageInternetExpWindow7()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Blank Page";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Blank Page");
            this.WindowTitles.Add("Welcome Rational City");
            this.WindowTitles.Add("Log On");
            this.WindowTitles.Add("Meter groups");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIMetergroupsInternetEWindow1 : BrowserWindow
    {
        
        public UIMetergroupsInternetEWindow1()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Meter groups";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Meter groups");
            this.WindowTitles.Add("Meters associated with group \"single\"");
            this.WindowTitles.Add("Delete meter");
            this.WindowTitles.Add("Delete the device group");
            this.WindowTitles.Add("Welcome Rational City");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIMetersassociatedwithDocument2 UIMetersassociatedwithDocument
        {
            get
            {
                if ((this.mUIMetersassociatedwithDocument == null))
                {
                    this.mUIMetersassociatedwithDocument = new UIMetersassociatedwithDocument2(this);
                }
                return this.mUIMetersassociatedwithDocument;
            }
        }
        #endregion
        
        #region Fields
        private UIMetersassociatedwithDocument2 mUIMetersassociatedwithDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIMetersassociatedwithDocument2 : HtmlDocument
    {
        
        public UIMetersassociatedwithDocument2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Meters associated with group \"single\"";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Device/GroupDevices/102";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost:2374/Device/GroupDevices/102";
            this.WindowTitles.Add("Meters associated with group \"single\"");
            #endregion
        }
        
        #region Properties
        public UIGridPane6 UIGridPane
        {
            get
            {
                if ((this.mUIGridPane == null))
                {
                    this.mUIGridPane = new UIGridPane6(this);
                }
                return this.mUIGridPane;
            }
        }
        
        public UIMainPane6 UIMainPane
        {
            get
            {
                if ((this.mUIMainPane == null))
                {
                    this.mUIMainPane = new UIMainPane6(this);
                }
                return this.mUIMainPane;
            }
        }
        #endregion
        
        #region Fields
        private UIGridPane6 mUIGridPane;
        
        private UIMainPane6 mUIMainPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIGridPane6 : HtmlDiv
    {
        
        public UIGridPane6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "grid";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "NameTypeOwnerGroupPrimary IPPrimary Port";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=grid";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "7";
            this.WindowTitles.Add("Meters associated with group \"single\"");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIDeleteHyperlink
        {
            get
            {
                if ((this.mUIDeleteHyperlink == null))
                {
                    this.mUIDeleteHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIDeleteHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIDeleteHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIDeleteHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIDeleteHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Delete";
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Device/Delete/81868";
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:2374/Device/Delete/81868";
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/Device//81868\"";
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "14";
                    this.mUIDeleteHyperlink.WindowTitles.Add("Meters associated with group \"single\"");
                    #endregion
                }
                return this.mUIDeleteHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIDeleteHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIMainPane6 : HtmlDiv
    {
        
        public UIMainPane6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "main";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Meters associated with group \"single\"\r\nC";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=main";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "6";
            this.WindowTitles.Add("Meters associated with group \"single\"");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIGroupsHyperlink
        {
            get
            {
                if ((this.mUIGroupsHyperlink == null))
                {
                    this.mUIGroupsHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIGroupsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIGroupsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIGroupsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIGroupsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Groups";
                    this.mUIGroupsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Group";
                    this.mUIGroupsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIGroupsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:2374/Group";
                    this.mUIGroupsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIGroupsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/Group\"";
                    this.mUIGroupsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "2";
                    this.mUIGroupsHyperlink.WindowTitles.Add("Meters associated with group \"single\"");
                    #endregion
                }
                return this.mUIGroupsHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIGroupsHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIMetergroupsInternetEWindow2 : BrowserWindow
    {
        
        public UIMetergroupsInternetEWindow2()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Meter groups";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Meter groups");
            this.WindowTitles.Add("Meters associated with group \"single\"");
            this.WindowTitles.Add("Delete meter");
            this.WindowTitles.Add("Delete the device group");
            this.WindowTitles.Add("Welcome Rational City");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIDeletemeterDocument2 UIDeletemeterDocument
        {
            get
            {
                if ((this.mUIDeletemeterDocument == null))
                {
                    this.mUIDeletemeterDocument = new UIDeletemeterDocument2(this);
                }
                return this.mUIDeletemeterDocument;
            }
        }
        #endregion
        
        #region Fields
        private UIDeletemeterDocument2 mUIDeletemeterDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDeletemeterDocument2 : HtmlDocument
    {
        
        public UIDeletemeterDocument2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Delete meter";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Device/Delete/81868";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost:2374/Device/Delete/81868";
            this.WindowTitles.Add("Delete meter");
            #endregion
        }
        
        #region Properties
        public HtmlInputButton UIDeleteButton
        {
            get
            {
                if ((this.mUIDeleteButton == null))
                {
                    this.mUIDeleteButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.Id] = "Submit";
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.Name] = "Submit";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.DisplayText] = "Delete";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.Class] = null;
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "id=Submit value=Delete type=submit name=";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "1";
                    this.mUIDeleteButton.WindowTitles.Add("Delete meter");
                    #endregion
                }
                return this.mUIDeleteButton;
            }
        }
        #endregion
        
        #region Fields
        private HtmlInputButton mUIDeleteButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIMetergroupsInternetEWindow3 : BrowserWindow
    {
        
        public UIMetergroupsInternetEWindow3()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Meter groups";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Meter groups");
            this.WindowTitles.Add("Meters associated with group \"single\"");
            this.WindowTitles.Add("Delete meter");
            this.WindowTitles.Add("Delete the device group");
            this.WindowTitles.Add("Welcome Rational City");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIDeletethedevicegroupDocument6 UIDeletethedevicegroupDocument
        {
            get
            {
                if ((this.mUIDeletethedevicegroupDocument == null))
                {
                    this.mUIDeletethedevicegroupDocument = new UIDeletethedevicegroupDocument6(this);
                }
                return this.mUIDeletethedevicegroupDocument;
            }
        }
        #endregion
        
        #region Fields
        private UIDeletethedevicegroupDocument6 mUIDeletethedevicegroupDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDeletethedevicegroupDocument6 : HtmlDocument
    {
        
        public UIDeletethedevicegroupDocument6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Delete the device group";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Group/Delete/102";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost:2374/Group/Delete/102";
            this.WindowTitles.Add("Delete the device group");
            #endregion
        }
        
        #region Properties
        public HtmlInputButton UIDeleteButton
        {
            get
            {
                if ((this.mUIDeleteButton == null))
                {
                    this.mUIDeleteButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.Id] = "Submit";
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.Name] = "Submit";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.DisplayText] = "Delete";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.Class] = null;
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "id=Submit value=Delete type=submit name=";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "1";
                    this.mUIDeleteButton.WindowTitles.Add("Delete the device group");
                    #endregion
                }
                return this.mUIDeleteButton;
            }
        }
        #endregion
        
        #region Fields
        private HtmlInputButton mUIDeleteButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIBlankPageInternetExpWindow8 : BrowserWindow
    {
        
        public UIBlankPageInternetExpWindow8()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Blank Page";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Blank Page");
            this.WindowTitles.Add("Welcome Rational City");
            this.WindowTitles.Add("Log On");
            this.WindowTitles.Add("Meter groups");
            this.WindowTitles.Add("Create new meter records for IP-range");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIBlankPageInternetExpWindow9 : BrowserWindow
    {
        
        public UIBlankPageInternetExpWindow9()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Blank Page";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Blank Page");
            this.WindowTitles.Add("Welcome Rational City");
            this.WindowTitles.Add("Log On");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIMetergroupsInternetEWindow4 : BrowserWindow
    {
        
        public UIMetergroupsInternetEWindow4()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Meter groups";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Meter groups");
            this.WindowTitles.Add("Delete the device group");
            this.WindowTitles.Add("Welcome Rational City");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIDeletethedevicegroupDocument7 UIDeletethedevicegroupDocument
        {
            get
            {
                if ((this.mUIDeletethedevicegroupDocument == null))
                {
                    this.mUIDeletethedevicegroupDocument = new UIDeletethedevicegroupDocument7(this);
                }
                return this.mUIDeletethedevicegroupDocument;
            }
        }
        #endregion
        
        #region Fields
        private UIDeletethedevicegroupDocument7 mUIDeletethedevicegroupDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDeletethedevicegroupDocument7 : HtmlDocument
    {
        
        public UIDeletethedevicegroupDocument7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Delete the device group";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Group/Delete/106";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost:2374/Group/Delete/106";
            this.WindowTitles.Add("Delete the device group");
            #endregion
        }
        
        #region Properties
        public HtmlInputButton UIDeleteButton
        {
            get
            {
                if ((this.mUIDeleteButton == null))
                {
                    this.mUIDeleteButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.Id] = "Submit";
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.Name] = "Submit";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.DisplayText] = "Delete";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.Class] = null;
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "id=Submit value=Delete type=submit name=";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "1";
                    this.mUIDeleteButton.WindowTitles.Add("Delete the device group");
                    #endregion
                }
                return this.mUIDeleteButton;
            }
        }
        #endregion
        
        #region Fields
        private HtmlInputButton mUIDeleteButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIBlankPageInternetExpWindow10 : BrowserWindow
    {
        
        public UIBlankPageInternetExpWindow10()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Blank Page";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Blank Page");
            this.WindowTitles.Add("Welcome Rational City");
            this.WindowTitles.Add("Log On");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIWelcomeRationalCityIWindow : BrowserWindow
    {
        
        public UIWelcomeRationalCityIWindow()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Welcome Rational City";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Welcome Rational City");
            this.WindowTitles.Add("Meter groups");
            this.WindowTitles.Add("Edit meter group properties");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIEditmetergroupproperDocument UIEditmetergroupproperDocument
        {
            get
            {
                if ((this.mUIEditmetergroupproperDocument == null))
                {
                    this.mUIEditmetergroupproperDocument = new UIEditmetergroupproperDocument(this);
                }
                return this.mUIEditmetergroupproperDocument;
            }
        }
        #endregion
        
        #region Fields
        private UIEditmetergroupproperDocument mUIEditmetergroupproperDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIEditmetergroupproperDocument : HtmlDocument
    {
        
        public UIEditmetergroupproperDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Edit meter group properties";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Group/Edit/113";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost:2374/Group/Edit/113";
            this.WindowTitles.Add("Edit meter group properties");
            #endregion
        }
        
        #region Properties
        public HtmlEdit UIGroupnameEdit
        {
            get
            {
                if ((this.mUIGroupnameEdit == null))
                {
                    this.mUIGroupnameEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIGroupnameEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "Name";
                    this.mUIGroupnameEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "Name";
                    this.mUIGroupnameEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Group name";
                    this.mUIGroupnameEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIGroupnameEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIGroupnameEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "text-box single-line";
                    this.mUIGroupnameEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "id=Name class=\"text-box single-line\" val";
                    this.mUIGroupnameEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "3";
                    this.mUIGroupnameEdit.WindowTitles.Add("Edit meter group properties");
                    #endregion
                }
                return this.mUIGroupnameEdit;
            }
        }
        
        public HtmlComboBox UIMetertypeComboBox
        {
            get
            {
                if ((this.mUIMetertypeComboBox == null))
                {
                    this.mUIMetertypeComboBox = new HtmlComboBox(this);
                    #region Search Criteria
                    this.mUIMetertypeComboBox.SearchProperties[HtmlComboBox.PropertyNames.Id] = "DeviceTypeID";
                    this.mUIMetertypeComboBox.SearchProperties[HtmlComboBox.PropertyNames.Name] = "DeviceTypeID";
                    this.mUIMetertypeComboBox.FilterProperties[HtmlComboBox.PropertyNames.Size] = "0";
                    this.mUIMetertypeComboBox.FilterProperties[HtmlComboBox.PropertyNames.LabeledBy] = "Meter type";
                    this.mUIMetertypeComboBox.FilterProperties[HtmlComboBox.PropertyNames.Title] = null;
                    this.mUIMetertypeComboBox.FilterProperties[HtmlComboBox.PropertyNames.ItemCount] = "1";
                    this.mUIMetertypeComboBox.FilterProperties[HtmlComboBox.PropertyNames.Class] = null;
                    this.mUIMetertypeComboBox.FilterProperties[HtmlComboBox.PropertyNames.ControlDefinition] = "id=DeviceTypeID name=DeviceTypeID";
                    this.mUIMetertypeComboBox.FilterProperties[HtmlComboBox.PropertyNames.TagInstance] = "1";
                    this.mUIMetertypeComboBox.WindowTitles.Add("Edit meter group properties");
                    #endregion
                }
                return this.mUIMetertypeComboBox;
            }
        }
        
        public HtmlRadioButton UIMinModeRadioButton
        {
            get
            {
                if ((this.mUIMinModeRadioButton == null))
                {
                    this.mUIMinModeRadioButton = new HtmlRadioButton(this);
                    #region Search Criteria
                    this.mUIMinModeRadioButton.SearchProperties[HtmlRadioButton.PropertyNames.Id] = "MinMode";
                    this.mUIMinModeRadioButton.SearchProperties[HtmlRadioButton.PropertyNames.Name] = "MinMode";
                    this.mUIMinModeRadioButton.FilterProperties[HtmlRadioButton.PropertyNames.Value] = "ENM";
                    this.mUIMinModeRadioButton.FilterProperties[HtmlRadioButton.PropertyNames.LabeledBy] = null;
                    this.mUIMinModeRadioButton.FilterProperties[HtmlRadioButton.PropertyNames.Title] = null;
                    this.mUIMinModeRadioButton.FilterProperties[HtmlRadioButton.PropertyNames.ItemCount] = "2";
                    this.mUIMinModeRadioButton.FilterProperties[HtmlRadioButton.PropertyNames.Class] = null;
                    this.mUIMinModeRadioButton.FilterProperties[HtmlRadioButton.PropertyNames.ControlDefinition] = "id=MinMode value=ENM type=radio name=Min";
                    this.mUIMinModeRadioButton.FilterProperties[HtmlRadioButton.PropertyNames.TagInstance] = "4";
                    this.mUIMinModeRadioButton.WindowTitles.Add("Edit meter group properties");
                    #endregion
                }
                return this.mUIMinModeRadioButton;
            }
        }
        
        public HtmlComboBox UIMinutesEComboBox
        {
            get
            {
                if ((this.mUIMinutesEComboBox == null))
                {
                    this.mUIMinutesEComboBox = new HtmlComboBox(this);
                    #region Search Criteria
                    this.mUIMinutesEComboBox.SearchProperties[HtmlComboBox.PropertyNames.Id] = "MinutesE";
                    this.mUIMinutesEComboBox.SearchProperties[HtmlComboBox.PropertyNames.Name] = "MinutesE";
                    this.mUIMinutesEComboBox.FilterProperties[HtmlComboBox.PropertyNames.Size] = "0";
                    this.mUIMinutesEComboBox.FilterProperties[HtmlComboBox.PropertyNames.LabeledBy] = null;
                    this.mUIMinutesEComboBox.FilterProperties[HtmlComboBox.PropertyNames.Title] = null;
                    this.mUIMinutesEComboBox.FilterProperties[HtmlComboBox.PropertyNames.ItemCount] = "7";
                    this.mUIMinutesEComboBox.FilterProperties[HtmlComboBox.PropertyNames.Class] = null;
                    this.mUIMinutesEComboBox.FilterProperties[HtmlComboBox.PropertyNames.ControlDefinition] = "id=MinutesE name=MinutesE";
                    this.mUIMinutesEComboBox.FilterProperties[HtmlComboBox.PropertyNames.TagInstance] = "2";
                    this.mUIMinutesEComboBox.WindowTitles.Add("Edit meter group properties");
                    #endregion
                }
                return this.mUIMinutesEComboBox;
            }
        }
        
        public HtmlComboBox UIMinutesGComboBox
        {
            get
            {
                if ((this.mUIMinutesGComboBox == null))
                {
                    this.mUIMinutesGComboBox = new HtmlComboBox(this);
                    #region Search Criteria
                    this.mUIMinutesGComboBox.SearchProperties[HtmlComboBox.PropertyNames.Id] = "MinutesG";
                    this.mUIMinutesGComboBox.SearchProperties[HtmlComboBox.PropertyNames.Name] = "MinutesG";
                    this.mUIMinutesGComboBox.FilterProperties[HtmlComboBox.PropertyNames.Size] = "0";
                    this.mUIMinutesGComboBox.FilterProperties[HtmlComboBox.PropertyNames.LabeledBy] = null;
                    this.mUIMinutesGComboBox.FilterProperties[HtmlComboBox.PropertyNames.Title] = null;
                    this.mUIMinutesGComboBox.FilterProperties[HtmlComboBox.PropertyNames.ItemCount] = "12";
                    this.mUIMinutesGComboBox.FilterProperties[HtmlComboBox.PropertyNames.Class] = null;
                    this.mUIMinutesGComboBox.FilterProperties[HtmlComboBox.PropertyNames.ControlDefinition] = "id=MinutesG name=MinutesG";
                    this.mUIMinutesGComboBox.FilterProperties[HtmlComboBox.PropertyNames.TagInstance] = "3";
                    this.mUIMinutesGComboBox.WindowTitles.Add("Edit meter group properties");
                    #endregion
                }
                return this.mUIMinutesGComboBox;
            }
        }
        
        public HtmlRadioButton UIHourModeRadioButton
        {
            get
            {
                if ((this.mUIHourModeRadioButton == null))
                {
                    this.mUIHourModeRadioButton = new HtmlRadioButton(this);
                    #region Search Criteria
                    this.mUIHourModeRadioButton.SearchProperties[HtmlRadioButton.PropertyNames.Id] = "HourMode";
                    this.mUIHourModeRadioButton.SearchProperties[HtmlRadioButton.PropertyNames.Name] = "HourMode";
                    this.mUIHourModeRadioButton.FilterProperties[HtmlRadioButton.PropertyNames.Value] = "ENH";
                    this.mUIHourModeRadioButton.FilterProperties[HtmlRadioButton.PropertyNames.LabeledBy] = null;
                    this.mUIHourModeRadioButton.FilterProperties[HtmlRadioButton.PropertyNames.Title] = null;
                    this.mUIHourModeRadioButton.FilterProperties[HtmlRadioButton.PropertyNames.ItemCount] = "2";
                    this.mUIHourModeRadioButton.FilterProperties[HtmlRadioButton.PropertyNames.Class] = null;
                    this.mUIHourModeRadioButton.FilterProperties[HtmlRadioButton.PropertyNames.ControlDefinition] = "id=HourMode value=ENH type=radio name=Ho";
                    this.mUIHourModeRadioButton.FilterProperties[HtmlRadioButton.PropertyNames.TagInstance] = "6";
                    this.mUIHourModeRadioButton.WindowTitles.Add("Edit meter group properties");
                    #endregion
                }
                return this.mUIHourModeRadioButton;
            }
        }
        
        public HtmlComboBox UIHoursEComboBox
        {
            get
            {
                if ((this.mUIHoursEComboBox == null))
                {
                    this.mUIHoursEComboBox = new HtmlComboBox(this);
                    #region Search Criteria
                    this.mUIHoursEComboBox.SearchProperties[HtmlComboBox.PropertyNames.Id] = "HoursE";
                    this.mUIHoursEComboBox.SearchProperties[HtmlComboBox.PropertyNames.Name] = "HoursE";
                    this.mUIHoursEComboBox.FilterProperties[HtmlComboBox.PropertyNames.Size] = "0";
                    this.mUIHoursEComboBox.FilterProperties[HtmlComboBox.PropertyNames.LabeledBy] = null;
                    this.mUIHoursEComboBox.FilterProperties[HtmlComboBox.PropertyNames.Title] = null;
                    this.mUIHoursEComboBox.FilterProperties[HtmlComboBox.PropertyNames.ItemCount] = "5";
                    this.mUIHoursEComboBox.FilterProperties[HtmlComboBox.PropertyNames.Class] = null;
                    this.mUIHoursEComboBox.FilterProperties[HtmlComboBox.PropertyNames.ControlDefinition] = "id=HoursE name=HoursE";
                    this.mUIHoursEComboBox.FilterProperties[HtmlComboBox.PropertyNames.TagInstance] = "4";
                    this.mUIHoursEComboBox.WindowTitles.Add("Edit meter group properties");
                    #endregion
                }
                return this.mUIHoursEComboBox;
            }
        }
        
        public HtmlComboBox UIHoursGComboBox
        {
            get
            {
                if ((this.mUIHoursGComboBox == null))
                {
                    this.mUIHoursGComboBox = new HtmlComboBox(this);
                    #region Search Criteria
                    this.mUIHoursGComboBox.SearchProperties[HtmlComboBox.PropertyNames.Id] = "HoursG";
                    this.mUIHoursGComboBox.SearchProperties[HtmlComboBox.PropertyNames.Name] = "HoursG";
                    this.mUIHoursGComboBox.FilterProperties[HtmlComboBox.PropertyNames.Size] = "0";
                    this.mUIHoursGComboBox.FilterProperties[HtmlComboBox.PropertyNames.LabeledBy] = null;
                    this.mUIHoursGComboBox.FilterProperties[HtmlComboBox.PropertyNames.Title] = null;
                    this.mUIHoursGComboBox.FilterProperties[HtmlComboBox.PropertyNames.ItemCount] = "24";
                    this.mUIHoursGComboBox.FilterProperties[HtmlComboBox.PropertyNames.Class] = null;
                    this.mUIHoursGComboBox.FilterProperties[HtmlComboBox.PropertyNames.ControlDefinition] = "id=HoursG name=HoursG";
                    this.mUIHoursGComboBox.FilterProperties[HtmlComboBox.PropertyNames.TagInstance] = "5";
                    this.mUIHoursGComboBox.WindowTitles.Add("Edit meter group properties");
                    #endregion
                }
                return this.mUIHoursGComboBox;
            }
        }
        
        public HtmlRadioButton UIDayModeRadioButton
        {
            get
            {
                if ((this.mUIDayModeRadioButton == null))
                {
                    this.mUIDayModeRadioButton = new HtmlRadioButton(this);
                    #region Search Criteria
                    this.mUIDayModeRadioButton.SearchProperties[HtmlRadioButton.PropertyNames.Id] = "DayMode";
                    this.mUIDayModeRadioButton.SearchProperties[HtmlRadioButton.PropertyNames.Name] = "DayMode";
                    this.mUIDayModeRadioButton.FilterProperties[HtmlRadioButton.PropertyNames.Value] = "END";
                    this.mUIDayModeRadioButton.FilterProperties[HtmlRadioButton.PropertyNames.LabeledBy] = null;
                    this.mUIDayModeRadioButton.FilterProperties[HtmlRadioButton.PropertyNames.Title] = null;
                    this.mUIDayModeRadioButton.FilterProperties[HtmlRadioButton.PropertyNames.ItemCount] = "3";
                    this.mUIDayModeRadioButton.FilterProperties[HtmlRadioButton.PropertyNames.Class] = null;
                    this.mUIDayModeRadioButton.FilterProperties[HtmlRadioButton.PropertyNames.ControlDefinition] = "id=DayMode value=END type=radio name=Day";
                    this.mUIDayModeRadioButton.FilterProperties[HtmlRadioButton.PropertyNames.TagInstance] = "8";
                    this.mUIDayModeRadioButton.WindowTitles.Add("Edit meter group properties");
                    #endregion
                }
                return this.mUIDayModeRadioButton;
            }
        }
        
        public HtmlComboBox UIDaysEComboBox
        {
            get
            {
                if ((this.mUIDaysEComboBox == null))
                {
                    this.mUIDaysEComboBox = new HtmlComboBox(this);
                    #region Search Criteria
                    this.mUIDaysEComboBox.SearchProperties[HtmlComboBox.PropertyNames.Id] = "DaysE";
                    this.mUIDaysEComboBox.SearchProperties[HtmlComboBox.PropertyNames.Name] = "DaysE";
                    this.mUIDaysEComboBox.FilterProperties[HtmlComboBox.PropertyNames.Size] = "0";
                    this.mUIDaysEComboBox.FilterProperties[HtmlComboBox.PropertyNames.LabeledBy] = null;
                    this.mUIDaysEComboBox.FilterProperties[HtmlComboBox.PropertyNames.Title] = null;
                    this.mUIDaysEComboBox.FilterProperties[HtmlComboBox.PropertyNames.ItemCount] = "7";
                    this.mUIDaysEComboBox.FilterProperties[HtmlComboBox.PropertyNames.Class] = null;
                    this.mUIDaysEComboBox.FilterProperties[HtmlComboBox.PropertyNames.ControlDefinition] = "id=DaysE name=DaysE";
                    this.mUIDaysEComboBox.FilterProperties[HtmlComboBox.PropertyNames.TagInstance] = "6";
                    this.mUIDaysEComboBox.WindowTitles.Add("Edit meter group properties");
                    #endregion
                }
                return this.mUIDaysEComboBox;
            }
        }
        
        public HtmlComboBox UIDaysGComboBox
        {
            get
            {
                if ((this.mUIDaysGComboBox == null))
                {
                    this.mUIDaysGComboBox = new HtmlComboBox(this);
                    #region Search Criteria
                    this.mUIDaysGComboBox.SearchProperties[HtmlComboBox.PropertyNames.Id] = "DaysG";
                    this.mUIDaysGComboBox.SearchProperties[HtmlComboBox.PropertyNames.Name] = "DaysG";
                    this.mUIDaysGComboBox.FilterProperties[HtmlComboBox.PropertyNames.Size] = "0";
                    this.mUIDaysGComboBox.FilterProperties[HtmlComboBox.PropertyNames.LabeledBy] = null;
                    this.mUIDaysGComboBox.FilterProperties[HtmlComboBox.PropertyNames.Title] = null;
                    this.mUIDaysGComboBox.FilterProperties[HtmlComboBox.PropertyNames.ItemCount] = "28";
                    this.mUIDaysGComboBox.FilterProperties[HtmlComboBox.PropertyNames.Class] = null;
                    this.mUIDaysGComboBox.FilterProperties[HtmlComboBox.PropertyNames.ControlDefinition] = "id=DaysG name=DaysG";
                    this.mUIDaysGComboBox.FilterProperties[HtmlComboBox.PropertyNames.TagInstance] = "7";
                    this.mUIDaysGComboBox.WindowTitles.Add("Edit meter group properties");
                    #endregion
                }
                return this.mUIDaysGComboBox;
            }
        }
        
        public HtmlCheckBox UIMondayCheckBox
        {
            get
            {
                if ((this.mUIMondayCheckBox == null))
                {
                    this.mUIMondayCheckBox = new HtmlCheckBox(this);
                    #region Search Criteria
                    this.mUIMondayCheckBox.SearchProperties[HtmlCheckBox.PropertyNames.Id] = "Monday";
                    this.mUIMondayCheckBox.SearchProperties[HtmlCheckBox.PropertyNames.Name] = "Monday";
                    this.mUIMondayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Value] = "true";
                    this.mUIMondayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.LabeledBy] = null;
                    this.mUIMondayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Title] = null;
                    this.mUIMondayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Class] = null;
                    this.mUIMondayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.ControlDefinition] = "id=Monday value=true type=checkbox name=";
                    this.mUIMondayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.TagInstance] = "11";
                    this.mUIMondayCheckBox.WindowTitles.Add("Edit meter group properties");
                    #endregion
                }
                return this.mUIMondayCheckBox;
            }
        }
        
        public HtmlCheckBox UITuesdayCheckBox
        {
            get
            {
                if ((this.mUITuesdayCheckBox == null))
                {
                    this.mUITuesdayCheckBox = new HtmlCheckBox(this);
                    #region Search Criteria
                    this.mUITuesdayCheckBox.SearchProperties[HtmlCheckBox.PropertyNames.Id] = "Tuesday";
                    this.mUITuesdayCheckBox.SearchProperties[HtmlCheckBox.PropertyNames.Name] = "Tuesday";
                    this.mUITuesdayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Value] = "true";
                    this.mUITuesdayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.LabeledBy] = null;
                    this.mUITuesdayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Title] = null;
                    this.mUITuesdayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Class] = null;
                    this.mUITuesdayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.ControlDefinition] = "id=Tuesday value=true type=checkbox name";
                    this.mUITuesdayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.TagInstance] = "13";
                    this.mUITuesdayCheckBox.WindowTitles.Add("Edit meter group properties");
                    #endregion
                }
                return this.mUITuesdayCheckBox;
            }
        }
        
        public HtmlCheckBox UIWednesdayCheckBox
        {
            get
            {
                if ((this.mUIWednesdayCheckBox == null))
                {
                    this.mUIWednesdayCheckBox = new HtmlCheckBox(this);
                    #region Search Criteria
                    this.mUIWednesdayCheckBox.SearchProperties[HtmlCheckBox.PropertyNames.Id] = "Wednesday";
                    this.mUIWednesdayCheckBox.SearchProperties[HtmlCheckBox.PropertyNames.Name] = "Wednesday";
                    this.mUIWednesdayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Value] = "true";
                    this.mUIWednesdayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.LabeledBy] = null;
                    this.mUIWednesdayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Title] = null;
                    this.mUIWednesdayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Class] = null;
                    this.mUIWednesdayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.ControlDefinition] = "id=Wednesday value=true type=checkbox na";
                    this.mUIWednesdayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.TagInstance] = "15";
                    this.mUIWednesdayCheckBox.WindowTitles.Add("Edit meter group properties");
                    #endregion
                }
                return this.mUIWednesdayCheckBox;
            }
        }
        
        public HtmlCheckBox UIThursdayCheckBox
        {
            get
            {
                if ((this.mUIThursdayCheckBox == null))
                {
                    this.mUIThursdayCheckBox = new HtmlCheckBox(this);
                    #region Search Criteria
                    this.mUIThursdayCheckBox.SearchProperties[HtmlCheckBox.PropertyNames.Id] = "Thursday";
                    this.mUIThursdayCheckBox.SearchProperties[HtmlCheckBox.PropertyNames.Name] = "Thursday";
                    this.mUIThursdayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Value] = "true";
                    this.mUIThursdayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.LabeledBy] = null;
                    this.mUIThursdayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Title] = null;
                    this.mUIThursdayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Class] = null;
                    this.mUIThursdayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.ControlDefinition] = "id=Thursday value=true type=checkbox nam";
                    this.mUIThursdayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.TagInstance] = "17";
                    this.mUIThursdayCheckBox.WindowTitles.Add("Edit meter group properties");
                    #endregion
                }
                return this.mUIThursdayCheckBox;
            }
        }
        
        public HtmlCheckBox UIFridayCheckBox
        {
            get
            {
                if ((this.mUIFridayCheckBox == null))
                {
                    this.mUIFridayCheckBox = new HtmlCheckBox(this);
                    #region Search Criteria
                    this.mUIFridayCheckBox.SearchProperties[HtmlCheckBox.PropertyNames.Id] = "Friday";
                    this.mUIFridayCheckBox.SearchProperties[HtmlCheckBox.PropertyNames.Name] = "Friday";
                    this.mUIFridayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Value] = "true";
                    this.mUIFridayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.LabeledBy] = null;
                    this.mUIFridayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Title] = null;
                    this.mUIFridayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Class] = null;
                    this.mUIFridayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.ControlDefinition] = "id=Friday value=true type=checkbox name=";
                    this.mUIFridayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.TagInstance] = "19";
                    this.mUIFridayCheckBox.WindowTitles.Add("Edit meter group properties");
                    #endregion
                }
                return this.mUIFridayCheckBox;
            }
        }
        
        public HtmlCheckBox UISaturdayCheckBox
        {
            get
            {
                if ((this.mUISaturdayCheckBox == null))
                {
                    this.mUISaturdayCheckBox = new HtmlCheckBox(this);
                    #region Search Criteria
                    this.mUISaturdayCheckBox.SearchProperties[HtmlCheckBox.PropertyNames.Id] = "Saturday";
                    this.mUISaturdayCheckBox.SearchProperties[HtmlCheckBox.PropertyNames.Name] = "Saturday";
                    this.mUISaturdayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Value] = "true";
                    this.mUISaturdayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.LabeledBy] = null;
                    this.mUISaturdayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Title] = null;
                    this.mUISaturdayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Class] = null;
                    this.mUISaturdayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.ControlDefinition] = "id=Saturday value=true type=checkbox nam";
                    this.mUISaturdayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.TagInstance] = "21";
                    this.mUISaturdayCheckBox.WindowTitles.Add("Edit meter group properties");
                    #endregion
                }
                return this.mUISaturdayCheckBox;
            }
        }
        
        public HtmlCheckBox UISundayCheckBox
        {
            get
            {
                if ((this.mUISundayCheckBox == null))
                {
                    this.mUISundayCheckBox = new HtmlCheckBox(this);
                    #region Search Criteria
                    this.mUISundayCheckBox.SearchProperties[HtmlCheckBox.PropertyNames.Id] = "Sunday";
                    this.mUISundayCheckBox.SearchProperties[HtmlCheckBox.PropertyNames.Name] = "Sunday";
                    this.mUISundayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Value] = "true";
                    this.mUISundayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.LabeledBy] = null;
                    this.mUISundayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Title] = null;
                    this.mUISundayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Class] = null;
                    this.mUISundayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.ControlDefinition] = "id=Sunday value=true type=checkbox name=";
                    this.mUISundayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.TagInstance] = "23";
                    this.mUISundayCheckBox.WindowTitles.Add("Edit meter group properties");
                    #endregion
                }
                return this.mUISundayCheckBox;
            }
        }
        
        public HtmlRadioButton UIWeekModeRadioButton
        {
            get
            {
                if ((this.mUIWeekModeRadioButton == null))
                {
                    this.mUIWeekModeRadioButton = new HtmlRadioButton(this);
                    #region Search Criteria
                    this.mUIWeekModeRadioButton.SearchProperties[HtmlRadioButton.PropertyNames.Id] = "WeekMode";
                    this.mUIWeekModeRadioButton.SearchProperties[HtmlRadioButton.PropertyNames.Name] = "WeekMode";
                    this.mUIWeekModeRadioButton.FilterProperties[HtmlRadioButton.PropertyNames.Value] = "EW";
                    this.mUIWeekModeRadioButton.FilterProperties[HtmlRadioButton.PropertyNames.LabeledBy] = null;
                    this.mUIWeekModeRadioButton.FilterProperties[HtmlRadioButton.PropertyNames.Title] = null;
                    this.mUIWeekModeRadioButton.FilterProperties[HtmlRadioButton.PropertyNames.ItemCount] = "2";
                    this.mUIWeekModeRadioButton.FilterProperties[HtmlRadioButton.PropertyNames.Class] = null;
                    this.mUIWeekModeRadioButton.FilterProperties[HtmlRadioButton.PropertyNames.ControlDefinition] = "id=WeekMode value=EW type=radio name=Wee";
                    this.mUIWeekModeRadioButton.FilterProperties[HtmlRadioButton.PropertyNames.TagInstance] = "25";
                    this.mUIWeekModeRadioButton.WindowTitles.Add("Edit meter group properties");
                    #endregion
                }
                return this.mUIWeekModeRadioButton;
            }
        }
        
        public UIMainPane7 UIMainPane
        {
            get
            {
                if ((this.mUIMainPane == null))
                {
                    this.mUIMainPane = new UIMainPane7(this);
                }
                return this.mUIMainPane;
            }
        }
        #endregion
        
        #region Fields
        private HtmlEdit mUIGroupnameEdit;
        
        private HtmlComboBox mUIMetertypeComboBox;
        
        private HtmlRadioButton mUIMinModeRadioButton;
        
        private HtmlComboBox mUIMinutesEComboBox;
        
        private HtmlComboBox mUIMinutesGComboBox;
        
        private HtmlRadioButton mUIHourModeRadioButton;
        
        private HtmlComboBox mUIHoursEComboBox;
        
        private HtmlComboBox mUIHoursGComboBox;
        
        private HtmlRadioButton mUIDayModeRadioButton;
        
        private HtmlComboBox mUIDaysEComboBox;
        
        private HtmlComboBox mUIDaysGComboBox;
        
        private HtmlCheckBox mUIMondayCheckBox;
        
        private HtmlCheckBox mUITuesdayCheckBox;
        
        private HtmlCheckBox mUIWednesdayCheckBox;
        
        private HtmlCheckBox mUIThursdayCheckBox;
        
        private HtmlCheckBox mUIFridayCheckBox;
        
        private HtmlCheckBox mUISaturdayCheckBox;
        
        private HtmlCheckBox mUISundayCheckBox;
        
        private HtmlRadioButton mUIWeekModeRadioButton;
        
        private UIMainPane7 mUIMainPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIMainPane7 : HtmlDiv
    {
        
        public UIMainPane7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "main";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Edit meter group properties\r\nMeter Group";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=main";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "6";
            this.WindowTitles.Add("Edit meter group properties");
            #endregion
        }
        
        #region Properties
        public HtmlInputButton UISaveButton
        {
            get
            {
                if ((this.mUISaveButton == null))
                {
                    this.mUISaveButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUISaveButton.SearchProperties[HtmlButton.PropertyNames.Id] = null;
                    this.mUISaveButton.SearchProperties[HtmlButton.PropertyNames.Name] = null;
                    this.mUISaveButton.SearchProperties[HtmlButton.PropertyNames.DisplayText] = "Save";
                    this.mUISaveButton.FilterProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUISaveButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUISaveButton.FilterProperties[HtmlButton.PropertyNames.Class] = null;
                    this.mUISaveButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "value=Save type=submit";
                    this.mUISaveButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "27";
                    this.mUISaveButton.WindowTitles.Add("Edit meter group properties");
                    #endregion
                }
                return this.mUISaveButton;
            }
        }
        #endregion
        
        #region Fields
        private HtmlInputButton mUISaveButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIWelcomeRationalCityIWindow1 : BrowserWindow
    {
        
        public UIWelcomeRationalCityIWindow1()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Welcome Rational City";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Welcome Rational City");
            this.WindowTitles.Add("Meter groups");
            this.WindowTitles.Add("Details of meter group");
            this.WindowTitles.Add("Edit meter group properties");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIDetailsofmetergroupDocument UIDetailsofmetergroupDocument
        {
            get
            {
                if ((this.mUIDetailsofmetergroupDocument == null))
                {
                    this.mUIDetailsofmetergroupDocument = new UIDetailsofmetergroupDocument(this);
                }
                return this.mUIDetailsofmetergroupDocument;
            }
        }
        #endregion
        
        #region Fields
        private UIDetailsofmetergroupDocument mUIDetailsofmetergroupDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDetailsofmetergroupDocument : HtmlDocument
    {
        
        public UIDetailsofmetergroupDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Details of meter group";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Group/Details/150";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost:2374/Group/Details/150";
            this.WindowTitles.Add("Details of meter group");
            #endregion
        }
        
        #region Properties
        public UIMainPane8 UIMainPane
        {
            get
            {
                if ((this.mUIMainPane == null))
                {
                    this.mUIMainPane = new UIMainPane8(this);
                }
                return this.mUIMainPane;
            }
        }
        #endregion
        
        #region Fields
        private UIMainPane8 mUIMainPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIMainPane8 : HtmlDiv
    {
        
        public UIMainPane8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "main";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Details of meter group\r\nEdit Meter Group";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=main";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "6";
            this.WindowTitles.Add("Details of meter group");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIMeterGroupsHyperlink
        {
            get
            {
                if ((this.mUIMeterGroupsHyperlink == null))
                {
                    this.mUIMeterGroupsHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIMeterGroupsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIMeterGroupsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIMeterGroupsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIMeterGroupsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Meter Groups";
                    this.mUIMeterGroupsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Group";
                    this.mUIMeterGroupsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIMeterGroupsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:2374/Group";
                    this.mUIMeterGroupsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIMeterGroupsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/Group\"";
                    this.mUIMeterGroupsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "2";
                    this.mUIMeterGroupsHyperlink.WindowTitles.Add("Details of meter group");
                    #endregion
                }
                return this.mUIMeterGroupsHyperlink;
            }
        }
        
        public HtmlHyperlink UIEditHyperlink
        {
            get
            {
                if ((this.mUIEditHyperlink == null))
                {
                    this.mUIEditHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIEditHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIEditHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIEditHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIEditHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Edit";
                    this.mUIEditHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Group/Edit/150";
                    this.mUIEditHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIEditHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:2374/Group/Edit/150";
                    this.mUIEditHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIEditHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/Group//150\"";
                    this.mUIEditHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "1";
                    this.mUIEditHyperlink.WindowTitles.Add("Details of meter group");
                    #endregion
                }
                return this.mUIEditHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIMeterGroupsHyperlink;
        
        private HtmlHyperlink mUIEditHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIWelcomeRationalCityIWindow2 : BrowserWindow
    {
        
        public UIWelcomeRationalCityIWindow2()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Welcome Rational City";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Welcome Rational City");
            this.WindowTitles.Add("Meter groups");
            this.WindowTitles.Add("Details of meter group");
            this.WindowTitles.Add("Edit meter group properties");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIEditmetergroupproperDocument1 UIEditmetergroupproperDocument
        {
            get
            {
                if ((this.mUIEditmetergroupproperDocument == null))
                {
                    this.mUIEditmetergroupproperDocument = new UIEditmetergroupproperDocument1(this);
                }
                return this.mUIEditmetergroupproperDocument;
            }
        }
        #endregion
        
        #region Fields
        private UIEditmetergroupproperDocument1 mUIEditmetergroupproperDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIEditmetergroupproperDocument1 : HtmlDocument
    {
        
        public UIEditmetergroupproperDocument1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Edit meter group properties";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Group/Edit/150";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost:2374/Group/Edit/150";
            this.WindowTitles.Add("Edit meter group properties");
            #endregion
        }
        
        #region Properties
        public HtmlEdit UIGroupnameEdit
        {
            get
            {
                if ((this.mUIGroupnameEdit == null))
                {
                    this.mUIGroupnameEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIGroupnameEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "Name";
                    this.mUIGroupnameEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "Name";
                    this.mUIGroupnameEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Group name";
                    this.mUIGroupnameEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIGroupnameEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIGroupnameEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "text-box single-line";
                    this.mUIGroupnameEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "id=Name class=\"text-box single-line\" val";
                    this.mUIGroupnameEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "3";
                    this.mUIGroupnameEdit.WindowTitles.Add("Edit meter group properties");
                    #endregion
                }
                return this.mUIGroupnameEdit;
            }
        }
        
        public HtmlComboBox UIMetertypeComboBox
        {
            get
            {
                if ((this.mUIMetertypeComboBox == null))
                {
                    this.mUIMetertypeComboBox = new HtmlComboBox(this);
                    #region Search Criteria
                    this.mUIMetertypeComboBox.SearchProperties[HtmlComboBox.PropertyNames.Id] = "DeviceTypeID";
                    this.mUIMetertypeComboBox.SearchProperties[HtmlComboBox.PropertyNames.Name] = "DeviceTypeID";
                    this.mUIMetertypeComboBox.FilterProperties[HtmlComboBox.PropertyNames.Size] = "0";
                    this.mUIMetertypeComboBox.FilterProperties[HtmlComboBox.PropertyNames.LabeledBy] = "Meter type";
                    this.mUIMetertypeComboBox.FilterProperties[HtmlComboBox.PropertyNames.Title] = null;
                    this.mUIMetertypeComboBox.FilterProperties[HtmlComboBox.PropertyNames.ItemCount] = "1";
                    this.mUIMetertypeComboBox.FilterProperties[HtmlComboBox.PropertyNames.Class] = null;
                    this.mUIMetertypeComboBox.FilterProperties[HtmlComboBox.PropertyNames.ControlDefinition] = "id=DeviceTypeID name=DeviceTypeID";
                    this.mUIMetertypeComboBox.FilterProperties[HtmlComboBox.PropertyNames.TagInstance] = "1";
                    this.mUIMetertypeComboBox.WindowTitles.Add("Edit meter group properties");
                    #endregion
                }
                return this.mUIMetertypeComboBox;
            }
        }
        
        public HtmlRadioButton UIMinModeRadioButton
        {
            get
            {
                if ((this.mUIMinModeRadioButton == null))
                {
                    this.mUIMinModeRadioButton = new HtmlRadioButton(this);
                    #region Search Criteria
                    this.mUIMinModeRadioButton.SearchProperties[HtmlRadioButton.PropertyNames.Id] = "MinMode";
                    this.mUIMinModeRadioButton.SearchProperties[HtmlRadioButton.PropertyNames.Name] = "MinMode";
                    this.mUIMinModeRadioButton.FilterProperties[HtmlRadioButton.PropertyNames.Value] = "ENM";
                    this.mUIMinModeRadioButton.FilterProperties[HtmlRadioButton.PropertyNames.LabeledBy] = null;
                    this.mUIMinModeRadioButton.FilterProperties[HtmlRadioButton.PropertyNames.Title] = null;
                    this.mUIMinModeRadioButton.FilterProperties[HtmlRadioButton.PropertyNames.ItemCount] = "2";
                    this.mUIMinModeRadioButton.FilterProperties[HtmlRadioButton.PropertyNames.Class] = null;
                    this.mUIMinModeRadioButton.FilterProperties[HtmlRadioButton.PropertyNames.ControlDefinition] = "id=MinMode value=ENM type=radio name=Min";
                    this.mUIMinModeRadioButton.FilterProperties[HtmlRadioButton.PropertyNames.TagInstance] = "4";
                    this.mUIMinModeRadioButton.WindowTitles.Add("Edit meter group properties");
                    #endregion
                }
                return this.mUIMinModeRadioButton;
            }
        }
        
        public HtmlComboBox UIMinutesEComboBox
        {
            get
            {
                if ((this.mUIMinutesEComboBox == null))
                {
                    this.mUIMinutesEComboBox = new HtmlComboBox(this);
                    #region Search Criteria
                    this.mUIMinutesEComboBox.SearchProperties[HtmlComboBox.PropertyNames.Id] = "MinutesE";
                    this.mUIMinutesEComboBox.SearchProperties[HtmlComboBox.PropertyNames.Name] = "MinutesE";
                    this.mUIMinutesEComboBox.FilterProperties[HtmlComboBox.PropertyNames.Size] = "0";
                    this.mUIMinutesEComboBox.FilterProperties[HtmlComboBox.PropertyNames.LabeledBy] = null;
                    this.mUIMinutesEComboBox.FilterProperties[HtmlComboBox.PropertyNames.Title] = null;
                    this.mUIMinutesEComboBox.FilterProperties[HtmlComboBox.PropertyNames.ItemCount] = "7";
                    this.mUIMinutesEComboBox.FilterProperties[HtmlComboBox.PropertyNames.Class] = null;
                    this.mUIMinutesEComboBox.FilterProperties[HtmlComboBox.PropertyNames.ControlDefinition] = "id=MinutesE name=MinutesE";
                    this.mUIMinutesEComboBox.FilterProperties[HtmlComboBox.PropertyNames.TagInstance] = "2";
                    this.mUIMinutesEComboBox.WindowTitles.Add("Edit meter group properties");
                    #endregion
                }
                return this.mUIMinutesEComboBox;
            }
        }
        
        public HtmlRadioButton UIMinModeRadioButton1
        {
            get
            {
                if ((this.mUIMinModeRadioButton1 == null))
                {
                    this.mUIMinModeRadioButton1 = new HtmlRadioButton(this);
                    #region Search Criteria
                    this.mUIMinModeRadioButton1.SearchProperties[HtmlRadioButton.PropertyNames.Id] = "MinMode";
                    this.mUIMinModeRadioButton1.SearchProperties[HtmlRadioButton.PropertyNames.Name] = "MinMode";
                    this.mUIMinModeRadioButton1.FilterProperties[HtmlRadioButton.PropertyNames.Value] = "AGM";
                    this.mUIMinModeRadioButton1.FilterProperties[HtmlRadioButton.PropertyNames.LabeledBy] = null;
                    this.mUIMinModeRadioButton1.FilterProperties[HtmlRadioButton.PropertyNames.Title] = null;
                    this.mUIMinModeRadioButton1.FilterProperties[HtmlRadioButton.PropertyNames.ItemCount] = "2";
                    this.mUIMinModeRadioButton1.FilterProperties[HtmlRadioButton.PropertyNames.Class] = null;
                    this.mUIMinModeRadioButton1.FilterProperties[HtmlRadioButton.PropertyNames.ControlDefinition] = "id=MinMode value=AGM type=radio name=Min";
                    this.mUIMinModeRadioButton1.FilterProperties[HtmlRadioButton.PropertyNames.TagInstance] = "5";
                    this.mUIMinModeRadioButton1.WindowTitles.Add("Edit meter group properties");
                    #endregion
                }
                return this.mUIMinModeRadioButton1;
            }
        }
        
        public HtmlComboBox UIMinutesGComboBox
        {
            get
            {
                if ((this.mUIMinutesGComboBox == null))
                {
                    this.mUIMinutesGComboBox = new HtmlComboBox(this);
                    #region Search Criteria
                    this.mUIMinutesGComboBox.SearchProperties[HtmlComboBox.PropertyNames.Id] = "MinutesG";
                    this.mUIMinutesGComboBox.SearchProperties[HtmlComboBox.PropertyNames.Name] = "MinutesG";
                    this.mUIMinutesGComboBox.FilterProperties[HtmlComboBox.PropertyNames.Size] = "0";
                    this.mUIMinutesGComboBox.FilterProperties[HtmlComboBox.PropertyNames.LabeledBy] = null;
                    this.mUIMinutesGComboBox.FilterProperties[HtmlComboBox.PropertyNames.Title] = null;
                    this.mUIMinutesGComboBox.FilterProperties[HtmlComboBox.PropertyNames.ItemCount] = "12";
                    this.mUIMinutesGComboBox.FilterProperties[HtmlComboBox.PropertyNames.Class] = null;
                    this.mUIMinutesGComboBox.FilterProperties[HtmlComboBox.PropertyNames.ControlDefinition] = "id=MinutesG name=MinutesG";
                    this.mUIMinutesGComboBox.FilterProperties[HtmlComboBox.PropertyNames.TagInstance] = "3";
                    this.mUIMinutesGComboBox.WindowTitles.Add("Edit meter group properties");
                    #endregion
                }
                return this.mUIMinutesGComboBox;
            }
        }
        
        public HtmlRadioButton UIHourModeRadioButton
        {
            get
            {
                if ((this.mUIHourModeRadioButton == null))
                {
                    this.mUIHourModeRadioButton = new HtmlRadioButton(this);
                    #region Search Criteria
                    this.mUIHourModeRadioButton.SearchProperties[HtmlRadioButton.PropertyNames.Id] = "HourMode";
                    this.mUIHourModeRadioButton.SearchProperties[HtmlRadioButton.PropertyNames.Name] = "HourMode";
                    this.mUIHourModeRadioButton.FilterProperties[HtmlRadioButton.PropertyNames.Value] = "ENH";
                    this.mUIHourModeRadioButton.FilterProperties[HtmlRadioButton.PropertyNames.LabeledBy] = null;
                    this.mUIHourModeRadioButton.FilterProperties[HtmlRadioButton.PropertyNames.Title] = null;
                    this.mUIHourModeRadioButton.FilterProperties[HtmlRadioButton.PropertyNames.ItemCount] = "2";
                    this.mUIHourModeRadioButton.FilterProperties[HtmlRadioButton.PropertyNames.Class] = null;
                    this.mUIHourModeRadioButton.FilterProperties[HtmlRadioButton.PropertyNames.ControlDefinition] = "id=HourMode value=ENH type=radio name=Ho";
                    this.mUIHourModeRadioButton.FilterProperties[HtmlRadioButton.PropertyNames.TagInstance] = "6";
                    this.mUIHourModeRadioButton.WindowTitles.Add("Edit meter group properties");
                    #endregion
                }
                return this.mUIHourModeRadioButton;
            }
        }
        
        public HtmlComboBox UIHoursEComboBox
        {
            get
            {
                if ((this.mUIHoursEComboBox == null))
                {
                    this.mUIHoursEComboBox = new HtmlComboBox(this);
                    #region Search Criteria
                    this.mUIHoursEComboBox.SearchProperties[HtmlComboBox.PropertyNames.Id] = "HoursE";
                    this.mUIHoursEComboBox.SearchProperties[HtmlComboBox.PropertyNames.Name] = "HoursE";
                    this.mUIHoursEComboBox.FilterProperties[HtmlComboBox.PropertyNames.Size] = "0";
                    this.mUIHoursEComboBox.FilterProperties[HtmlComboBox.PropertyNames.LabeledBy] = null;
                    this.mUIHoursEComboBox.FilterProperties[HtmlComboBox.PropertyNames.Title] = null;
                    this.mUIHoursEComboBox.FilterProperties[HtmlComboBox.PropertyNames.ItemCount] = "5";
                    this.mUIHoursEComboBox.FilterProperties[HtmlComboBox.PropertyNames.Class] = null;
                    this.mUIHoursEComboBox.FilterProperties[HtmlComboBox.PropertyNames.ControlDefinition] = "id=HoursE name=HoursE";
                    this.mUIHoursEComboBox.FilterProperties[HtmlComboBox.PropertyNames.TagInstance] = "4";
                    this.mUIHoursEComboBox.WindowTitles.Add("Edit meter group properties");
                    #endregion
                }
                return this.mUIHoursEComboBox;
            }
        }
        
        public HtmlRadioButton UIHourModeRadioButton1
        {
            get
            {
                if ((this.mUIHourModeRadioButton1 == null))
                {
                    this.mUIHourModeRadioButton1 = new HtmlRadioButton(this);
                    #region Search Criteria
                    this.mUIHourModeRadioButton1.SearchProperties[HtmlRadioButton.PropertyNames.Id] = "HourMode";
                    this.mUIHourModeRadioButton1.SearchProperties[HtmlRadioButton.PropertyNames.Name] = "HourMode";
                    this.mUIHourModeRadioButton1.FilterProperties[HtmlRadioButton.PropertyNames.Value] = "AGH";
                    this.mUIHourModeRadioButton1.FilterProperties[HtmlRadioButton.PropertyNames.LabeledBy] = null;
                    this.mUIHourModeRadioButton1.FilterProperties[HtmlRadioButton.PropertyNames.Title] = null;
                    this.mUIHourModeRadioButton1.FilterProperties[HtmlRadioButton.PropertyNames.ItemCount] = "2";
                    this.mUIHourModeRadioButton1.FilterProperties[HtmlRadioButton.PropertyNames.Class] = null;
                    this.mUIHourModeRadioButton1.FilterProperties[HtmlRadioButton.PropertyNames.ControlDefinition] = "id=HourMode value=AGH type=radio name=Ho";
                    this.mUIHourModeRadioButton1.FilterProperties[HtmlRadioButton.PropertyNames.TagInstance] = "7";
                    this.mUIHourModeRadioButton1.WindowTitles.Add("Edit meter group properties");
                    #endregion
                }
                return this.mUIHourModeRadioButton1;
            }
        }
        
        public HtmlComboBox UIHoursGComboBox
        {
            get
            {
                if ((this.mUIHoursGComboBox == null))
                {
                    this.mUIHoursGComboBox = new HtmlComboBox(this);
                    #region Search Criteria
                    this.mUIHoursGComboBox.SearchProperties[HtmlComboBox.PropertyNames.Id] = "HoursG";
                    this.mUIHoursGComboBox.SearchProperties[HtmlComboBox.PropertyNames.Name] = "HoursG";
                    this.mUIHoursGComboBox.FilterProperties[HtmlComboBox.PropertyNames.Size] = "0";
                    this.mUIHoursGComboBox.FilterProperties[HtmlComboBox.PropertyNames.LabeledBy] = null;
                    this.mUIHoursGComboBox.FilterProperties[HtmlComboBox.PropertyNames.Title] = null;
                    this.mUIHoursGComboBox.FilterProperties[HtmlComboBox.PropertyNames.ItemCount] = "24";
                    this.mUIHoursGComboBox.FilterProperties[HtmlComboBox.PropertyNames.Class] = null;
                    this.mUIHoursGComboBox.FilterProperties[HtmlComboBox.PropertyNames.ControlDefinition] = "id=HoursG name=HoursG";
                    this.mUIHoursGComboBox.FilterProperties[HtmlComboBox.PropertyNames.TagInstance] = "5";
                    this.mUIHoursGComboBox.WindowTitles.Add("Edit meter group properties");
                    #endregion
                }
                return this.mUIHoursGComboBox;
            }
        }
        
        public HtmlRadioButton UIDayModeRadioButton
        {
            get
            {
                if ((this.mUIDayModeRadioButton == null))
                {
                    this.mUIDayModeRadioButton = new HtmlRadioButton(this);
                    #region Search Criteria
                    this.mUIDayModeRadioButton.SearchProperties[HtmlRadioButton.PropertyNames.Id] = "DayMode";
                    this.mUIDayModeRadioButton.SearchProperties[HtmlRadioButton.PropertyNames.Name] = "DayMode";
                    this.mUIDayModeRadioButton.FilterProperties[HtmlRadioButton.PropertyNames.Value] = "END";
                    this.mUIDayModeRadioButton.FilterProperties[HtmlRadioButton.PropertyNames.LabeledBy] = null;
                    this.mUIDayModeRadioButton.FilterProperties[HtmlRadioButton.PropertyNames.Title] = null;
                    this.mUIDayModeRadioButton.FilterProperties[HtmlRadioButton.PropertyNames.ItemCount] = "3";
                    this.mUIDayModeRadioButton.FilterProperties[HtmlRadioButton.PropertyNames.Class] = null;
                    this.mUIDayModeRadioButton.FilterProperties[HtmlRadioButton.PropertyNames.ControlDefinition] = "id=DayMode value=END type=radio name=Day";
                    this.mUIDayModeRadioButton.FilterProperties[HtmlRadioButton.PropertyNames.TagInstance] = "8";
                    this.mUIDayModeRadioButton.WindowTitles.Add("Edit meter group properties");
                    #endregion
                }
                return this.mUIDayModeRadioButton;
            }
        }
        
        public HtmlComboBox UIDaysEComboBox
        {
            get
            {
                if ((this.mUIDaysEComboBox == null))
                {
                    this.mUIDaysEComboBox = new HtmlComboBox(this);
                    #region Search Criteria
                    this.mUIDaysEComboBox.SearchProperties[HtmlComboBox.PropertyNames.Id] = "DaysE";
                    this.mUIDaysEComboBox.SearchProperties[HtmlComboBox.PropertyNames.Name] = "DaysE";
                    this.mUIDaysEComboBox.FilterProperties[HtmlComboBox.PropertyNames.Size] = "0";
                    this.mUIDaysEComboBox.FilterProperties[HtmlComboBox.PropertyNames.LabeledBy] = null;
                    this.mUIDaysEComboBox.FilterProperties[HtmlComboBox.PropertyNames.Title] = null;
                    this.mUIDaysEComboBox.FilterProperties[HtmlComboBox.PropertyNames.ItemCount] = "7";
                    this.mUIDaysEComboBox.FilterProperties[HtmlComboBox.PropertyNames.Class] = null;
                    this.mUIDaysEComboBox.FilterProperties[HtmlComboBox.PropertyNames.ControlDefinition] = "id=DaysE name=DaysE";
                    this.mUIDaysEComboBox.FilterProperties[HtmlComboBox.PropertyNames.TagInstance] = "6";
                    this.mUIDaysEComboBox.WindowTitles.Add("Edit meter group properties");
                    #endregion
                }
                return this.mUIDaysEComboBox;
            }
        }
        
        public HtmlRadioButton UIDayModeRadioButton1
        {
            get
            {
                if ((this.mUIDayModeRadioButton1 == null))
                {
                    this.mUIDayModeRadioButton1 = new HtmlRadioButton(this);
                    #region Search Criteria
                    this.mUIDayModeRadioButton1.SearchProperties[HtmlRadioButton.PropertyNames.Id] = "DayMode";
                    this.mUIDayModeRadioButton1.SearchProperties[HtmlRadioButton.PropertyNames.Name] = "DayMode";
                    this.mUIDayModeRadioButton1.FilterProperties[HtmlRadioButton.PropertyNames.Value] = "AGD";
                    this.mUIDayModeRadioButton1.FilterProperties[HtmlRadioButton.PropertyNames.LabeledBy] = null;
                    this.mUIDayModeRadioButton1.FilterProperties[HtmlRadioButton.PropertyNames.Title] = null;
                    this.mUIDayModeRadioButton1.FilterProperties[HtmlRadioButton.PropertyNames.ItemCount] = "3";
                    this.mUIDayModeRadioButton1.FilterProperties[HtmlRadioButton.PropertyNames.Class] = null;
                    this.mUIDayModeRadioButton1.FilterProperties[HtmlRadioButton.PropertyNames.ControlDefinition] = "id=DayMode value=AGD type=radio name=Day";
                    this.mUIDayModeRadioButton1.FilterProperties[HtmlRadioButton.PropertyNames.TagInstance] = "9";
                    this.mUIDayModeRadioButton1.WindowTitles.Add("Edit meter group properties");
                    #endregion
                }
                return this.mUIDayModeRadioButton1;
            }
        }
        
        public HtmlComboBox UIDaysGComboBox
        {
            get
            {
                if ((this.mUIDaysGComboBox == null))
                {
                    this.mUIDaysGComboBox = new HtmlComboBox(this);
                    #region Search Criteria
                    this.mUIDaysGComboBox.SearchProperties[HtmlComboBox.PropertyNames.Id] = "DaysG";
                    this.mUIDaysGComboBox.SearchProperties[HtmlComboBox.PropertyNames.Name] = "DaysG";
                    this.mUIDaysGComboBox.FilterProperties[HtmlComboBox.PropertyNames.Size] = "0";
                    this.mUIDaysGComboBox.FilterProperties[HtmlComboBox.PropertyNames.LabeledBy] = null;
                    this.mUIDaysGComboBox.FilterProperties[HtmlComboBox.PropertyNames.Title] = null;
                    this.mUIDaysGComboBox.FilterProperties[HtmlComboBox.PropertyNames.ItemCount] = "28";
                    this.mUIDaysGComboBox.FilterProperties[HtmlComboBox.PropertyNames.Class] = null;
                    this.mUIDaysGComboBox.FilterProperties[HtmlComboBox.PropertyNames.ControlDefinition] = "id=DaysG name=DaysG";
                    this.mUIDaysGComboBox.FilterProperties[HtmlComboBox.PropertyNames.TagInstance] = "7";
                    this.mUIDaysGComboBox.WindowTitles.Add("Edit meter group properties");
                    #endregion
                }
                return this.mUIDaysGComboBox;
            }
        }
        
        public HtmlCheckBox UIMondayCheckBox
        {
            get
            {
                if ((this.mUIMondayCheckBox == null))
                {
                    this.mUIMondayCheckBox = new HtmlCheckBox(this);
                    #region Search Criteria
                    this.mUIMondayCheckBox.SearchProperties[HtmlCheckBox.PropertyNames.Id] = "Monday";
                    this.mUIMondayCheckBox.SearchProperties[HtmlCheckBox.PropertyNames.Name] = "Monday";
                    this.mUIMondayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Value] = "true";
                    this.mUIMondayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.LabeledBy] = null;
                    this.mUIMondayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Title] = null;
                    this.mUIMondayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Class] = null;
                    this.mUIMondayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.ControlDefinition] = "id=Monday value=true type=checkbox name=";
                    this.mUIMondayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.TagInstance] = "11";
                    this.mUIMondayCheckBox.WindowTitles.Add("Edit meter group properties");
                    #endregion
                }
                return this.mUIMondayCheckBox;
            }
        }
        
        public HtmlCheckBox UITuesdayCheckBox
        {
            get
            {
                if ((this.mUITuesdayCheckBox == null))
                {
                    this.mUITuesdayCheckBox = new HtmlCheckBox(this);
                    #region Search Criteria
                    this.mUITuesdayCheckBox.SearchProperties[HtmlCheckBox.PropertyNames.Id] = "Tuesday";
                    this.mUITuesdayCheckBox.SearchProperties[HtmlCheckBox.PropertyNames.Name] = "Tuesday";
                    this.mUITuesdayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Value] = "true";
                    this.mUITuesdayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.LabeledBy] = null;
                    this.mUITuesdayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Title] = null;
                    this.mUITuesdayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Class] = null;
                    this.mUITuesdayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.ControlDefinition] = "id=Tuesday value=true type=checkbox name";
                    this.mUITuesdayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.TagInstance] = "13";
                    this.mUITuesdayCheckBox.WindowTitles.Add("Edit meter group properties");
                    #endregion
                }
                return this.mUITuesdayCheckBox;
            }
        }
        
        public HtmlCheckBox UIWednesdayCheckBox
        {
            get
            {
                if ((this.mUIWednesdayCheckBox == null))
                {
                    this.mUIWednesdayCheckBox = new HtmlCheckBox(this);
                    #region Search Criteria
                    this.mUIWednesdayCheckBox.SearchProperties[HtmlCheckBox.PropertyNames.Id] = "Wednesday";
                    this.mUIWednesdayCheckBox.SearchProperties[HtmlCheckBox.PropertyNames.Name] = "Wednesday";
                    this.mUIWednesdayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Value] = "true";
                    this.mUIWednesdayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.LabeledBy] = null;
                    this.mUIWednesdayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Title] = null;
                    this.mUIWednesdayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Class] = null;
                    this.mUIWednesdayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.ControlDefinition] = "id=Wednesday value=true type=checkbox na";
                    this.mUIWednesdayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.TagInstance] = "15";
                    this.mUIWednesdayCheckBox.WindowTitles.Add("Edit meter group properties");
                    #endregion
                }
                return this.mUIWednesdayCheckBox;
            }
        }
        
        public HtmlCheckBox UIThursdayCheckBox
        {
            get
            {
                if ((this.mUIThursdayCheckBox == null))
                {
                    this.mUIThursdayCheckBox = new HtmlCheckBox(this);
                    #region Search Criteria
                    this.mUIThursdayCheckBox.SearchProperties[HtmlCheckBox.PropertyNames.Id] = "Thursday";
                    this.mUIThursdayCheckBox.SearchProperties[HtmlCheckBox.PropertyNames.Name] = "Thursday";
                    this.mUIThursdayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Value] = "true";
                    this.mUIThursdayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.LabeledBy] = null;
                    this.mUIThursdayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Title] = null;
                    this.mUIThursdayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Class] = null;
                    this.mUIThursdayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.ControlDefinition] = "id=Thursday value=true type=checkbox nam";
                    this.mUIThursdayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.TagInstance] = "17";
                    this.mUIThursdayCheckBox.WindowTitles.Add("Edit meter group properties");
                    #endregion
                }
                return this.mUIThursdayCheckBox;
            }
        }
        
        public HtmlCheckBox UIFridayCheckBox
        {
            get
            {
                if ((this.mUIFridayCheckBox == null))
                {
                    this.mUIFridayCheckBox = new HtmlCheckBox(this);
                    #region Search Criteria
                    this.mUIFridayCheckBox.SearchProperties[HtmlCheckBox.PropertyNames.Id] = "Friday";
                    this.mUIFridayCheckBox.SearchProperties[HtmlCheckBox.PropertyNames.Name] = "Friday";
                    this.mUIFridayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Value] = "true";
                    this.mUIFridayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.LabeledBy] = null;
                    this.mUIFridayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Title] = null;
                    this.mUIFridayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Class] = null;
                    this.mUIFridayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.ControlDefinition] = "id=Friday value=true type=checkbox name=";
                    this.mUIFridayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.TagInstance] = "19";
                    this.mUIFridayCheckBox.WindowTitles.Add("Edit meter group properties");
                    #endregion
                }
                return this.mUIFridayCheckBox;
            }
        }
        
        public HtmlCheckBox UISaturdayCheckBox
        {
            get
            {
                if ((this.mUISaturdayCheckBox == null))
                {
                    this.mUISaturdayCheckBox = new HtmlCheckBox(this);
                    #region Search Criteria
                    this.mUISaturdayCheckBox.SearchProperties[HtmlCheckBox.PropertyNames.Id] = "Saturday";
                    this.mUISaturdayCheckBox.SearchProperties[HtmlCheckBox.PropertyNames.Name] = "Saturday";
                    this.mUISaturdayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Value] = "true";
                    this.mUISaturdayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.LabeledBy] = null;
                    this.mUISaturdayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Title] = null;
                    this.mUISaturdayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Class] = null;
                    this.mUISaturdayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.ControlDefinition] = "id=Saturday value=true type=checkbox nam";
                    this.mUISaturdayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.TagInstance] = "21";
                    this.mUISaturdayCheckBox.WindowTitles.Add("Edit meter group properties");
                    #endregion
                }
                return this.mUISaturdayCheckBox;
            }
        }
        
        public HtmlCheckBox UISundayCheckBox
        {
            get
            {
                if ((this.mUISundayCheckBox == null))
                {
                    this.mUISundayCheckBox = new HtmlCheckBox(this);
                    #region Search Criteria
                    this.mUISundayCheckBox.SearchProperties[HtmlCheckBox.PropertyNames.Id] = "Sunday";
                    this.mUISundayCheckBox.SearchProperties[HtmlCheckBox.PropertyNames.Name] = "Sunday";
                    this.mUISundayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Value] = "true";
                    this.mUISundayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.LabeledBy] = null;
                    this.mUISundayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Title] = null;
                    this.mUISundayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Class] = null;
                    this.mUISundayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.ControlDefinition] = "id=Sunday value=true type=checkbox name=";
                    this.mUISundayCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.TagInstance] = "23";
                    this.mUISundayCheckBox.WindowTitles.Add("Edit meter group properties");
                    #endregion
                }
                return this.mUISundayCheckBox;
            }
        }
        
        public HtmlRadioButton UIWeekModeRadioButton
        {
            get
            {
                if ((this.mUIWeekModeRadioButton == null))
                {
                    this.mUIWeekModeRadioButton = new HtmlRadioButton(this);
                    #region Search Criteria
                    this.mUIWeekModeRadioButton.SearchProperties[HtmlRadioButton.PropertyNames.Id] = "WeekMode";
                    this.mUIWeekModeRadioButton.SearchProperties[HtmlRadioButton.PropertyNames.Name] = "WeekMode";
                    this.mUIWeekModeRadioButton.FilterProperties[HtmlRadioButton.PropertyNames.Value] = "EW";
                    this.mUIWeekModeRadioButton.FilterProperties[HtmlRadioButton.PropertyNames.LabeledBy] = null;
                    this.mUIWeekModeRadioButton.FilterProperties[HtmlRadioButton.PropertyNames.Title] = null;
                    this.mUIWeekModeRadioButton.FilterProperties[HtmlRadioButton.PropertyNames.ItemCount] = "2";
                    this.mUIWeekModeRadioButton.FilterProperties[HtmlRadioButton.PropertyNames.Class] = null;
                    this.mUIWeekModeRadioButton.FilterProperties[HtmlRadioButton.PropertyNames.ControlDefinition] = "id=WeekMode value=EW type=radio name=Wee";
                    this.mUIWeekModeRadioButton.FilterProperties[HtmlRadioButton.PropertyNames.TagInstance] = "25";
                    this.mUIWeekModeRadioButton.WindowTitles.Add("Edit meter group properties");
                    #endregion
                }
                return this.mUIWeekModeRadioButton;
            }
        }
        
        public HtmlComboBox UIWeeksGComboBox
        {
            get
            {
                if ((this.mUIWeeksGComboBox == null))
                {
                    this.mUIWeeksGComboBox = new HtmlComboBox(this);
                    #region Search Criteria
                    this.mUIWeeksGComboBox.SearchProperties[HtmlComboBox.PropertyNames.Id] = "WeeksG";
                    this.mUIWeeksGComboBox.SearchProperties[HtmlComboBox.PropertyNames.Name] = "WeeksG";
                    this.mUIWeeksGComboBox.FilterProperties[HtmlComboBox.PropertyNames.Size] = "0";
                    this.mUIWeeksGComboBox.FilterProperties[HtmlComboBox.PropertyNames.LabeledBy] = null;
                    this.mUIWeeksGComboBox.FilterProperties[HtmlComboBox.PropertyNames.Title] = null;
                    this.mUIWeeksGComboBox.FilterProperties[HtmlComboBox.PropertyNames.ItemCount] = "4";
                    this.mUIWeeksGComboBox.FilterProperties[HtmlComboBox.PropertyNames.Class] = null;
                    this.mUIWeeksGComboBox.FilterProperties[HtmlComboBox.PropertyNames.ControlDefinition] = "id=WeeksG name=WeeksG";
                    this.mUIWeeksGComboBox.FilterProperties[HtmlComboBox.PropertyNames.TagInstance] = "8";
                    this.mUIWeeksGComboBox.WindowTitles.Add("Edit meter group properties");
                    #endregion
                }
                return this.mUIWeeksGComboBox;
            }
        }
        
        public UIMainPane9 UIMainPane
        {
            get
            {
                if ((this.mUIMainPane == null))
                {
                    this.mUIMainPane = new UIMainPane9(this);
                }
                return this.mUIMainPane;
            }
        }
        #endregion
        
        #region Fields
        private HtmlEdit mUIGroupnameEdit;
        
        private HtmlComboBox mUIMetertypeComboBox;
        
        private HtmlRadioButton mUIMinModeRadioButton;
        
        private HtmlComboBox mUIMinutesEComboBox;
        
        private HtmlRadioButton mUIMinModeRadioButton1;
        
        private HtmlComboBox mUIMinutesGComboBox;
        
        private HtmlRadioButton mUIHourModeRadioButton;
        
        private HtmlComboBox mUIHoursEComboBox;
        
        private HtmlRadioButton mUIHourModeRadioButton1;
        
        private HtmlComboBox mUIHoursGComboBox;
        
        private HtmlRadioButton mUIDayModeRadioButton;
        
        private HtmlComboBox mUIDaysEComboBox;
        
        private HtmlRadioButton mUIDayModeRadioButton1;
        
        private HtmlComboBox mUIDaysGComboBox;
        
        private HtmlCheckBox mUIMondayCheckBox;
        
        private HtmlCheckBox mUITuesdayCheckBox;
        
        private HtmlCheckBox mUIWednesdayCheckBox;
        
        private HtmlCheckBox mUIThursdayCheckBox;
        
        private HtmlCheckBox mUIFridayCheckBox;
        
        private HtmlCheckBox mUISaturdayCheckBox;
        
        private HtmlCheckBox mUISundayCheckBox;
        
        private HtmlRadioButton mUIWeekModeRadioButton;
        
        private HtmlComboBox mUIWeeksGComboBox;
        
        private UIMainPane9 mUIMainPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIMainPane9 : HtmlDiv
    {
        
        public UIMainPane9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "main";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Edit meter group properties\r\nMeter Group";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=main";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "6";
            this.WindowTitles.Add("Edit meter group properties");
            #endregion
        }
        
        #region Properties
        public HtmlInputButton UISaveButton
        {
            get
            {
                if ((this.mUISaveButton == null))
                {
                    this.mUISaveButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUISaveButton.SearchProperties[HtmlButton.PropertyNames.Id] = null;
                    this.mUISaveButton.SearchProperties[HtmlButton.PropertyNames.Name] = null;
                    this.mUISaveButton.SearchProperties[HtmlButton.PropertyNames.DisplayText] = "Save";
                    this.mUISaveButton.FilterProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUISaveButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUISaveButton.FilterProperties[HtmlButton.PropertyNames.Class] = null;
                    this.mUISaveButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "value=Save type=submit";
                    this.mUISaveButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "27";
                    this.mUISaveButton.WindowTitles.Add("Edit meter group properties");
                    #endregion
                }
                return this.mUISaveButton;
            }
        }
        #endregion
        
        #region Fields
        private HtmlInputButton mUISaveButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIWelcomeRationalCityIWindow3 : BrowserWindow
    {
        
        public UIWelcomeRationalCityIWindow3()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Welcome Rational City";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Welcome Rational City");
            this.WindowTitles.Add("Meter groups");
            this.WindowTitles.Add("Meters associated with group \"single\"");
            this.WindowTitles.Add("Create new device associated with group \"single\"");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIMetersassociatedwithDocument3 UIMetersassociatedwithDocument
        {
            get
            {
                if ((this.mUIMetersassociatedwithDocument == null))
                {
                    this.mUIMetersassociatedwithDocument = new UIMetersassociatedwithDocument3(this);
                }
                return this.mUIMetersassociatedwithDocument;
            }
        }
        #endregion
        
        #region Fields
        private UIMetersassociatedwithDocument3 mUIMetersassociatedwithDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIMetersassociatedwithDocument3 : HtmlDocument
    {
        
        public UIMetersassociatedwithDocument3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Meters associated with group \"single\"";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Device/GroupDevices/153";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost:2374/Device/GroupDevices/153";
            this.WindowTitles.Add("Meters associated with group \"single\"");
            #endregion
        }
        
        #region Properties
        public UIMainPane10 UIMainPane
        {
            get
            {
                if ((this.mUIMainPane == null))
                {
                    this.mUIMainPane = new UIMainPane10(this);
                }
                return this.mUIMainPane;
            }
        }
        #endregion
        
        #region Fields
        private UIMainPane10 mUIMainPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIMainPane10 : HtmlDiv
    {
        
        public UIMainPane10(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "main";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Meters associated with group \"single\"\r\nC";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=main";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "6";
            this.WindowTitles.Add("Meters associated with group \"single\"");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UICreateHyperlink
        {
            get
            {
                if ((this.mUICreateHyperlink == null))
                {
                    this.mUICreateHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUICreateHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUICreateHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUICreateHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUICreateHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Create";
                    this.mUICreateHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Device/Create/153";
                    this.mUICreateHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUICreateHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:2374/Device/Create/153";
                    this.mUICreateHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUICreateHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/Device//153\"";
                    this.mUICreateHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "1";
                    this.mUICreateHyperlink.WindowTitles.Add("Meters associated with group \"single\"");
                    #endregion
                }
                return this.mUICreateHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUICreateHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIWelcomeRationalCityIWindow4 : BrowserWindow
    {
        
        public UIWelcomeRationalCityIWindow4()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Welcome Rational City";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Welcome Rational City");
            this.WindowTitles.Add("Meter groups");
            this.WindowTitles.Add("Meters associated with group \"single\"");
            this.WindowTitles.Add("Create new device associated with group \"single\"");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UICreatenewdeviceassocDocument UICreatenewdeviceassocDocument
        {
            get
            {
                if ((this.mUICreatenewdeviceassocDocument == null))
                {
                    this.mUICreatenewdeviceassocDocument = new UICreatenewdeviceassocDocument(this);
                }
                return this.mUICreatenewdeviceassocDocument;
            }
        }
        #endregion
        
        #region Fields
        private UICreatenewdeviceassocDocument mUICreatenewdeviceassocDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UICreatenewdeviceassocDocument : HtmlDocument
    {
        
        public UICreatenewdeviceassocDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Create new device associated with group \"single\"";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Device/Create/153";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost:2374/Device/Create/153";
            this.WindowTitles.Add("Create new device associated with group \"single\"");
            #endregion
        }
        
        #region Properties
        public HtmlEdit UIDevicenameEdit
        {
            get
            {
                if ((this.mUIDevicenameEdit == null))
                {
                    this.mUIDevicenameEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIDevicenameEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "Name";
                    this.mUIDevicenameEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "Name";
                    this.mUIDevicenameEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Device name";
                    this.mUIDevicenameEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIDevicenameEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIDevicenameEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "text-box single-line";
                    this.mUIDevicenameEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "id=Name class=\"text-box single-line\" typ";
                    this.mUIDevicenameEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "2";
                    this.mUIDevicenameEdit.WindowTitles.Add("Create new device associated with group \"single\"");
                    #endregion
                }
                return this.mUIDevicenameEdit;
            }
        }
        
        public HtmlComboBox UIGroupnameComboBox
        {
            get
            {
                if ((this.mUIGroupnameComboBox == null))
                {
                    this.mUIGroupnameComboBox = new HtmlComboBox(this);
                    #region Search Criteria
                    this.mUIGroupnameComboBox.SearchProperties[HtmlComboBox.PropertyNames.Id] = "GroupID";
                    this.mUIGroupnameComboBox.SearchProperties[HtmlComboBox.PropertyNames.Name] = "GroupID";
                    this.mUIGroupnameComboBox.FilterProperties[HtmlComboBox.PropertyNames.Size] = "0";
                    this.mUIGroupnameComboBox.FilterProperties[HtmlComboBox.PropertyNames.LabeledBy] = "Group name";
                    this.mUIGroupnameComboBox.FilterProperties[HtmlComboBox.PropertyNames.Title] = null;
                    this.mUIGroupnameComboBox.FilterProperties[HtmlComboBox.PropertyNames.ItemCount] = "1";
                    this.mUIGroupnameComboBox.FilterProperties[HtmlComboBox.PropertyNames.Class] = null;
                    this.mUIGroupnameComboBox.FilterProperties[HtmlComboBox.PropertyNames.ControlDefinition] = "id=GroupID name=GroupID";
                    this.mUIGroupnameComboBox.FilterProperties[HtmlComboBox.PropertyNames.TagInstance] = "1";
                    this.mUIGroupnameComboBox.WindowTitles.Add("Create new device associated with group \"single\"");
                    #endregion
                }
                return this.mUIGroupnameComboBox;
            }
        }
        
        public HtmlComboBox UIDevicetypeComboBox
        {
            get
            {
                if ((this.mUIDevicetypeComboBox == null))
                {
                    this.mUIDevicetypeComboBox = new HtmlComboBox(this);
                    #region Search Criteria
                    this.mUIDevicetypeComboBox.SearchProperties[HtmlComboBox.PropertyNames.Id] = "TypeID";
                    this.mUIDevicetypeComboBox.SearchProperties[HtmlComboBox.PropertyNames.Name] = "TypeID";
                    this.mUIDevicetypeComboBox.FilterProperties[HtmlComboBox.PropertyNames.Size] = "0";
                    this.mUIDevicetypeComboBox.FilterProperties[HtmlComboBox.PropertyNames.LabeledBy] = "Device type";
                    this.mUIDevicetypeComboBox.FilterProperties[HtmlComboBox.PropertyNames.Title] = null;
                    this.mUIDevicetypeComboBox.FilterProperties[HtmlComboBox.PropertyNames.ItemCount] = "1";
                    this.mUIDevicetypeComboBox.FilterProperties[HtmlComboBox.PropertyNames.Class] = null;
                    this.mUIDevicetypeComboBox.FilterProperties[HtmlComboBox.PropertyNames.ControlDefinition] = "id=TypeID name=TypeID";
                    this.mUIDevicetypeComboBox.FilterProperties[HtmlComboBox.PropertyNames.TagInstance] = "2";
                    this.mUIDevicetypeComboBox.WindowTitles.Add("Create new device associated with group \"single\"");
                    #endregion
                }
                return this.mUIDevicetypeComboBox;
            }
        }
        
        public HtmlEdit UIInternaladdressEdit
        {
            get
            {
                if ((this.mUIInternaladdressEdit == null))
                {
                    this.mUIInternaladdressEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIInternaladdressEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "InternalAddress";
                    this.mUIInternaladdressEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "InternalAddress";
                    this.mUIInternaladdressEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Internal address";
                    this.mUIInternaladdressEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIInternaladdressEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIInternaladdressEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "text-box single-line";
                    this.mUIInternaladdressEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "id=InternalAddress class=\"text-box singl";
                    this.mUIInternaladdressEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "3";
                    this.mUIInternaladdressEdit.WindowTitles.Add("Create new device associated with group \"single\"");
                    #endregion
                }
                return this.mUIInternaladdressEdit;
            }
        }
        
        public HtmlEdit UIIP1Edit
        {
            get
            {
                if ((this.mUIIP1Edit == null))
                {
                    this.mUIIP1Edit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIIP1Edit.SearchProperties[HtmlEdit.PropertyNames.Id] = "IP1";
                    this.mUIIP1Edit.SearchProperties[HtmlEdit.PropertyNames.Name] = "IP1";
                    this.mUIIP1Edit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = null;
                    this.mUIIP1Edit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIIP1Edit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIIP1Edit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUIIP1Edit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "style=\"WIDTH: 33px\" id=IP1 type=text nam";
                    this.mUIIP1Edit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "4";
                    this.mUIIP1Edit.WindowTitles.Add("Create new device associated with group \"single\"");
                    #endregion
                }
                return this.mUIIP1Edit;
            }
        }
        
        public HtmlEdit UIIP2Edit
        {
            get
            {
                if ((this.mUIIP2Edit == null))
                {
                    this.mUIIP2Edit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIIP2Edit.SearchProperties[HtmlEdit.PropertyNames.Id] = "IP2";
                    this.mUIIP2Edit.SearchProperties[HtmlEdit.PropertyNames.Name] = "IP2";
                    this.mUIIP2Edit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = null;
                    this.mUIIP2Edit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIIP2Edit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIIP2Edit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUIIP2Edit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "style=\"WIDTH: 33px\" id=IP2 type=text nam";
                    this.mUIIP2Edit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "5";
                    this.mUIIP2Edit.WindowTitles.Add("Create new device associated with group \"single\"");
                    #endregion
                }
                return this.mUIIP2Edit;
            }
        }
        
        public HtmlEdit UIIP3Edit
        {
            get
            {
                if ((this.mUIIP3Edit == null))
                {
                    this.mUIIP3Edit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIIP3Edit.SearchProperties[HtmlEdit.PropertyNames.Id] = "IP3";
                    this.mUIIP3Edit.SearchProperties[HtmlEdit.PropertyNames.Name] = "IP3";
                    this.mUIIP3Edit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = null;
                    this.mUIIP3Edit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIIP3Edit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIIP3Edit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUIIP3Edit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "style=\"WIDTH: 33px\" id=IP3 type=text nam";
                    this.mUIIP3Edit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "6";
                    this.mUIIP3Edit.WindowTitles.Add("Create new device associated with group \"single\"");
                    #endregion
                }
                return this.mUIIP3Edit;
            }
        }
        
        public HtmlEdit UIIP4Edit
        {
            get
            {
                if ((this.mUIIP4Edit == null))
                {
                    this.mUIIP4Edit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIIP4Edit.SearchProperties[HtmlEdit.PropertyNames.Id] = "IP4";
                    this.mUIIP4Edit.SearchProperties[HtmlEdit.PropertyNames.Name] = "IP4";
                    this.mUIIP4Edit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = null;
                    this.mUIIP4Edit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIIP4Edit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIIP4Edit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUIIP4Edit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "style=\"WIDTH: 33px\" id=IP4 type=text nam";
                    this.mUIIP4Edit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "7";
                    this.mUIIP4Edit.WindowTitles.Add("Create new device associated with group \"single\"");
                    #endregion
                }
                return this.mUIIP4Edit;
            }
        }
        
        public HtmlEdit UIPrimaryportEdit
        {
            get
            {
                if ((this.mUIPrimaryportEdit == null))
                {
                    this.mUIPrimaryportEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIPrimaryportEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "Port";
                    this.mUIPrimaryportEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "Port";
                    this.mUIPrimaryportEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Primary port";
                    this.mUIPrimaryportEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIPrimaryportEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIPrimaryportEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "text-box single-line";
                    this.mUIPrimaryportEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "id=Port class=\"text-box single-line\" typ";
                    this.mUIPrimaryportEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "8";
                    this.mUIPrimaryportEdit.WindowTitles.Add("Create new device associated with group \"single\"");
                    #endregion
                }
                return this.mUIPrimaryportEdit;
            }
        }
        
        public HtmlEdit UISecondaryIP1Edit
        {
            get
            {
                if ((this.mUISecondaryIP1Edit == null))
                {
                    this.mUISecondaryIP1Edit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUISecondaryIP1Edit.SearchProperties[HtmlEdit.PropertyNames.Id] = "SecondaryIP1";
                    this.mUISecondaryIP1Edit.SearchProperties[HtmlEdit.PropertyNames.Name] = "SecondaryIP1";
                    this.mUISecondaryIP1Edit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = null;
                    this.mUISecondaryIP1Edit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUISecondaryIP1Edit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUISecondaryIP1Edit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUISecondaryIP1Edit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "style=\"WIDTH: 33px\" id=SecondaryIP1 type";
                    this.mUISecondaryIP1Edit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "9";
                    this.mUISecondaryIP1Edit.WindowTitles.Add("Create new device associated with group \"single\"");
                    #endregion
                }
                return this.mUISecondaryIP1Edit;
            }
        }
        
        public HtmlEdit UISecondaryIP2Edit
        {
            get
            {
                if ((this.mUISecondaryIP2Edit == null))
                {
                    this.mUISecondaryIP2Edit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUISecondaryIP2Edit.SearchProperties[HtmlEdit.PropertyNames.Id] = "SecondaryIP2";
                    this.mUISecondaryIP2Edit.SearchProperties[HtmlEdit.PropertyNames.Name] = "SecondaryIP2";
                    this.mUISecondaryIP2Edit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = null;
                    this.mUISecondaryIP2Edit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUISecondaryIP2Edit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUISecondaryIP2Edit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUISecondaryIP2Edit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "style=\"WIDTH: 33px\" id=SecondaryIP2 type";
                    this.mUISecondaryIP2Edit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "10";
                    this.mUISecondaryIP2Edit.WindowTitles.Add("Create new device associated with group \"single\"");
                    #endregion
                }
                return this.mUISecondaryIP2Edit;
            }
        }
        
        public HtmlEdit UISecondaryIP3Edit
        {
            get
            {
                if ((this.mUISecondaryIP3Edit == null))
                {
                    this.mUISecondaryIP3Edit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUISecondaryIP3Edit.SearchProperties[HtmlEdit.PropertyNames.Id] = "SecondaryIP3";
                    this.mUISecondaryIP3Edit.SearchProperties[HtmlEdit.PropertyNames.Name] = "SecondaryIP3";
                    this.mUISecondaryIP3Edit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = null;
                    this.mUISecondaryIP3Edit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUISecondaryIP3Edit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUISecondaryIP3Edit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUISecondaryIP3Edit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "style=\"WIDTH: 33px\" id=SecondaryIP3 type";
                    this.mUISecondaryIP3Edit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "11";
                    this.mUISecondaryIP3Edit.WindowTitles.Add("Create new device associated with group \"single\"");
                    #endregion
                }
                return this.mUISecondaryIP3Edit;
            }
        }
        
        public HtmlEdit UISecondaryIP4Edit
        {
            get
            {
                if ((this.mUISecondaryIP4Edit == null))
                {
                    this.mUISecondaryIP4Edit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUISecondaryIP4Edit.SearchProperties[HtmlEdit.PropertyNames.Id] = "SecondaryIP4";
                    this.mUISecondaryIP4Edit.SearchProperties[HtmlEdit.PropertyNames.Name] = "SecondaryIP4";
                    this.mUISecondaryIP4Edit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = null;
                    this.mUISecondaryIP4Edit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUISecondaryIP4Edit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUISecondaryIP4Edit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUISecondaryIP4Edit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "style=\"WIDTH: 33px\" id=SecondaryIP4 type";
                    this.mUISecondaryIP4Edit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "12";
                    this.mUISecondaryIP4Edit.WindowTitles.Add("Create new device associated with group \"single\"");
                    #endregion
                }
                return this.mUISecondaryIP4Edit;
            }
        }
        
        public HtmlEdit UISecondaryportEdit
        {
            get
            {
                if ((this.mUISecondaryportEdit == null))
                {
                    this.mUISecondaryportEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUISecondaryportEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "SecondaryPort";
                    this.mUISecondaryportEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "SecondaryPort";
                    this.mUISecondaryportEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Secondary port";
                    this.mUISecondaryportEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUISecondaryportEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUISecondaryportEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "text-box single-line";
                    this.mUISecondaryportEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "id=SecondaryPort class=\"text-box single-";
                    this.mUISecondaryportEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "13";
                    this.mUISecondaryportEdit.WindowTitles.Add("Create new device associated with group \"single\"");
                    #endregion
                }
                return this.mUISecondaryportEdit;
            }
        }
        
        public UIMainPane11 UIMainPane
        {
            get
            {
                if ((this.mUIMainPane == null))
                {
                    this.mUIMainPane = new UIMainPane11(this);
                }
                return this.mUIMainPane;
            }
        }
        #endregion
        
        #region Fields
        private HtmlEdit mUIDevicenameEdit;
        
        private HtmlComboBox mUIGroupnameComboBox;
        
        private HtmlComboBox mUIDevicetypeComboBox;
        
        private HtmlEdit mUIInternaladdressEdit;
        
        private HtmlEdit mUIIP1Edit;
        
        private HtmlEdit mUIIP2Edit;
        
        private HtmlEdit mUIIP3Edit;
        
        private HtmlEdit mUIIP4Edit;
        
        private HtmlEdit mUIPrimaryportEdit;
        
        private HtmlEdit mUISecondaryIP1Edit;
        
        private HtmlEdit mUISecondaryIP2Edit;
        
        private HtmlEdit mUISecondaryIP3Edit;
        
        private HtmlEdit mUISecondaryIP4Edit;
        
        private HtmlEdit mUISecondaryportEdit;

        private UIMainPane11 mUIMainPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIMainPane11 : HtmlDiv
    {
        
        public UIMainPane11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "main";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Create new device\r\nDevices \r\nDevice prop";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=main";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "6";
            this.WindowTitles.Add("Create new device associated with group \"single\"");
            #endregion
        }
        
        #region Properties
        public HtmlInputButton UICreateButton
        {
            get
            {
                if ((this.mUICreateButton == null))
                {
                    this.mUICreateButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUICreateButton.SearchProperties[HtmlButton.PropertyNames.Id] = null;
                    this.mUICreateButton.SearchProperties[HtmlButton.PropertyNames.Name] = null;
                    this.mUICreateButton.SearchProperties[HtmlButton.PropertyNames.DisplayText] = "Create";
                    this.mUICreateButton.FilterProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUICreateButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUICreateButton.FilterProperties[HtmlButton.PropertyNames.Class] = null;
                    this.mUICreateButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "value=Create type=submit";
                    this.mUICreateButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "14";
                    this.mUICreateButton.WindowTitles.Add("Create new device associated with group \"single\"");
                    #endregion
                }
                return this.mUICreateButton;
            }
        }
        #endregion
        
        #region Fields
        private HtmlInputButton mUICreateButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIWelcomeRationalCityIWindow5 : BrowserWindow
    {
        
        public UIWelcomeRationalCityIWindow5()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Welcome Rational City";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Welcome Rational City");
            this.WindowTitles.Add("Meter groups");
            this.WindowTitles.Add("Meters associated with group \"single\"");
            this.WindowTitles.Add("Edit meter properties");
            this.WindowTitles.Add("Details of meter");
            this.WindowTitles.Add("COSEM logical devices of \"single modified \"");
            this.WindowTitles.Add("Attributes associated with \"single modified \"");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIMetersassociatedwithDocument4 UIMetersassociatedwithDocument
        {
            get
            {
                if ((this.mUIMetersassociatedwithDocument == null))
                {
                    this.mUIMetersassociatedwithDocument = new UIMetersassociatedwithDocument4(this);
                }
                return this.mUIMetersassociatedwithDocument;
            }
        }
        #endregion
        
        #region Fields
        private UIMetersassociatedwithDocument4 mUIMetersassociatedwithDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIMetersassociatedwithDocument4 : HtmlDocument
    {
        
        public UIMetersassociatedwithDocument4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Meters associated with group \"single\"";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Device/GroupDevices/170";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost:2374/Device/GroupDevices/170";
            this.WindowTitles.Add("Meters associated with group \"single\"");
            #endregion
        }
        
        #region Properties
        public UIGridPane7 UIGridPane
        {
            get
            {
                if ((this.mUIGridPane == null))
                {
                    this.mUIGridPane = new UIGridPane7(this);
                }
                return this.mUIGridPane;
            }
        }
        #endregion
        
        #region Fields
        private UIGridPane7 mUIGridPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIGridPane7 : HtmlDiv
    {
        
        public UIGridPane7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "grid";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "NameTypeOwnerGroupPrimary IPPrimary Port";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=grid";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "7";
            this.WindowTitles.Add("Meters associated with group \"single\"");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIEditHyperlink
        {
            get
            {
                if ((this.mUIEditHyperlink == null))
                {
                    this.mUIEditHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIEditHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIEditHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIEditHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIEditHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Edit";
                    this.mUIEditHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Device/Edit/82610";
                    this.mUIEditHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIEditHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:2374/Device/Edit/82610";
                    this.mUIEditHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIEditHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/Device//82610\"";
                    this.mUIEditHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "12";
                    this.mUIEditHyperlink.WindowTitles.Add("Meters associated with group \"single\"");
                    #endregion
                }
                return this.mUIEditHyperlink;
            }
        }
        
        public HtmlHyperlink UIDetailsHyperlink
        {
            get
            {
                if ((this.mUIDetailsHyperlink == null))
                {
                    this.mUIDetailsHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIDetailsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIDetailsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIDetailsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIDetailsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Details";
                    this.mUIDetailsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Device/Details/82610";
                    this.mUIDetailsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIDetailsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:2374/Device/Details/82610";
                    this.mUIDetailsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIDetailsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/Device//82610\"";
                    this.mUIDetailsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "13";
                    this.mUIDetailsHyperlink.WindowTitles.Add("Meters associated with group \"single\"");
                    #endregion
                }
                return this.mUIDetailsHyperlink;
            }
        }
        
        public HtmlHyperlink UIAcquisitionHyperlink
        {
            get
            {
                if ((this.mUIAcquisitionHyperlink == null))
                {
                    this.mUIAcquisitionHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIAcquisitionHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIAcquisitionHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIAcquisitionHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIAcquisitionHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Acquisition";
                    this.mUIAcquisitionHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/DeviceLogicalDevice/Index/82610";
                    this.mUIAcquisitionHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIAcquisitionHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:2374/DeviceLogicalDevice/Index/82610";
                    this.mUIAcquisitionHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIAcquisitionHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/DeviceLogicalDevice/Index/82610\"";
                    this.mUIAcquisitionHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "11";
                    this.mUIAcquisitionHyperlink.WindowTitles.Add("Meters associated with group \"single\"");
                    #endregion
                }
                return this.mUIAcquisitionHyperlink;
            }
        }
        
        public HtmlHyperlink UIStateHyperlink
        {
            get
            {
                if ((this.mUIStateHyperlink == null))
                {
                    this.mUIStateHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIStateHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIStateHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIStateHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIStateHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "State";
                    this.mUIStateHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/DeviceAttribute/State/82610";
                    this.mUIStateHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIStateHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:2374/DeviceAttribute/State/82610";
                    this.mUIStateHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIStateHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/DeviceAttribute//82610\"";
                    this.mUIStateHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "10";
                    this.mUIStateHyperlink.WindowTitles.Add("Meters associated with group \"single\"");
                    #endregion
                }
                return this.mUIStateHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIEditHyperlink;
        
        private HtmlHyperlink mUIDetailsHyperlink;
        
        private HtmlHyperlink mUIAcquisitionHyperlink;
        
        private HtmlHyperlink mUIStateHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIWelcomeRationalCityIWindow6 : BrowserWindow
    {
        
        public UIWelcomeRationalCityIWindow6()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Welcome Rational City";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Welcome Rational City");
            this.WindowTitles.Add("Meter groups");
            this.WindowTitles.Add("Meters associated with group \"single\"");
            this.WindowTitles.Add("Edit meter properties");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIEditmeterpropertiesDocument UIEditmeterpropertiesDocument
        {
            get
            {
                if ((this.mUIEditmeterpropertiesDocument == null))
                {
                    this.mUIEditmeterpropertiesDocument = new UIEditmeterpropertiesDocument(this);
                }
                return this.mUIEditmeterpropertiesDocument;
            }
        }
        #endregion
        
        #region Fields
        private UIEditmeterpropertiesDocument mUIEditmeterpropertiesDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIEditmeterpropertiesDocument : HtmlDocument
    {
        
        public UIEditmeterpropertiesDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Edit meter properties";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Device/Edit/82610";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost:2374/Device/Edit/82610";
            this.WindowTitles.Add("Edit meter properties");
            #endregion
        }
        
        #region Properties
        public HtmlEdit UIMeternameEdit
        {
            get
            {
                if ((this.mUIMeternameEdit == null))
                {
                    this.mUIMeternameEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIMeternameEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "Name";
                    this.mUIMeternameEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "Name";
                    this.mUIMeternameEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Meter name";
                    this.mUIMeternameEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIMeternameEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIMeternameEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "text-box single-line";
                    this.mUIMeternameEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "id=Name class=\"text-box single-line\" val";
                    this.mUIMeternameEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "4";
                    this.mUIMeternameEdit.WindowTitles.Add("Edit meter properties");
                    #endregion
                }
                return this.mUIMeternameEdit;
            }
        }
        
        public HtmlComboBox UIGroupnameComboBox
        {
            get
            {
                if ((this.mUIGroupnameComboBox == null))
                {
                    this.mUIGroupnameComboBox = new HtmlComboBox(this);
                    #region Search Criteria
                    this.mUIGroupnameComboBox.SearchProperties[HtmlComboBox.PropertyNames.Id] = "GroupID";
                    this.mUIGroupnameComboBox.SearchProperties[HtmlComboBox.PropertyNames.Name] = "GroupID";
                    this.mUIGroupnameComboBox.FilterProperties[HtmlComboBox.PropertyNames.Size] = "0";
                    this.mUIGroupnameComboBox.FilterProperties[HtmlComboBox.PropertyNames.LabeledBy] = "Group name";
                    this.mUIGroupnameComboBox.FilterProperties[HtmlComboBox.PropertyNames.Title] = null;
                    this.mUIGroupnameComboBox.FilterProperties[HtmlComboBox.PropertyNames.ItemCount] = "1";
                    this.mUIGroupnameComboBox.FilterProperties[HtmlComboBox.PropertyNames.Class] = null;
                    this.mUIGroupnameComboBox.FilterProperties[HtmlComboBox.PropertyNames.ControlDefinition] = "id=GroupID name=GroupID";
                    this.mUIGroupnameComboBox.FilterProperties[HtmlComboBox.PropertyNames.TagInstance] = "1";
                    this.mUIGroupnameComboBox.WindowTitles.Add("Edit meter properties");
                    #endregion
                }
                return this.mUIGroupnameComboBox;
            }
        }
        
        public HtmlComboBox UIMetertypeComboBox
        {
            get
            {
                if ((this.mUIMetertypeComboBox == null))
                {
                    this.mUIMetertypeComboBox = new HtmlComboBox(this);
                    #region Search Criteria
                    this.mUIMetertypeComboBox.SearchProperties[HtmlComboBox.PropertyNames.Id] = "TypeID";
                    this.mUIMetertypeComboBox.SearchProperties[HtmlComboBox.PropertyNames.Name] = "TypeID";
                    this.mUIMetertypeComboBox.FilterProperties[HtmlComboBox.PropertyNames.Size] = "0";
                    this.mUIMetertypeComboBox.FilterProperties[HtmlComboBox.PropertyNames.LabeledBy] = "Meter type";
                    this.mUIMetertypeComboBox.FilterProperties[HtmlComboBox.PropertyNames.Title] = null;
                    this.mUIMetertypeComboBox.FilterProperties[HtmlComboBox.PropertyNames.ItemCount] = "1";
                    this.mUIMetertypeComboBox.FilterProperties[HtmlComboBox.PropertyNames.Class] = null;
                    this.mUIMetertypeComboBox.FilterProperties[HtmlComboBox.PropertyNames.ControlDefinition] = "id=TypeID name=TypeID";
                    this.mUIMetertypeComboBox.FilterProperties[HtmlComboBox.PropertyNames.TagInstance] = "2";
                    this.mUIMetertypeComboBox.WindowTitles.Add("Edit meter properties");
                    #endregion
                }
                return this.mUIMetertypeComboBox;
            }
        }
        
        public HtmlEdit UIInternaladdressEdit
        {
            get
            {
                if ((this.mUIInternaladdressEdit == null))
                {
                    this.mUIInternaladdressEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIInternaladdressEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "InternalAddress";
                    this.mUIInternaladdressEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "InternalAddress";
                    this.mUIInternaladdressEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Internal address";
                    this.mUIInternaladdressEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIInternaladdressEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIInternaladdressEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "text-box single-line";
                    this.mUIInternaladdressEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "id=InternalAddress class=\"text-box singl";
                    this.mUIInternaladdressEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "5";
                    this.mUIInternaladdressEdit.WindowTitles.Add("Edit meter properties");
                    #endregion
                }
                return this.mUIInternaladdressEdit;
            }
        }
        
        public HtmlEdit UIIP1Edit
        {
            get
            {
                if ((this.mUIIP1Edit == null))
                {
                    this.mUIIP1Edit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIIP1Edit.SearchProperties[HtmlEdit.PropertyNames.Id] = "IP1";
                    this.mUIIP1Edit.SearchProperties[HtmlEdit.PropertyNames.Name] = "IP1";
                    this.mUIIP1Edit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = null;
                    this.mUIIP1Edit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIIP1Edit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIIP1Edit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUIIP1Edit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "style=\"WIDTH: 33px\" id=IP1 value=\"10 \" t";
                    this.mUIIP1Edit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "6";
                    this.mUIIP1Edit.WindowTitles.Add("Edit meter properties");
                    #endregion
                }
                return this.mUIIP1Edit;
            }
        }
        
        public HtmlEdit UIIP2Edit
        {
            get
            {
                if ((this.mUIIP2Edit == null))
                {
                    this.mUIIP2Edit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIIP2Edit.SearchProperties[HtmlEdit.PropertyNames.Id] = "IP2";
                    this.mUIIP2Edit.SearchProperties[HtmlEdit.PropertyNames.Name] = "IP2";
                    this.mUIIP2Edit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = null;
                    this.mUIIP2Edit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIIP2Edit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIIP2Edit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUIIP2Edit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "style=\"WIDTH: 33px\" id=IP2 value=\"0  \" t";
                    this.mUIIP2Edit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "7";
                    this.mUIIP2Edit.WindowTitles.Add("Edit meter properties");
                    #endregion
                }
                return this.mUIIP2Edit;
            }
        }
        
        public HtmlEdit UIIP3Edit
        {
            get
            {
                if ((this.mUIIP3Edit == null))
                {
                    this.mUIIP3Edit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIIP3Edit.SearchProperties[HtmlEdit.PropertyNames.Id] = "IP3";
                    this.mUIIP3Edit.SearchProperties[HtmlEdit.PropertyNames.Name] = "IP3";
                    this.mUIIP3Edit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = null;
                    this.mUIIP3Edit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIIP3Edit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIIP3Edit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUIIP3Edit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "style=\"WIDTH: 33px\" id=IP3 value=\"0  \" t";
                    this.mUIIP3Edit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "8";
                    this.mUIIP3Edit.WindowTitles.Add("Edit meter properties");
                    #endregion
                }
                return this.mUIIP3Edit;
            }
        }
        
        public HtmlEdit UIIP4Edit
        {
            get
            {
                if ((this.mUIIP4Edit == null))
                {
                    this.mUIIP4Edit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIIP4Edit.SearchProperties[HtmlEdit.PropertyNames.Id] = "IP4";
                    this.mUIIP4Edit.SearchProperties[HtmlEdit.PropertyNames.Name] = "IP4";
                    this.mUIIP4Edit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = null;
                    this.mUIIP4Edit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIIP4Edit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIIP4Edit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUIIP4Edit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "style=\"WIDTH: 33px\" id=IP4 value=\"1  \" t";
                    this.mUIIP4Edit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "9";
                    this.mUIIP4Edit.WindowTitles.Add("Edit meter properties");
                    #endregion
                }
                return this.mUIIP4Edit;
            }
        }
        
        public HtmlEdit UIPrimaryportEdit
        {
            get
            {
                if ((this.mUIPrimaryportEdit == null))
                {
                    this.mUIPrimaryportEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIPrimaryportEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "Port";
                    this.mUIPrimaryportEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "Port";
                    this.mUIPrimaryportEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Primary port";
                    this.mUIPrimaryportEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIPrimaryportEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIPrimaryportEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "text-box single-line";
                    this.mUIPrimaryportEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "id=Port class=\"text-box single-line\" val";
                    this.mUIPrimaryportEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "10";
                    this.mUIPrimaryportEdit.WindowTitles.Add("Edit meter properties");
                    #endregion
                }
                return this.mUIPrimaryportEdit;
            }
        }
        
        public HtmlEdit UISecondaryIP1Edit
        {
            get
            {
                if ((this.mUISecondaryIP1Edit == null))
                {
                    this.mUISecondaryIP1Edit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUISecondaryIP1Edit.SearchProperties[HtmlEdit.PropertyNames.Id] = "SecondaryIP1";
                    this.mUISecondaryIP1Edit.SearchProperties[HtmlEdit.PropertyNames.Name] = "SecondaryIP1";
                    this.mUISecondaryIP1Edit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = null;
                    this.mUISecondaryIP1Edit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUISecondaryIP1Edit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUISecondaryIP1Edit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUISecondaryIP1Edit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "style=\"WIDTH: 33px\" id=SecondaryIP1 valu";
                    this.mUISecondaryIP1Edit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "11";
                    this.mUISecondaryIP1Edit.WindowTitles.Add("Edit meter properties");
                    #endregion
                }
                return this.mUISecondaryIP1Edit;
            }
        }
        
        public HtmlEdit UISecondaryIP2Edit
        {
            get
            {
                if ((this.mUISecondaryIP2Edit == null))
                {
                    this.mUISecondaryIP2Edit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUISecondaryIP2Edit.SearchProperties[HtmlEdit.PropertyNames.Id] = "SecondaryIP2";
                    this.mUISecondaryIP2Edit.SearchProperties[HtmlEdit.PropertyNames.Name] = "SecondaryIP2";
                    this.mUISecondaryIP2Edit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = null;
                    this.mUISecondaryIP2Edit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUISecondaryIP2Edit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUISecondaryIP2Edit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUISecondaryIP2Edit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "style=\"WIDTH: 33px\" id=SecondaryIP2 valu";
                    this.mUISecondaryIP2Edit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "12";
                    this.mUISecondaryIP2Edit.WindowTitles.Add("Edit meter properties");
                    #endregion
                }
                return this.mUISecondaryIP2Edit;
            }
        }
        
        public HtmlEdit UISecondaryIP3Edit
        {
            get
            {
                if ((this.mUISecondaryIP3Edit == null))
                {
                    this.mUISecondaryIP3Edit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUISecondaryIP3Edit.SearchProperties[HtmlEdit.PropertyNames.Id] = "SecondaryIP3";
                    this.mUISecondaryIP3Edit.SearchProperties[HtmlEdit.PropertyNames.Name] = "SecondaryIP3";
                    this.mUISecondaryIP3Edit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = null;
                    this.mUISecondaryIP3Edit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUISecondaryIP3Edit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUISecondaryIP3Edit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUISecondaryIP3Edit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "style=\"WIDTH: 33px\" id=SecondaryIP3 valu";
                    this.mUISecondaryIP3Edit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "13";
                    this.mUISecondaryIP3Edit.WindowTitles.Add("Edit meter properties");
                    #endregion
                }
                return this.mUISecondaryIP3Edit;
            }
        }
        
        public HtmlEdit UISecondaryIP4Edit
        {
            get
            {
                if ((this.mUISecondaryIP4Edit == null))
                {
                    this.mUISecondaryIP4Edit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUISecondaryIP4Edit.SearchProperties[HtmlEdit.PropertyNames.Id] = "SecondaryIP4";
                    this.mUISecondaryIP4Edit.SearchProperties[HtmlEdit.PropertyNames.Name] = "SecondaryIP4";
                    this.mUISecondaryIP4Edit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = null;
                    this.mUISecondaryIP4Edit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUISecondaryIP4Edit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUISecondaryIP4Edit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUISecondaryIP4Edit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "style=\"WIDTH: 33px\" id=SecondaryIP4 valu";
                    this.mUISecondaryIP4Edit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "14";
                    this.mUISecondaryIP4Edit.WindowTitles.Add("Edit meter properties");
                    #endregion
                }
                return this.mUISecondaryIP4Edit;
            }
        }
        
        public HtmlEdit UISecondaryportEdit
        {
            get
            {
                if ((this.mUISecondaryportEdit == null))
                {
                    this.mUISecondaryportEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUISecondaryportEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "SecondaryPort";
                    this.mUISecondaryportEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "SecondaryPort";
                    this.mUISecondaryportEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Secondary port";
                    this.mUISecondaryportEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUISecondaryportEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUISecondaryportEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "text-box single-line";
                    this.mUISecondaryportEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "id=SecondaryPort class=\"text-box single-";
                    this.mUISecondaryportEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "15";
                    this.mUISecondaryportEdit.WindowTitles.Add("Edit meter properties");
                    #endregion
                }
                return this.mUISecondaryportEdit;
            }
        }
        
        public UIMainPane12 UIMainPane
        {
            get
            {
                if ((this.mUIMainPane == null))
                {
                    this.mUIMainPane = new UIMainPane12(this);
                }
                return this.mUIMainPane;
            }
        }
        #endregion
        
        #region Fields
        private HtmlEdit mUIMeternameEdit;
        
        private HtmlComboBox mUIGroupnameComboBox;
        
        private HtmlComboBox mUIMetertypeComboBox;
        
        private HtmlEdit mUIInternaladdressEdit;
        
        private HtmlEdit mUIIP1Edit;
        
        private HtmlEdit mUIIP2Edit;
        
        private HtmlEdit mUIIP3Edit;
        
        private HtmlEdit mUIIP4Edit;
        
        private HtmlEdit mUIPrimaryportEdit;
        
        private HtmlEdit mUISecondaryIP1Edit;
        
        private HtmlEdit mUISecondaryIP2Edit;
        
        private HtmlEdit mUISecondaryIP3Edit;
        
        private HtmlEdit mUISecondaryIP4Edit;
        
        private HtmlEdit mUISecondaryportEdit;
        
        private UIMainPane12 mUIMainPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIMainPane12 : HtmlDiv
    {
        
        public UIMainPane12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "main";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Edit meter properties\r\nMeters \r\nMeter pr";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=main";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "6";
            this.WindowTitles.Add("Edit meter properties");
            #endregion
        }
        
        #region Properties
        public HtmlInputButton UISaveButton
        {
            get
            {
                if ((this.mUISaveButton == null))
                {
                    this.mUISaveButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUISaveButton.SearchProperties[HtmlButton.PropertyNames.Id] = null;
                    this.mUISaveButton.SearchProperties[HtmlButton.PropertyNames.Name] = null;
                    this.mUISaveButton.SearchProperties[HtmlButton.PropertyNames.DisplayText] = "Save";
                    this.mUISaveButton.FilterProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUISaveButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUISaveButton.FilterProperties[HtmlButton.PropertyNames.Class] = null;
                    this.mUISaveButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "value=Save type=submit";
                    this.mUISaveButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "16";
                    this.mUISaveButton.WindowTitles.Add("Edit meter properties");
                    #endregion
                }
                return this.mUISaveButton;
            }
        }
        #endregion
        
        #region Fields
        private HtmlInputButton mUISaveButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIWelcomeRationalCityIWindow7 : BrowserWindow
    {
        
        public UIWelcomeRationalCityIWindow7()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Welcome Rational City";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Welcome Rational City");
            this.WindowTitles.Add("Meter groups");
            this.WindowTitles.Add("Meters associated with group \"single\"");
            this.WindowTitles.Add("Details of meter");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIDetailsofmeterDocument UIDetailsofmeterDocument
        {
            get
            {
                if ((this.mUIDetailsofmeterDocument == null))
                {
                    this.mUIDetailsofmeterDocument = new UIDetailsofmeterDocument(this);
                }
                return this.mUIDetailsofmeterDocument;
            }
        }
        #endregion
        
        #region Fields
        private UIDetailsofmeterDocument mUIDetailsofmeterDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDetailsofmeterDocument : HtmlDocument
    {
        
        public UIDetailsofmeterDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Details of meter";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Device/Details/82610";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost:2374/Device/Details/82610";
            this.WindowTitles.Add("Details of meter");
            #endregion
        }
        
        #region Properties
        public UIMainPane13 UIMainPane
        {
            get
            {
                if ((this.mUIMainPane == null))
                {
                    this.mUIMainPane = new UIMainPane13(this);
                }
                return this.mUIMainPane;
            }
        }
        #endregion
        
        #region Fields
        private UIMainPane13 mUIMainPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIMainPane13 : HtmlDiv
    {
        
        public UIMainPane13(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "main";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Details of meter\r\nEdit | Locate | Owner ";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=main";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "6";
            this.WindowTitles.Add("Details of meter");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIMetersHyperlink
        {
            get
            {
                if ((this.mUIMetersHyperlink == null))
                {
                    this.mUIMetersHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIMetersHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIMetersHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIMetersHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIMetersHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Meters";
                    this.mUIMetersHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Device/GroupDevices/170";
                    this.mUIMetersHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIMetersHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:2374/Device/GroupDevices/170";
                    this.mUIMetersHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIMetersHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/Device/GroupDevices/170\"";
                    this.mUIMetersHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "4";
                    this.mUIMetersHyperlink.WindowTitles.Add("Details of meter");
                    #endregion
                }
                return this.mUIMetersHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIMetersHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIWelcomeRationalCityIWindow8 : BrowserWindow
    {
        
        public UIWelcomeRationalCityIWindow8()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Welcome Rational City";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Welcome Rational City");
            this.WindowTitles.Add("Meter groups");
            this.WindowTitles.Add("Meters associated with group \"single\"");
            this.WindowTitles.Add("COSEM logical devices of \"single modified \"");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UICOSEMlogicaldevicesoDocument UICOSEMlogicaldevicesoDocument
        {
            get
            {
                if ((this.mUICOSEMlogicaldevicesoDocument == null))
                {
                    this.mUICOSEMlogicaldevicesoDocument = new UICOSEMlogicaldevicesoDocument(this);
                }
                return this.mUICOSEMlogicaldevicesoDocument;
            }
        }
        #endregion
        
        #region Fields
        private UICOSEMlogicaldevicesoDocument mUICOSEMlogicaldevicesoDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UICOSEMlogicaldevicesoDocument : HtmlDocument
    {
        
        public UICOSEMlogicaldevicesoDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "COSEM logical devices of \"single modified \"";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/DeviceLogicalDevice/Index/82610";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost:2374/DeviceLogicalDevice/Index/82610";
            this.WindowTitles.Add("COSEM logical devices of \"single modified \"");
            #endregion
        }
        
        #region Properties
        public UIMainPane14 UIMainPane
        {
            get
            {
                if ((this.mUIMainPane == null))
                {
                    this.mUIMainPane = new UIMainPane14(this);
                }
                return this.mUIMainPane;
            }
        }
        #endregion
        
        #region Fields
        private UIMainPane14 mUIMainPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIMainPane14 : HtmlDiv
    {
        
        public UIMainPane14(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "main";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "COSEM logical devices associated with ph";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=main";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "6";
            this.WindowTitles.Add("COSEM logical devices of \"single modified \"");
            #endregion
        }
        
        #region Properties
        public HtmlInputButton UIAddAllButton
        {
            get
            {
                if ((this.mUIAddAllButton == null))
                {
                    this.mUIAddAllButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUIAddAllButton.SearchProperties[HtmlButton.PropertyNames.Id] = null;
                    this.mUIAddAllButton.SearchProperties[HtmlButton.PropertyNames.Name] = null;
                    this.mUIAddAllButton.SearchProperties[HtmlButton.PropertyNames.DisplayText] = "Add All";
                    this.mUIAddAllButton.FilterProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUIAddAllButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUIAddAllButton.FilterProperties[HtmlButton.PropertyNames.Class] = null;
                    this.mUIAddAllButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "value=\"Add All\" type=submit";
                    this.mUIAddAllButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "5";
                    this.mUIAddAllButton.WindowTitles.Add("COSEM logical devices of \"single modified \"");
                    #endregion
                }
                return this.mUIAddAllButton;
            }
        }
        
        public HtmlHyperlink UIDevicesHyperlink
        {
            get
            {
                if ((this.mUIDevicesHyperlink == null))
                {
                    this.mUIDevicesHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIDevicesHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIDevicesHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIDevicesHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIDevicesHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Devices";
                    this.mUIDevicesHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Device/GroupDevices/170";
                    this.mUIDevicesHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIDevicesHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:2374/Device/GroupDevices/170";
                    this.mUIDevicesHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIDevicesHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/Device/Group/170\"";
                    this.mUIDevicesHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "1";
                    this.mUIDevicesHyperlink.WindowTitles.Add("COSEM logical devices of \"single modified \"");
                    #endregion
                }
                return this.mUIDevicesHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlInputButton mUIAddAllButton;
        
        private HtmlHyperlink mUIDevicesHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIWelcomeRationalCityIWindow9 : BrowserWindow
    {
        
        public UIWelcomeRationalCityIWindow9()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Welcome Rational City";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Welcome Rational City");
            this.WindowTitles.Add("Meter groups");
            this.WindowTitles.Add("Meters associated with group \"single\"");
            this.WindowTitles.Add("Attributes associated with \"single modified \"");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIAttributesassociatedDocument UIAttributesassociatedDocument
        {
            get
            {
                if ((this.mUIAttributesassociatedDocument == null))
                {
                    this.mUIAttributesassociatedDocument = new UIAttributesassociatedDocument(this);
                }
                return this.mUIAttributesassociatedDocument;
            }
        }
        #endregion
        
        #region Fields
        private UIAttributesassociatedDocument mUIAttributesassociatedDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIAttributesassociatedDocument : HtmlDocument
    {
        
        public UIAttributesassociatedDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Attributes associated with \"single modified \"";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/DeviceAttribute/State/82610";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost:2374/DeviceAttribute/State/82610";
            this.WindowTitles.Add("Attributes associated with \"single modified \"");
            #endregion
        }
        
        #region Properties
        public UIMainPane15 UIMainPane
        {
            get
            {
                if ((this.mUIMainPane == null))
                {
                    this.mUIMainPane = new UIMainPane15(this);
                }
                return this.mUIMainPane;
            }
        }
        #endregion
        
        #region Fields
        private UIMainPane15 mUIMainPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIMainPane15 : HtmlDiv
    {
        
        public UIMainPane15(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "main";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Attributes associated with physical devi";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=main";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "6";
            this.WindowTitles.Add("Attributes associated with \"single modified \"");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIDevicesHyperlink
        {
            get
            {
                if ((this.mUIDevicesHyperlink == null))
                {
                    this.mUIDevicesHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIDevicesHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIDevicesHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIDevicesHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIDevicesHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Devices";
                    this.mUIDevicesHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Device/GroupDevices/170";
                    this.mUIDevicesHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIDevicesHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:2374/Device/GroupDevices/170";
                    this.mUIDevicesHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIDevicesHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/Device/Group/170\"";
                    this.mUIDevicesHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "1";
                    this.mUIDevicesHyperlink.WindowTitles.Add("Attributes associated with \"single modified \"");
                    #endregion
                }
                return this.mUIDevicesHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIDevicesHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIBlankPageInternetExpWindow11 : BrowserWindow
    {
        
        public UIBlankPageInternetExpWindow11()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Blank Page";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Blank Page");
            this.WindowTitles.Add("Welcome Rational City");
            this.WindowTitles.Add("Log On");
            this.WindowTitles.Add("Register");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIBlankPageInternetExpWindow12 : BrowserWindow
    {
        
        public UIBlankPageInternetExpWindow12()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Blank Page";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Blank Page");
            this.WindowTitles.Add("Welcome Rational City");
            this.WindowTitles.Add("Log On");
            this.WindowTitles.Add("Register");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIRegisterDocument UIRegisterDocument
        {
            get
            {
                if ((this.mUIRegisterDocument == null))
                {
                    this.mUIRegisterDocument = new UIRegisterDocument(this);
                }
                return this.mUIRegisterDocument;
            }
        }
        #endregion
        
        #region Fields
        private UIRegisterDocument mUIRegisterDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRegisterDocument : HtmlDocument
    {
        
        public UIRegisterDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Register";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Account/Register";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost:2374/Account/Register";
            this.WindowTitles.Add("Register");
            #endregion
        }
        
        #region Properties
        public HtmlEdit UIUsernameEdit
        {
            get
            {
                if ((this.mUIUsernameEdit == null))
                {
                    this.mUIUsernameEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIUsernameEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "UserName";
                    this.mUIUsernameEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "UserName";
                    this.mUIUsernameEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "User name";
                    this.mUIUsernameEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIUsernameEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIUsernameEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUIUsernameEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "id=UserName type=text name=UserName  dat";
                    this.mUIUsernameEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "1";
                    this.mUIUsernameEdit.WindowTitles.Add("Register");
                    #endregion
                }
                return this.mUIUsernameEdit;
            }
        }
        
        public HtmlEdit UIEmailaddressEdit
        {
            get
            {
                if ((this.mUIEmailaddressEdit == null))
                {
                    this.mUIEmailaddressEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIEmailaddressEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "Email";
                    this.mUIEmailaddressEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "Email";
                    this.mUIEmailaddressEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Email address";
                    this.mUIEmailaddressEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIEmailaddressEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIEmailaddressEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUIEmailaddressEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "id=Email type=text name=Email  data-val-";
                    this.mUIEmailaddressEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "2";
                    this.mUIEmailaddressEdit.WindowTitles.Add("Register");
                    #endregion
                }
                return this.mUIEmailaddressEdit;
            }
        }
        
        public HtmlEdit UIPasswordEdit
        {
            get
            {
                if ((this.mUIPasswordEdit == null))
                {
                    this.mUIPasswordEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIPasswordEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "Password";
                    this.mUIPasswordEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "Password";
                    this.mUIPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Password";
                    this.mUIPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "PASSWORD";
                    this.mUIPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUIPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "id=Password value=\"\" type=password name=";
                    this.mUIPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "3";
                    this.mUIPasswordEdit.WindowTitles.Add("Register");
                    #endregion
                }
                return this.mUIPasswordEdit;
            }
        }
        
        public HtmlEdit UIConfirmpasswordEdit
        {
            get
            {
                if ((this.mUIConfirmpasswordEdit == null))
                {
                    this.mUIConfirmpasswordEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIConfirmpasswordEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "ConfirmPassword";
                    this.mUIConfirmpasswordEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "ConfirmPassword";
                    this.mUIConfirmpasswordEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Confirm password";
                    this.mUIConfirmpasswordEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "PASSWORD";
                    this.mUIConfirmpasswordEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIConfirmpasswordEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUIConfirmpasswordEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "id=ConfirmPassword value=\"\" type=passwor";
                    this.mUIConfirmpasswordEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "4";
                    this.mUIConfirmpasswordEdit.WindowTitles.Add("Register");
                    #endregion
                }
                return this.mUIConfirmpasswordEdit;
            }
        }
        
        public HtmlEdit UISecretquestionEdit
        {
            get
            {
                if ((this.mUISecretquestionEdit == null))
                {
                    this.mUISecretquestionEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUISecretquestionEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "SecretQuestion";
                    this.mUISecretquestionEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "SecretQuestion";
                    this.mUISecretquestionEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Secret question";
                    this.mUISecretquestionEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUISecretquestionEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUISecretquestionEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUISecretquestionEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "id=SecretQuestion type=text name=SecretQ";
                    this.mUISecretquestionEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "5";
                    this.mUISecretquestionEdit.WindowTitles.Add("Register");
                    #endregion
                }
                return this.mUISecretquestionEdit;
            }
        }
        
        public HtmlEdit UIAnswerEdit
        {
            get
            {
                if ((this.mUIAnswerEdit == null))
                {
                    this.mUIAnswerEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIAnswerEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "Answer";
                    this.mUIAnswerEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "Answer";
                    this.mUIAnswerEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Answer";
                    this.mUIAnswerEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIAnswerEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIAnswerEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUIAnswerEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "id=Answer type=text name=Answer  data-va";
                    this.mUIAnswerEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "6";
                    this.mUIAnswerEdit.WindowTitles.Add("Register");
                    #endregion
                }
                return this.mUIAnswerEdit;
            }
        }
        
        public UIMainPane16 UIMainPane
        {
            get
            {
                if ((this.mUIMainPane == null))
                {
                    this.mUIMainPane = new UIMainPane16(this);
                }
                return this.mUIMainPane;
            }
        }
        #endregion
        
        #region Fields
        private HtmlEdit mUIUsernameEdit;
        
        private HtmlEdit mUIEmailaddressEdit;
        
        private HtmlEdit mUIPasswordEdit;
        
        private HtmlEdit mUIConfirmpasswordEdit;
        
        private HtmlEdit mUISecretquestionEdit;
        
        private HtmlEdit mUIAnswerEdit;
        
        private UIMainPane16 mUIMainPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIMainPane16 : HtmlDiv
    {
        
        public UIMainPane16(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "main";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Create a New Account\r\nUse the form below";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=main";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "6";
            this.WindowTitles.Add("Register");
            #endregion
        }
        
        #region Properties
        public HtmlInputButton UIRegisterButton
        {
            get
            {
                if ((this.mUIRegisterButton == null))
                {
                    this.mUIRegisterButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUIRegisterButton.SearchProperties[HtmlButton.PropertyNames.Id] = null;
                    this.mUIRegisterButton.SearchProperties[HtmlButton.PropertyNames.Name] = null;
                    this.mUIRegisterButton.SearchProperties[HtmlButton.PropertyNames.DisplayText] = "Register";
                    this.mUIRegisterButton.FilterProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUIRegisterButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUIRegisterButton.FilterProperties[HtmlButton.PropertyNames.Class] = null;
                    this.mUIRegisterButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "value=Register type=submit";
                    this.mUIRegisterButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "7";
                    this.mUIRegisterButton.WindowTitles.Add("Register");
                    #endregion
                }
                return this.mUIRegisterButton;
            }
        }
        #endregion
        
        #region Fields
        private HtmlInputButton mUIRegisterButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIBlankPageInternetExpWindow13 : BrowserWindow
    {
        
        public UIBlankPageInternetExpWindow13()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Blank Page";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Blank Page");
            this.WindowTitles.Add("Welcome Rational City");
            this.WindowTitles.Add("Log On");
            this.WindowTitles.Add("Register");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
    }
}
