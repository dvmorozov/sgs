//------------------------------------------------------------------------------
// <auto-generated>
//    Этот код был создан из шаблона.
//
//    Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//    Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;

[assembly: EdmSchemaAttribute()]
namespace web.Models
{
    #region Контексты
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    public partial class SGMasterBaseEntities : ObjectContext
    {
        #region Конструкторы
    
        /// <summary>
        /// Инициализирует новый объект SGMasterBaseEntities, используя строку соединения из раздела "SGMasterBaseEntities" файла конфигурации приложения.
        /// </summary>
        public SGMasterBaseEntities() : base("name=SGMasterBaseEntities", "SGMasterBaseEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Инициализация нового объекта SGMasterBaseEntities.
        /// </summary>
        public SGMasterBaseEntities(string connectionString) : base(connectionString, "SGMasterBaseEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Инициализация нового объекта SGMasterBaseEntities.
        /// </summary>
        public SGMasterBaseEntities(EntityConnection connection) : base(connection, "SGMasterBaseEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Разделяемые методы
    
        partial void OnContextCreated();
    
        #endregion
    
        #region Свойства ObjectSet
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ViewAddress> ViewAddress
        {
            get
            {
                if ((_ViewAddress == null))
                {
                    _ViewAddress = base.CreateObjectSet<ViewAddress>("ViewAddress");
                }
                return _ViewAddress;
            }
        }
        private ObjectSet<ViewAddress> _ViewAddress;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ViewApartament> ViewApartament
        {
            get
            {
                if ((_ViewApartament == null))
                {
                    _ViewApartament = base.CreateObjectSet<ViewApartament>("ViewApartament");
                }
                return _ViewApartament;
            }
        }
        private ObjectSet<ViewApartament> _ViewApartament;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ViewBuilding> ViewBuilding
        {
            get
            {
                if ((_ViewBuilding == null))
                {
                    _ViewBuilding = base.CreateObjectSet<ViewBuilding>("ViewBuilding");
                }
                return _ViewBuilding;
            }
        }
        private ObjectSet<ViewBuilding> _ViewBuilding;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ViewChartsDataTypes> ViewChartsDataTypes
        {
            get
            {
                if ((_ViewChartsDataTypes == null))
                {
                    _ViewChartsDataTypes = base.CreateObjectSet<ViewChartsDataTypes>("ViewChartsDataTypes");
                }
                return _ViewChartsDataTypes;
            }
        }
        private ObjectSet<ViewChartsDataTypes> _ViewChartsDataTypes;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ViewChartSet> ViewChartSet
        {
            get
            {
                if ((_ViewChartSet == null))
                {
                    _ViewChartSet = base.CreateObjectSet<ViewChartSet>("ViewChartSet");
                }
                return _ViewChartSet;
            }
        }
        private ObjectSet<ViewChartSet> _ViewChartSet;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ViewCity> ViewCity
        {
            get
            {
                if ((_ViewCity == null))
                {
                    _ViewCity = base.CreateObjectSet<ViewCity>("ViewCity");
                }
                return _ViewCity;
            }
        }
        private ObjectSet<ViewCity> _ViewCity;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ViewCOSEMAttribute> ViewCOSEMAttribute
        {
            get
            {
                if ((_ViewCOSEMAttribute == null))
                {
                    _ViewCOSEMAttribute = base.CreateObjectSet<ViewCOSEMAttribute>("ViewCOSEMAttribute");
                }
                return _ViewCOSEMAttribute;
            }
        }
        private ObjectSet<ViewCOSEMAttribute> _ViewCOSEMAttribute;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ViewCOSEMAttributeDataType> ViewCOSEMAttributeDataType
        {
            get
            {
                if ((_ViewCOSEMAttributeDataType == null))
                {
                    _ViewCOSEMAttributeDataType = base.CreateObjectSet<ViewCOSEMAttributeDataType>("ViewCOSEMAttributeDataType");
                }
                return _ViewCOSEMAttributeDataType;
            }
        }
        private ObjectSet<ViewCOSEMAttributeDataType> _ViewCOSEMAttributeDataType;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ViewCOSEMAttributeValue> ViewCOSEMAttributeValue
        {
            get
            {
                if ((_ViewCOSEMAttributeValue == null))
                {
                    _ViewCOSEMAttributeValue = base.CreateObjectSet<ViewCOSEMAttributeValue>("ViewCOSEMAttributeValue");
                }
                return _ViewCOSEMAttributeValue;
            }
        }
        private ObjectSet<ViewCOSEMAttributeValue> _ViewCOSEMAttributeValue;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ViewCOSEMClass> ViewCOSEMClass
        {
            get
            {
                if ((_ViewCOSEMClass == null))
                {
                    _ViewCOSEMClass = base.CreateObjectSet<ViewCOSEMClass>("ViewCOSEMClass");
                }
                return _ViewCOSEMClass;
            }
        }
        private ObjectSet<ViewCOSEMClass> _ViewCOSEMClass;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ViewCOSEMComplexTypeField> ViewCOSEMComplexTypeField
        {
            get
            {
                if ((_ViewCOSEMComplexTypeField == null))
                {
                    _ViewCOSEMComplexTypeField = base.CreateObjectSet<ViewCOSEMComplexTypeField>("ViewCOSEMComplexTypeField");
                }
                return _ViewCOSEMComplexTypeField;
            }
        }
        private ObjectSet<ViewCOSEMComplexTypeField> _ViewCOSEMComplexTypeField;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ViewCOSEMDataType> ViewCOSEMDataType
        {
            get
            {
                if ((_ViewCOSEMDataType == null))
                {
                    _ViewCOSEMDataType = base.CreateObjectSet<ViewCOSEMDataType>("ViewCOSEMDataType");
                }
                return _ViewCOSEMDataType;
            }
        }
        private ObjectSet<ViewCOSEMDataType> _ViewCOSEMDataType;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ViewCOSEMLogicalDevice> ViewCOSEMLogicalDevice
        {
            get
            {
                if ((_ViewCOSEMLogicalDevice == null))
                {
                    _ViewCOSEMLogicalDevice = base.CreateObjectSet<ViewCOSEMLogicalDevice>("ViewCOSEMLogicalDevice");
                }
                return _ViewCOSEMLogicalDevice;
            }
        }
        private ObjectSet<ViewCOSEMLogicalDevice> _ViewCOSEMLogicalDevice;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ViewCOSEMMethod> ViewCOSEMMethod
        {
            get
            {
                if ((_ViewCOSEMMethod == null))
                {
                    _ViewCOSEMMethod = base.CreateObjectSet<ViewCOSEMMethod>("ViewCOSEMMethod");
                }
                return _ViewCOSEMMethod;
            }
        }
        private ObjectSet<ViewCOSEMMethod> _ViewCOSEMMethod;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ViewCOSEMObject> ViewCOSEMObject
        {
            get
            {
                if ((_ViewCOSEMObject == null))
                {
                    _ViewCOSEMObject = base.CreateObjectSet<ViewCOSEMObject>("ViewCOSEMObject");
                }
                return _ViewCOSEMObject;
            }
        }
        private ObjectSet<ViewCOSEMObject> _ViewCOSEMObject;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ViewCOSEMStaticAttributeValue> ViewCOSEMStaticAttributeValue
        {
            get
            {
                if ((_ViewCOSEMStaticAttributeValue == null))
                {
                    _ViewCOSEMStaticAttributeValue = base.CreateObjectSet<ViewCOSEMStaticAttributeValue>("ViewCOSEMStaticAttributeValue");
                }
                return _ViewCOSEMStaticAttributeValue;
            }
        }
        private ObjectSet<ViewCOSEMStaticAttributeValue> _ViewCOSEMStaticAttributeValue;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ViewCountry> ViewCountry
        {
            get
            {
                if ((_ViewCountry == null))
                {
                    _ViewCountry = base.CreateObjectSet<ViewCountry>("ViewCountry");
                }
                return _ViewCountry;
            }
        }
        private ObjectSet<ViewCountry> _ViewCountry;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ViewCurrentState> ViewCurrentState
        {
            get
            {
                if ((_ViewCurrentState == null))
                {
                    _ViewCurrentState = base.CreateObjectSet<ViewCurrentState>("ViewCurrentState");
                }
                return _ViewCurrentState;
            }
        }
        private ObjectSet<ViewCurrentState> _ViewCurrentState;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ViewDataPoint> ViewDataPoint
        {
            get
            {
                if ((_ViewDataPoint == null))
                {
                    _ViewDataPoint = base.CreateObjectSet<ViewDataPoint>("ViewDataPoint");
                }
                return _ViewDataPoint;
            }
        }
        private ObjectSet<ViewDataPoint> _ViewDataPoint;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ViewDataType> ViewDataType
        {
            get
            {
                if ((_ViewDataType == null))
                {
                    _ViewDataType = base.CreateObjectSet<ViewDataType>("ViewDataType");
                }
                return _ViewDataType;
            }
        }
        private ObjectSet<ViewDataType> _ViewDataType;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ViewDevice> ViewDevice
        {
            get
            {
                if ((_ViewDevice == null))
                {
                    _ViewDevice = base.CreateObjectSet<ViewDevice>("ViewDevice");
                }
                return _ViewDevice;
            }
        }
        private ObjectSet<ViewDevice> _ViewDevice;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ViewDeviceDataType> ViewDeviceDataType
        {
            get
            {
                if ((_ViewDeviceDataType == null))
                {
                    _ViewDeviceDataType = base.CreateObjectSet<ViewDeviceDataType>("ViewDeviceDataType");
                }
                return _ViewDeviceDataType;
            }
        }
        private ObjectSet<ViewDeviceDataType> _ViewDeviceDataType;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ViewDeviceOwner> ViewDeviceOwner
        {
            get
            {
                if ((_ViewDeviceOwner == null))
                {
                    _ViewDeviceOwner = base.CreateObjectSet<ViewDeviceOwner>("ViewDeviceOwner");
                }
                return _ViewDeviceOwner;
            }
        }
        private ObjectSet<ViewDeviceOwner> _ViewDeviceOwner;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ViewDeviceScheduleParams> ViewDeviceScheduleParams
        {
            get
            {
                if ((_ViewDeviceScheduleParams == null))
                {
                    _ViewDeviceScheduleParams = base.CreateObjectSet<ViewDeviceScheduleParams>("ViewDeviceScheduleParams");
                }
                return _ViewDeviceScheduleParams;
            }
        }
        private ObjectSet<ViewDeviceScheduleParams> _ViewDeviceScheduleParams;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ViewDeviceType> ViewDeviceType
        {
            get
            {
                if ((_ViewDeviceType == null))
                {
                    _ViewDeviceType = base.CreateObjectSet<ViewDeviceType>("ViewDeviceType");
                }
                return _ViewDeviceType;
            }
        }
        private ObjectSet<ViewDeviceType> _ViewDeviceType;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ViewDeviceTypeAndOwner> ViewDeviceTypeAndOwner
        {
            get
            {
                if ((_ViewDeviceTypeAndOwner == null))
                {
                    _ViewDeviceTypeAndOwner = base.CreateObjectSet<ViewDeviceTypeAndOwner>("ViewDeviceTypeAndOwner");
                }
                return _ViewDeviceTypeAndOwner;
            }
        }
        private ObjectSet<ViewDeviceTypeAndOwner> _ViewDeviceTypeAndOwner;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ViewElementFiltered> ViewElementFiltered
        {
            get
            {
                if ((_ViewElementFiltered == null))
                {
                    _ViewElementFiltered = base.CreateObjectSet<ViewElementFiltered>("ViewElementFiltered");
                }
                return _ViewElementFiltered;
            }
        }
        private ObjectSet<ViewElementFiltered> _ViewElementFiltered;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ViewElementGroup> ViewElementGroup
        {
            get
            {
                if ((_ViewElementGroup == null))
                {
                    _ViewElementGroup = base.CreateObjectSet<ViewElementGroup>("ViewElementGroup");
                }
                return _ViewElementGroup;
            }
        }
        private ObjectSet<ViewElementGroup> _ViewElementGroup;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ViewElementInstanceName> ViewElementInstanceName
        {
            get
            {
                if ((_ViewElementInstanceName == null))
                {
                    _ViewElementInstanceName = base.CreateObjectSet<ViewElementInstanceName>("ViewElementInstanceName");
                }
                return _ViewElementInstanceName;
            }
        }
        private ObjectSet<ViewElementInstanceName> _ViewElementInstanceName;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ViewElementLocation> ViewElementLocation
        {
            get
            {
                if ((_ViewElementLocation == null))
                {
                    _ViewElementLocation = base.CreateObjectSet<ViewElementLocation>("ViewElementLocation");
                }
                return _ViewElementLocation;
            }
        }
        private ObjectSet<ViewElementLocation> _ViewElementLocation;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ViewElementLogicalName> ViewElementLogicalName
        {
            get
            {
                if ((_ViewElementLogicalName == null))
                {
                    _ViewElementLogicalName = base.CreateObjectSet<ViewElementLogicalName>("ViewElementLogicalName");
                }
                return _ViewElementLogicalName;
            }
        }
        private ObjectSet<ViewElementLogicalName> _ViewElementLogicalName;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ViewElementOwner> ViewElementOwner
        {
            get
            {
                if ((_ViewElementOwner == null))
                {
                    _ViewElementOwner = base.CreateObjectSet<ViewElementOwner>("ViewElementOwner");
                }
                return _ViewElementOwner;
            }
        }
        private ObjectSet<ViewElementOwner> _ViewElementOwner;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ViewEvent> ViewEvent
        {
            get
            {
                if ((_ViewEvent == null))
                {
                    _ViewEvent = base.CreateObjectSet<ViewEvent>("ViewEvent");
                }
                return _ViewEvent;
            }
        }
        private ObjectSet<ViewEvent> _ViewEvent;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ViewEventCategory> ViewEventCategory
        {
            get
            {
                if ((_ViewEventCategory == null))
                {
                    _ViewEventCategory = base.CreateObjectSet<ViewEventCategory>("ViewEventCategory");
                }
                return _ViewEventCategory;
            }
        }
        private ObjectSet<ViewEventCategory> _ViewEventCategory;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ViewFile> ViewFile
        {
            get
            {
                if ((_ViewFile == null))
                {
                    _ViewFile = base.CreateObjectSet<ViewFile>("ViewFile");
                }
                return _ViewFile;
            }
        }
        private ObjectSet<ViewFile> _ViewFile;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ViewGroup> ViewGroup
        {
            get
            {
                if ((_ViewGroup == null))
                {
                    _ViewGroup = base.CreateObjectSet<ViewGroup>("ViewGroup");
                }
                return _ViewGroup;
            }
        }
        private ObjectSet<ViewGroup> _ViewGroup;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ViewOBISGroup> ViewOBISGroup
        {
            get
            {
                if ((_ViewOBISGroup == null))
                {
                    _ViewOBISGroup = base.CreateObjectSet<ViewOBISGroup>("ViewOBISGroup");
                }
                return _ViewOBISGroup;
            }
        }
        private ObjectSet<ViewOBISGroup> _ViewOBISGroup;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ViewOBISSet> ViewOBISSet
        {
            get
            {
                if ((_ViewOBISSet == null))
                {
                    _ViewOBISSet = base.CreateObjectSet<ViewOBISSet>("ViewOBISSet");
                }
                return _ViewOBISSet;
            }
        }
        private ObjectSet<ViewOBISSet> _ViewOBISSet;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ViewSchedule> ViewSchedule
        {
            get
            {
                if ((_ViewSchedule == null))
                {
                    _ViewSchedule = base.CreateObjectSet<ViewSchedule>("ViewSchedule");
                }
                return _ViewSchedule;
            }
        }
        private ObjectSet<ViewSchedule> _ViewSchedule;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ViewSession> ViewSession
        {
            get
            {
                if ((_ViewSession == null))
                {
                    _ViewSession = base.CreateObjectSet<ViewSession>("ViewSession");
                }
                return _ViewSession;
            }
        }
        private ObjectSet<ViewSession> _ViewSession;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ViewState> ViewState
        {
            get
            {
                if ((_ViewState == null))
                {
                    _ViewState = base.CreateObjectSet<ViewState>("ViewState");
                }
                return _ViewState;
            }
        }
        private ObjectSet<ViewState> _ViewState;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ViewStreet> ViewStreet
        {
            get
            {
                if ((_ViewStreet == null))
                {
                    _ViewStreet = base.CreateObjectSet<ViewStreet>("ViewStreet");
                }
                return _ViewStreet;
            }
        }
        private ObjectSet<ViewStreet> _ViewStreet;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ViewUser> ViewUser
        {
            get
            {
                if ((_ViewUser == null))
                {
                    _ViewUser = base.CreateObjectSet<ViewUser>("ViewUser");
                }
                return _ViewUser;
            }
        }
        private ObjectSet<ViewUser> _ViewUser;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ViewXMLTemplate> ViewXMLTemplate
        {
            get
            {
                if ((_ViewXMLTemplate == null))
                {
                    _ViewXMLTemplate = base.CreateObjectSet<ViewXMLTemplate>("ViewXMLTemplate");
                }
                return _ViewXMLTemplate;
            }
        }
        private ObjectSet<ViewXMLTemplate> _ViewXMLTemplate;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ViewZipCode> ViewZipCode
        {
            get
            {
                if ((_ViewZipCode == null))
                {
                    _ViewZipCode = base.CreateObjectSet<ViewZipCode>("ViewZipCode");
                }
                return _ViewZipCode;
            }
        }
        private ObjectSet<ViewZipCode> _ViewZipCode;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<vw_aspnet_Applications> vw_aspnet_Applications
        {
            get
            {
                if ((_vw_aspnet_Applications == null))
                {
                    _vw_aspnet_Applications = base.CreateObjectSet<vw_aspnet_Applications>("vw_aspnet_Applications");
                }
                return _vw_aspnet_Applications;
            }
        }
        private ObjectSet<vw_aspnet_Applications> _vw_aspnet_Applications;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<vw_aspnet_MembershipUsers> vw_aspnet_MembershipUsers
        {
            get
            {
                if ((_vw_aspnet_MembershipUsers == null))
                {
                    _vw_aspnet_MembershipUsers = base.CreateObjectSet<vw_aspnet_MembershipUsers>("vw_aspnet_MembershipUsers");
                }
                return _vw_aspnet_MembershipUsers;
            }
        }
        private ObjectSet<vw_aspnet_MembershipUsers> _vw_aspnet_MembershipUsers;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<vw_aspnet_Profiles> vw_aspnet_Profiles
        {
            get
            {
                if ((_vw_aspnet_Profiles == null))
                {
                    _vw_aspnet_Profiles = base.CreateObjectSet<vw_aspnet_Profiles>("vw_aspnet_Profiles");
                }
                return _vw_aspnet_Profiles;
            }
        }
        private ObjectSet<vw_aspnet_Profiles> _vw_aspnet_Profiles;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<vw_aspnet_Roles> vw_aspnet_Roles
        {
            get
            {
                if ((_vw_aspnet_Roles == null))
                {
                    _vw_aspnet_Roles = base.CreateObjectSet<vw_aspnet_Roles>("vw_aspnet_Roles");
                }
                return _vw_aspnet_Roles;
            }
        }
        private ObjectSet<vw_aspnet_Roles> _vw_aspnet_Roles;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<vw_aspnet_Users> vw_aspnet_Users
        {
            get
            {
                if ((_vw_aspnet_Users == null))
                {
                    _vw_aspnet_Users = base.CreateObjectSet<vw_aspnet_Users>("vw_aspnet_Users");
                }
                return _vw_aspnet_Users;
            }
        }
        private ObjectSet<vw_aspnet_Users> _vw_aspnet_Users;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<vw_aspnet_UsersInRoles> vw_aspnet_UsersInRoles
        {
            get
            {
                if ((_vw_aspnet_UsersInRoles == null))
                {
                    _vw_aspnet_UsersInRoles = base.CreateObjectSet<vw_aspnet_UsersInRoles>("vw_aspnet_UsersInRoles");
                }
                return _vw_aspnet_UsersInRoles;
            }
        }
        private ObjectSet<vw_aspnet_UsersInRoles> _vw_aspnet_UsersInRoles;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<vw_aspnet_WebPartState_Paths> vw_aspnet_WebPartState_Paths
        {
            get
            {
                if ((_vw_aspnet_WebPartState_Paths == null))
                {
                    _vw_aspnet_WebPartState_Paths = base.CreateObjectSet<vw_aspnet_WebPartState_Paths>("vw_aspnet_WebPartState_Paths");
                }
                return _vw_aspnet_WebPartState_Paths;
            }
        }
        private ObjectSet<vw_aspnet_WebPartState_Paths> _vw_aspnet_WebPartState_Paths;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<vw_aspnet_WebPartState_Shared> vw_aspnet_WebPartState_Shared
        {
            get
            {
                if ((_vw_aspnet_WebPartState_Shared == null))
                {
                    _vw_aspnet_WebPartState_Shared = base.CreateObjectSet<vw_aspnet_WebPartState_Shared>("vw_aspnet_WebPartState_Shared");
                }
                return _vw_aspnet_WebPartState_Shared;
            }
        }
        private ObjectSet<vw_aspnet_WebPartState_Shared> _vw_aspnet_WebPartState_Shared;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<vw_aspnet_WebPartState_User> vw_aspnet_WebPartState_User
        {
            get
            {
                if ((_vw_aspnet_WebPartState_User == null))
                {
                    _vw_aspnet_WebPartState_User = base.CreateObjectSet<vw_aspnet_WebPartState_User>("vw_aspnet_WebPartState_User");
                }
                return _vw_aspnet_WebPartState_User;
            }
        }
        private ObjectSet<vw_aspnet_WebPartState_User> _vw_aspnet_WebPartState_User;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ViewSeries> ViewSeries
        {
            get
            {
                if ((_ViewSeries == null))
                {
                    _ViewSeries = base.CreateObjectSet<ViewSeries>("ViewSeries");
                }
                return _ViewSeries;
            }
        }
        private ObjectSet<ViewSeries> _ViewSeries;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ViewChartSetsCharts> ViewChartSetsCharts
        {
            get
            {
                if ((_ViewChartSetsCharts == null))
                {
                    _ViewChartSetsCharts = base.CreateObjectSet<ViewChartSetsCharts>("ViewChartSetsCharts");
                }
                return _ViewChartSetsCharts;
            }
        }
        private ObjectSet<ViewChartSetsCharts> _ViewChartSetsCharts;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ViewSVGDataElementState> ViewSVGDataElementState
        {
            get
            {
                if ((_ViewSVGDataElementState == null))
                {
                    _ViewSVGDataElementState = base.CreateObjectSet<ViewSVGDataElementState>("ViewSVGDataElementState");
                }
                return _ViewSVGDataElementState;
            }
        }
        private ObjectSet<ViewSVGDataElementState> _ViewSVGDataElementState;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ViewChart> ViewChart
        {
            get
            {
                if ((_ViewChart == null))
                {
                    _ViewChart = base.CreateObjectSet<ViewChart>("ViewChart");
                }
                return _ViewChart;
            }
        }
        private ObjectSet<ViewChart> _ViewChart;

        #endregion

        #region Методы AddTo
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ViewAddress. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToViewAddress(ViewAddress viewAddress)
        {
            base.AddObject("ViewAddress", viewAddress);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ViewApartament. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToViewApartament(ViewApartament viewApartament)
        {
            base.AddObject("ViewApartament", viewApartament);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ViewBuilding. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToViewBuilding(ViewBuilding viewBuilding)
        {
            base.AddObject("ViewBuilding", viewBuilding);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ViewChartsDataTypes. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToViewChartsDataTypes(ViewChartsDataTypes viewChartsDataTypes)
        {
            base.AddObject("ViewChartsDataTypes", viewChartsDataTypes);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ViewChartSet. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToViewChartSet(ViewChartSet viewChartSet)
        {
            base.AddObject("ViewChartSet", viewChartSet);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ViewCity. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToViewCity(ViewCity viewCity)
        {
            base.AddObject("ViewCity", viewCity);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ViewCOSEMAttribute. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToViewCOSEMAttribute(ViewCOSEMAttribute viewCOSEMAttribute)
        {
            base.AddObject("ViewCOSEMAttribute", viewCOSEMAttribute);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ViewCOSEMAttributeDataType. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToViewCOSEMAttributeDataType(ViewCOSEMAttributeDataType viewCOSEMAttributeDataType)
        {
            base.AddObject("ViewCOSEMAttributeDataType", viewCOSEMAttributeDataType);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ViewCOSEMAttributeValue. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToViewCOSEMAttributeValue(ViewCOSEMAttributeValue viewCOSEMAttributeValue)
        {
            base.AddObject("ViewCOSEMAttributeValue", viewCOSEMAttributeValue);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ViewCOSEMClass. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToViewCOSEMClass(ViewCOSEMClass viewCOSEMClass)
        {
            base.AddObject("ViewCOSEMClass", viewCOSEMClass);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ViewCOSEMComplexTypeField. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToViewCOSEMComplexTypeField(ViewCOSEMComplexTypeField viewCOSEMComplexTypeField)
        {
            base.AddObject("ViewCOSEMComplexTypeField", viewCOSEMComplexTypeField);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ViewCOSEMDataType. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToViewCOSEMDataType(ViewCOSEMDataType viewCOSEMDataType)
        {
            base.AddObject("ViewCOSEMDataType", viewCOSEMDataType);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ViewCOSEMLogicalDevice. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToViewCOSEMLogicalDevice(ViewCOSEMLogicalDevice viewCOSEMLogicalDevice)
        {
            base.AddObject("ViewCOSEMLogicalDevice", viewCOSEMLogicalDevice);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ViewCOSEMMethod. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToViewCOSEMMethod(ViewCOSEMMethod viewCOSEMMethod)
        {
            base.AddObject("ViewCOSEMMethod", viewCOSEMMethod);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ViewCOSEMObject. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToViewCOSEMObject(ViewCOSEMObject viewCOSEMObject)
        {
            base.AddObject("ViewCOSEMObject", viewCOSEMObject);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ViewCOSEMStaticAttributeValue. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToViewCOSEMStaticAttributeValue(ViewCOSEMStaticAttributeValue viewCOSEMStaticAttributeValue)
        {
            base.AddObject("ViewCOSEMStaticAttributeValue", viewCOSEMStaticAttributeValue);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ViewCountry. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToViewCountry(ViewCountry viewCountry)
        {
            base.AddObject("ViewCountry", viewCountry);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ViewCurrentState. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToViewCurrentState(ViewCurrentState viewCurrentState)
        {
            base.AddObject("ViewCurrentState", viewCurrentState);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ViewDataPoint. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToViewDataPoint(ViewDataPoint viewDataPoint)
        {
            base.AddObject("ViewDataPoint", viewDataPoint);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ViewDataType. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToViewDataType(ViewDataType viewDataType)
        {
            base.AddObject("ViewDataType", viewDataType);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ViewDevice. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToViewDevice(ViewDevice viewDevice)
        {
            base.AddObject("ViewDevice", viewDevice);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ViewDeviceDataType. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToViewDeviceDataType(ViewDeviceDataType viewDeviceDataType)
        {
            base.AddObject("ViewDeviceDataType", viewDeviceDataType);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ViewDeviceOwner. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToViewDeviceOwner(ViewDeviceOwner viewDeviceOwner)
        {
            base.AddObject("ViewDeviceOwner", viewDeviceOwner);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ViewDeviceScheduleParams. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToViewDeviceScheduleParams(ViewDeviceScheduleParams viewDeviceScheduleParams)
        {
            base.AddObject("ViewDeviceScheduleParams", viewDeviceScheduleParams);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ViewDeviceType. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToViewDeviceType(ViewDeviceType viewDeviceType)
        {
            base.AddObject("ViewDeviceType", viewDeviceType);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ViewDeviceTypeAndOwner. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToViewDeviceTypeAndOwner(ViewDeviceTypeAndOwner viewDeviceTypeAndOwner)
        {
            base.AddObject("ViewDeviceTypeAndOwner", viewDeviceTypeAndOwner);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ViewElementFiltered. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToViewElementFiltered(ViewElementFiltered viewElementFiltered)
        {
            base.AddObject("ViewElementFiltered", viewElementFiltered);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ViewElementGroup. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToViewElementGroup(ViewElementGroup viewElementGroup)
        {
            base.AddObject("ViewElementGroup", viewElementGroup);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ViewElementInstanceName. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToViewElementInstanceName(ViewElementInstanceName viewElementInstanceName)
        {
            base.AddObject("ViewElementInstanceName", viewElementInstanceName);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ViewElementLocation. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToViewElementLocation(ViewElementLocation viewElementLocation)
        {
            base.AddObject("ViewElementLocation", viewElementLocation);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ViewElementLogicalName. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToViewElementLogicalName(ViewElementLogicalName viewElementLogicalName)
        {
            base.AddObject("ViewElementLogicalName", viewElementLogicalName);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ViewElementOwner. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToViewElementOwner(ViewElementOwner viewElementOwner)
        {
            base.AddObject("ViewElementOwner", viewElementOwner);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ViewEvent. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToViewEvent(ViewEvent viewEvent)
        {
            base.AddObject("ViewEvent", viewEvent);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ViewEventCategory. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToViewEventCategory(ViewEventCategory viewEventCategory)
        {
            base.AddObject("ViewEventCategory", viewEventCategory);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ViewFile. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToViewFile(ViewFile viewFile)
        {
            base.AddObject("ViewFile", viewFile);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ViewGroup. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToViewGroup(ViewGroup viewGroup)
        {
            base.AddObject("ViewGroup", viewGroup);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ViewOBISGroup. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToViewOBISGroup(ViewOBISGroup viewOBISGroup)
        {
            base.AddObject("ViewOBISGroup", viewOBISGroup);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ViewOBISSet. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToViewOBISSet(ViewOBISSet viewOBISSet)
        {
            base.AddObject("ViewOBISSet", viewOBISSet);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ViewSchedule. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToViewSchedule(ViewSchedule viewSchedule)
        {
            base.AddObject("ViewSchedule", viewSchedule);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ViewSession. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToViewSession(ViewSession viewSession)
        {
            base.AddObject("ViewSession", viewSession);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ViewState. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToViewState(ViewState viewState)
        {
            base.AddObject("ViewState", viewState);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ViewStreet. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToViewStreet(ViewStreet viewStreet)
        {
            base.AddObject("ViewStreet", viewStreet);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ViewUser. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToViewUser(ViewUser viewUser)
        {
            base.AddObject("ViewUser", viewUser);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ViewXMLTemplate. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToViewXMLTemplate(ViewXMLTemplate viewXMLTemplate)
        {
            base.AddObject("ViewXMLTemplate", viewXMLTemplate);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ViewZipCode. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToViewZipCode(ViewZipCode viewZipCode)
        {
            base.AddObject("ViewZipCode", viewZipCode);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet vw_aspnet_Applications. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddTovw_aspnet_Applications(vw_aspnet_Applications vw_aspnet_Applications)
        {
            base.AddObject("vw_aspnet_Applications", vw_aspnet_Applications);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet vw_aspnet_MembershipUsers. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddTovw_aspnet_MembershipUsers(vw_aspnet_MembershipUsers vw_aspnet_MembershipUsers)
        {
            base.AddObject("vw_aspnet_MembershipUsers", vw_aspnet_MembershipUsers);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet vw_aspnet_Profiles. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddTovw_aspnet_Profiles(vw_aspnet_Profiles vw_aspnet_Profiles)
        {
            base.AddObject("vw_aspnet_Profiles", vw_aspnet_Profiles);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet vw_aspnet_Roles. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddTovw_aspnet_Roles(vw_aspnet_Roles vw_aspnet_Roles)
        {
            base.AddObject("vw_aspnet_Roles", vw_aspnet_Roles);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet vw_aspnet_Users. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddTovw_aspnet_Users(vw_aspnet_Users vw_aspnet_Users)
        {
            base.AddObject("vw_aspnet_Users", vw_aspnet_Users);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet vw_aspnet_UsersInRoles. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddTovw_aspnet_UsersInRoles(vw_aspnet_UsersInRoles vw_aspnet_UsersInRoles)
        {
            base.AddObject("vw_aspnet_UsersInRoles", vw_aspnet_UsersInRoles);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet vw_aspnet_WebPartState_Paths. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddTovw_aspnet_WebPartState_Paths(vw_aspnet_WebPartState_Paths vw_aspnet_WebPartState_Paths)
        {
            base.AddObject("vw_aspnet_WebPartState_Paths", vw_aspnet_WebPartState_Paths);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet vw_aspnet_WebPartState_Shared. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddTovw_aspnet_WebPartState_Shared(vw_aspnet_WebPartState_Shared vw_aspnet_WebPartState_Shared)
        {
            base.AddObject("vw_aspnet_WebPartState_Shared", vw_aspnet_WebPartState_Shared);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet vw_aspnet_WebPartState_User. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddTovw_aspnet_WebPartState_User(vw_aspnet_WebPartState_User vw_aspnet_WebPartState_User)
        {
            base.AddObject("vw_aspnet_WebPartState_User", vw_aspnet_WebPartState_User);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ViewSeries. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToViewSeries(ViewSeries viewSeries)
        {
            base.AddObject("ViewSeries", viewSeries);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ViewChartSetsCharts. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToViewChartSetsCharts(ViewChartSetsCharts viewChartSetsCharts)
        {
            base.AddObject("ViewChartSetsCharts", viewChartSetsCharts);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ViewSVGDataElementState. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToViewSVGDataElementState(ViewSVGDataElementState viewSVGDataElementState)
        {
            base.AddObject("ViewSVGDataElementState", viewSVGDataElementState);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ViewChart. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToViewChart(ViewChart viewChart)
        {
            base.AddObject("ViewChart", viewChart);
        }

        #endregion

        #region Импортируемые функции
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="name">Нет доступной документации по метаданным.</param>
        /// <param name="deviceNamePrefix">Нет доступной документации по метаданным.</param>
        /// <param name="startingIP1">Нет доступной документации по метаданным.</param>
        /// <param name="startingIP2">Нет доступной документации по метаданным.</param>
        /// <param name="startingIP3">Нет доступной документации по метаданным.</param>
        /// <param name="startingIP4">Нет доступной документации по метаданным.</param>
        /// <param name="endingIP1">Нет доступной документации по метаданным.</param>
        /// <param name="endingIP2">Нет доступной документации по метаданным.</param>
        /// <param name="endingIP3">Нет доступной документации по метаданным.</param>
        /// <param name="endingIP4">Нет доступной документации по метаданным.</param>
        /// <param name="secondaryStartingIP1">Нет доступной документации по метаданным.</param>
        /// <param name="secondaryStartingIP2">Нет доступной документации по метаданным.</param>
        /// <param name="secondaryStartingIP3">Нет доступной документации по метаданным.</param>
        /// <param name="secondaryStartingIP4">Нет доступной документации по метаданным.</param>
        /// <param name="startingIPPort">Нет доступной документации по метаданным.</param>
        /// <param name="endingIPPort">Нет доступной документации по метаданным.</param>
        /// <param name="secondaryStartingIPPort">Нет доступной документации по метаданным.</param>
        /// <param name="deviceTypeID">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public ObjectResult<Nullable<global::System.Int64>> AddGroup(global::System.String name, global::System.String deviceNamePrefix, global::System.String startingIP1, global::System.String startingIP2, global::System.String startingIP3, global::System.String startingIP4, global::System.String endingIP1, global::System.String endingIP2, global::System.String endingIP3, global::System.String endingIP4, global::System.String secondaryStartingIP1, global::System.String secondaryStartingIP2, global::System.String secondaryStartingIP3, global::System.String secondaryStartingIP4, global::System.String startingIPPort, global::System.String endingIPPort, global::System.String secondaryStartingIPPort, Nullable<global::System.Int64> deviceTypeID, Nullable<global::System.Guid> dataOwnerID)
        {
            ObjectParameter nameParameter;
            if (name != null)
            {
                nameParameter = new ObjectParameter("Name", name);
            }
            else
            {
                nameParameter = new ObjectParameter("Name", typeof(global::System.String));
            }
    
            ObjectParameter deviceNamePrefixParameter;
            if (deviceNamePrefix != null)
            {
                deviceNamePrefixParameter = new ObjectParameter("DeviceNamePrefix", deviceNamePrefix);
            }
            else
            {
                deviceNamePrefixParameter = new ObjectParameter("DeviceNamePrefix", typeof(global::System.String));
            }
    
            ObjectParameter startingIP1Parameter;
            if (startingIP1 != null)
            {
                startingIP1Parameter = new ObjectParameter("StartingIP1", startingIP1);
            }
            else
            {
                startingIP1Parameter = new ObjectParameter("StartingIP1", typeof(global::System.String));
            }
    
            ObjectParameter startingIP2Parameter;
            if (startingIP2 != null)
            {
                startingIP2Parameter = new ObjectParameter("StartingIP2", startingIP2);
            }
            else
            {
                startingIP2Parameter = new ObjectParameter("StartingIP2", typeof(global::System.String));
            }
    
            ObjectParameter startingIP3Parameter;
            if (startingIP3 != null)
            {
                startingIP3Parameter = new ObjectParameter("StartingIP3", startingIP3);
            }
            else
            {
                startingIP3Parameter = new ObjectParameter("StartingIP3", typeof(global::System.String));
            }
    
            ObjectParameter startingIP4Parameter;
            if (startingIP4 != null)
            {
                startingIP4Parameter = new ObjectParameter("StartingIP4", startingIP4);
            }
            else
            {
                startingIP4Parameter = new ObjectParameter("StartingIP4", typeof(global::System.String));
            }
    
            ObjectParameter endingIP1Parameter;
            if (endingIP1 != null)
            {
                endingIP1Parameter = new ObjectParameter("EndingIP1", endingIP1);
            }
            else
            {
                endingIP1Parameter = new ObjectParameter("EndingIP1", typeof(global::System.String));
            }
    
            ObjectParameter endingIP2Parameter;
            if (endingIP2 != null)
            {
                endingIP2Parameter = new ObjectParameter("EndingIP2", endingIP2);
            }
            else
            {
                endingIP2Parameter = new ObjectParameter("EndingIP2", typeof(global::System.String));
            }
    
            ObjectParameter endingIP3Parameter;
            if (endingIP3 != null)
            {
                endingIP3Parameter = new ObjectParameter("EndingIP3", endingIP3);
            }
            else
            {
                endingIP3Parameter = new ObjectParameter("EndingIP3", typeof(global::System.String));
            }
    
            ObjectParameter endingIP4Parameter;
            if (endingIP4 != null)
            {
                endingIP4Parameter = new ObjectParameter("EndingIP4", endingIP4);
            }
            else
            {
                endingIP4Parameter = new ObjectParameter("EndingIP4", typeof(global::System.String));
            }
    
            ObjectParameter secondaryStartingIP1Parameter;
            if (secondaryStartingIP1 != null)
            {
                secondaryStartingIP1Parameter = new ObjectParameter("SecondaryStartingIP1", secondaryStartingIP1);
            }
            else
            {
                secondaryStartingIP1Parameter = new ObjectParameter("SecondaryStartingIP1", typeof(global::System.String));
            }
    
            ObjectParameter secondaryStartingIP2Parameter;
            if (secondaryStartingIP2 != null)
            {
                secondaryStartingIP2Parameter = new ObjectParameter("SecondaryStartingIP2", secondaryStartingIP2);
            }
            else
            {
                secondaryStartingIP2Parameter = new ObjectParameter("SecondaryStartingIP2", typeof(global::System.String));
            }
    
            ObjectParameter secondaryStartingIP3Parameter;
            if (secondaryStartingIP3 != null)
            {
                secondaryStartingIP3Parameter = new ObjectParameter("SecondaryStartingIP3", secondaryStartingIP3);
            }
            else
            {
                secondaryStartingIP3Parameter = new ObjectParameter("SecondaryStartingIP3", typeof(global::System.String));
            }
    
            ObjectParameter secondaryStartingIP4Parameter;
            if (secondaryStartingIP4 != null)
            {
                secondaryStartingIP4Parameter = new ObjectParameter("SecondaryStartingIP4", secondaryStartingIP4);
            }
            else
            {
                secondaryStartingIP4Parameter = new ObjectParameter("SecondaryStartingIP4", typeof(global::System.String));
            }
    
            ObjectParameter startingIPPortParameter;
            if (startingIPPort != null)
            {
                startingIPPortParameter = new ObjectParameter("StartingIPPort", startingIPPort);
            }
            else
            {
                startingIPPortParameter = new ObjectParameter("StartingIPPort", typeof(global::System.String));
            }
    
            ObjectParameter endingIPPortParameter;
            if (endingIPPort != null)
            {
                endingIPPortParameter = new ObjectParameter("EndingIPPort", endingIPPort);
            }
            else
            {
                endingIPPortParameter = new ObjectParameter("EndingIPPort", typeof(global::System.String));
            }
    
            ObjectParameter secondaryStartingIPPortParameter;
            if (secondaryStartingIPPort != null)
            {
                secondaryStartingIPPortParameter = new ObjectParameter("SecondaryStartingIPPort", secondaryStartingIPPort);
            }
            else
            {
                secondaryStartingIPPortParameter = new ObjectParameter("SecondaryStartingIPPort", typeof(global::System.String));
            }
    
            ObjectParameter deviceTypeIDParameter;
            if (deviceTypeID.HasValue)
            {
                deviceTypeIDParameter = new ObjectParameter("DeviceTypeID", deviceTypeID);
            }
            else
            {
                deviceTypeIDParameter = new ObjectParameter("DeviceTypeID", typeof(global::System.Int64));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<Nullable<global::System.Int64>>("AddGroup", nameParameter, deviceNamePrefixParameter, startingIP1Parameter, startingIP2Parameter, startingIP3Parameter, startingIP4Parameter, endingIP1Parameter, endingIP2Parameter, endingIP3Parameter, endingIP4Parameter, secondaryStartingIP1Parameter, secondaryStartingIP2Parameter, secondaryStartingIP3Parameter, secondaryStartingIP4Parameter, startingIPPortParameter, endingIPPortParameter, secondaryStartingIPPortParameter, deviceTypeIDParameter, dataOwnerIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="name">Нет доступной документации по метаданным.</param>
        /// <param name="internalAddress">Нет доступной документации по метаданным.</param>
        /// <param name="addressType">Нет доступной документации по метаданным.</param>
        /// <param name="port">Нет доступной документации по метаданным.</param>
        /// <param name="groupID">Нет доступной документации по метаданным.</param>
        /// <param name="typeID">Нет доступной документации по метаданным.</param>
        /// <param name="ownerID">Нет доступной документации по метаданным.</param>
        /// <param name="iP1">Нет доступной документации по метаданным.</param>
        /// <param name="iP2">Нет доступной документации по метаданным.</param>
        /// <param name="iP3">Нет доступной документации по метаданным.</param>
        /// <param name="iP4">Нет доступной документации по метаданным.</param>
        /// <param name="secondaryPort">Нет доступной документации по метаданным.</param>
        /// <param name="secondaryIP1">Нет доступной документации по метаданным.</param>
        /// <param name="secondaryIP2">Нет доступной документации по метаданным.</param>
        /// <param name="secondaryIP3">Нет доступной документации по метаданным.</param>
        /// <param name="secondaryIP4">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        /// <param name="locationAddressID">Нет доступной документации по метаданным.</param>
        /// <param name="saveSessions">Нет доступной документации по метаданным.</param>
        public ObjectResult<Nullable<global::System.Int64>> AddDevice(global::System.String name, global::System.String internalAddress, global::System.String addressType, global::System.String port, Nullable<global::System.Int64> groupID, Nullable<global::System.Int64> typeID, Nullable<global::System.Int64> ownerID, global::System.String iP1, global::System.String iP2, global::System.String iP3, global::System.String iP4, global::System.String secondaryPort, global::System.String secondaryIP1, global::System.String secondaryIP2, global::System.String secondaryIP3, global::System.String secondaryIP4, Nullable<global::System.Guid> dataOwnerID, Nullable<global::System.Int64> locationAddressID, Nullable<global::System.Boolean> saveSessions)
        {
            ObjectParameter nameParameter;
            if (name != null)
            {
                nameParameter = new ObjectParameter("Name", name);
            }
            else
            {
                nameParameter = new ObjectParameter("Name", typeof(global::System.String));
            }
    
            ObjectParameter internalAddressParameter;
            if (internalAddress != null)
            {
                internalAddressParameter = new ObjectParameter("InternalAddress", internalAddress);
            }
            else
            {
                internalAddressParameter = new ObjectParameter("InternalAddress", typeof(global::System.String));
            }
    
            ObjectParameter addressTypeParameter;
            if (addressType != null)
            {
                addressTypeParameter = new ObjectParameter("AddressType", addressType);
            }
            else
            {
                addressTypeParameter = new ObjectParameter("AddressType", typeof(global::System.String));
            }
    
            ObjectParameter portParameter;
            if (port != null)
            {
                portParameter = new ObjectParameter("Port", port);
            }
            else
            {
                portParameter = new ObjectParameter("Port", typeof(global::System.String));
            }
    
            ObjectParameter groupIDParameter;
            if (groupID.HasValue)
            {
                groupIDParameter = new ObjectParameter("GroupID", groupID);
            }
            else
            {
                groupIDParameter = new ObjectParameter("GroupID", typeof(global::System.Int64));
            }
    
            ObjectParameter typeIDParameter;
            if (typeID.HasValue)
            {
                typeIDParameter = new ObjectParameter("TypeID", typeID);
            }
            else
            {
                typeIDParameter = new ObjectParameter("TypeID", typeof(global::System.Int64));
            }
    
            ObjectParameter ownerIDParameter;
            if (ownerID.HasValue)
            {
                ownerIDParameter = new ObjectParameter("OwnerID", ownerID);
            }
            else
            {
                ownerIDParameter = new ObjectParameter("OwnerID", typeof(global::System.Int64));
            }
    
            ObjectParameter iP1Parameter;
            if (iP1 != null)
            {
                iP1Parameter = new ObjectParameter("IP1", iP1);
            }
            else
            {
                iP1Parameter = new ObjectParameter("IP1", typeof(global::System.String));
            }
    
            ObjectParameter iP2Parameter;
            if (iP2 != null)
            {
                iP2Parameter = new ObjectParameter("IP2", iP2);
            }
            else
            {
                iP2Parameter = new ObjectParameter("IP2", typeof(global::System.String));
            }
    
            ObjectParameter iP3Parameter;
            if (iP3 != null)
            {
                iP3Parameter = new ObjectParameter("IP3", iP3);
            }
            else
            {
                iP3Parameter = new ObjectParameter("IP3", typeof(global::System.String));
            }
    
            ObjectParameter iP4Parameter;
            if (iP4 != null)
            {
                iP4Parameter = new ObjectParameter("IP4", iP4);
            }
            else
            {
                iP4Parameter = new ObjectParameter("IP4", typeof(global::System.String));
            }
    
            ObjectParameter secondaryPortParameter;
            if (secondaryPort != null)
            {
                secondaryPortParameter = new ObjectParameter("SecondaryPort", secondaryPort);
            }
            else
            {
                secondaryPortParameter = new ObjectParameter("SecondaryPort", typeof(global::System.String));
            }
    
            ObjectParameter secondaryIP1Parameter;
            if (secondaryIP1 != null)
            {
                secondaryIP1Parameter = new ObjectParameter("SecondaryIP1", secondaryIP1);
            }
            else
            {
                secondaryIP1Parameter = new ObjectParameter("SecondaryIP1", typeof(global::System.String));
            }
    
            ObjectParameter secondaryIP2Parameter;
            if (secondaryIP2 != null)
            {
                secondaryIP2Parameter = new ObjectParameter("SecondaryIP2", secondaryIP2);
            }
            else
            {
                secondaryIP2Parameter = new ObjectParameter("SecondaryIP2", typeof(global::System.String));
            }
    
            ObjectParameter secondaryIP3Parameter;
            if (secondaryIP3 != null)
            {
                secondaryIP3Parameter = new ObjectParameter("SecondaryIP3", secondaryIP3);
            }
            else
            {
                secondaryIP3Parameter = new ObjectParameter("SecondaryIP3", typeof(global::System.String));
            }
    
            ObjectParameter secondaryIP4Parameter;
            if (secondaryIP4 != null)
            {
                secondaryIP4Parameter = new ObjectParameter("SecondaryIP4", secondaryIP4);
            }
            else
            {
                secondaryIP4Parameter = new ObjectParameter("SecondaryIP4", typeof(global::System.String));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            ObjectParameter locationAddressIDParameter;
            if (locationAddressID.HasValue)
            {
                locationAddressIDParameter = new ObjectParameter("LocationAddressID", locationAddressID);
            }
            else
            {
                locationAddressIDParameter = new ObjectParameter("LocationAddressID", typeof(global::System.Int64));
            }
    
            ObjectParameter saveSessionsParameter;
            if (saveSessions.HasValue)
            {
                saveSessionsParameter = new ObjectParameter("SaveSessions", saveSessions);
            }
            else
            {
                saveSessionsParameter = new ObjectParameter("SaveSessions", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<Nullable<global::System.Int64>>("AddDevice", nameParameter, internalAddressParameter, addressTypeParameter, portParameter, groupIDParameter, typeIDParameter, ownerIDParameter, iP1Parameter, iP2Parameter, iP3Parameter, iP4Parameter, secondaryPortParameter, secondaryIP1Parameter, secondaryIP2Parameter, secondaryIP3Parameter, secondaryIP4Parameter, dataOwnerIDParameter, locationAddressIDParameter, saveSessionsParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="groupID">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public int DeleteGroup(Nullable<global::System.Int64> groupID, Nullable<global::System.Guid> dataOwnerID)
        {
            ObjectParameter groupIDParameter;
            if (groupID.HasValue)
            {
                groupIDParameter = new ObjectParameter("GroupID", groupID);
            }
            else
            {
                groupIDParameter = new ObjectParameter("GroupID", typeof(global::System.Int64));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction("DeleteGroup", groupIDParameter, dataOwnerIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="iD">Нет доступной документации по метаданным.</param>
        /// <param name="minutesE">Нет доступной документации по метаданным.</param>
        /// <param name="minutesG">Нет доступной документации по метаданным.</param>
        /// <param name="minMode">Нет доступной документации по метаданным.</param>
        /// <param name="hoursE">Нет доступной документации по метаданным.</param>
        /// <param name="hoursG">Нет доступной документации по метаданным.</param>
        /// <param name="hourMode">Нет доступной документации по метаданным.</param>
        /// <param name="daysE">Нет доступной документации по метаданным.</param>
        /// <param name="daysG">Нет доступной документации по метаданным.</param>
        /// <param name="dayMode">Нет доступной документации по метаданным.</param>
        /// <param name="weeksG">Нет доступной документации по метаданным.</param>
        /// <param name="weekMode">Нет доступной документации по метаданным.</param>
        /// <param name="monday">Нет доступной документации по метаданным.</param>
        /// <param name="tuesday">Нет доступной документации по метаданным.</param>
        /// <param name="wednesday">Нет доступной документации по метаданным.</param>
        /// <param name="thursday">Нет доступной документации по метаданным.</param>
        /// <param name="friday">Нет доступной документации по метаданным.</param>
        /// <param name="saturday">Нет доступной документации по метаданным.</param>
        /// <param name="sunday">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public int UpdateGroupShedule(Nullable<global::System.Int64> iD, Nullable<global::System.Byte> minutesE, Nullable<global::System.Byte> minutesG, global::System.String minMode, Nullable<global::System.Byte> hoursE, Nullable<global::System.Byte> hoursG, global::System.String hourMode, Nullable<global::System.Byte> daysE, Nullable<global::System.Byte> daysG, global::System.String dayMode, Nullable<global::System.Byte> weeksG, global::System.String weekMode, Nullable<global::System.Boolean> monday, Nullable<global::System.Boolean> tuesday, Nullable<global::System.Boolean> wednesday, Nullable<global::System.Boolean> thursday, Nullable<global::System.Boolean> friday, Nullable<global::System.Boolean> saturday, Nullable<global::System.Boolean> sunday, Nullable<global::System.Guid> dataOwnerID)
        {
            ObjectParameter iDParameter;
            if (iD.HasValue)
            {
                iDParameter = new ObjectParameter("ID", iD);
            }
            else
            {
                iDParameter = new ObjectParameter("ID", typeof(global::System.Int64));
            }
    
            ObjectParameter minutesEParameter;
            if (minutesE.HasValue)
            {
                minutesEParameter = new ObjectParameter("MinutesE", minutesE);
            }
            else
            {
                minutesEParameter = new ObjectParameter("MinutesE", typeof(global::System.Byte));
            }
    
            ObjectParameter minutesGParameter;
            if (minutesG.HasValue)
            {
                minutesGParameter = new ObjectParameter("MinutesG", minutesG);
            }
            else
            {
                minutesGParameter = new ObjectParameter("MinutesG", typeof(global::System.Byte));
            }
    
            ObjectParameter minModeParameter;
            if (minMode != null)
            {
                minModeParameter = new ObjectParameter("MinMode", minMode);
            }
            else
            {
                minModeParameter = new ObjectParameter("MinMode", typeof(global::System.String));
            }
    
            ObjectParameter hoursEParameter;
            if (hoursE.HasValue)
            {
                hoursEParameter = new ObjectParameter("HoursE", hoursE);
            }
            else
            {
                hoursEParameter = new ObjectParameter("HoursE", typeof(global::System.Byte));
            }
    
            ObjectParameter hoursGParameter;
            if (hoursG.HasValue)
            {
                hoursGParameter = new ObjectParameter("HoursG", hoursG);
            }
            else
            {
                hoursGParameter = new ObjectParameter("HoursG", typeof(global::System.Byte));
            }
    
            ObjectParameter hourModeParameter;
            if (hourMode != null)
            {
                hourModeParameter = new ObjectParameter("HourMode", hourMode);
            }
            else
            {
                hourModeParameter = new ObjectParameter("HourMode", typeof(global::System.String));
            }
    
            ObjectParameter daysEParameter;
            if (daysE.HasValue)
            {
                daysEParameter = new ObjectParameter("DaysE", daysE);
            }
            else
            {
                daysEParameter = new ObjectParameter("DaysE", typeof(global::System.Byte));
            }
    
            ObjectParameter daysGParameter;
            if (daysG.HasValue)
            {
                daysGParameter = new ObjectParameter("DaysG", daysG);
            }
            else
            {
                daysGParameter = new ObjectParameter("DaysG", typeof(global::System.Byte));
            }
    
            ObjectParameter dayModeParameter;
            if (dayMode != null)
            {
                dayModeParameter = new ObjectParameter("DayMode", dayMode);
            }
            else
            {
                dayModeParameter = new ObjectParameter("DayMode", typeof(global::System.String));
            }
    
            ObjectParameter weeksGParameter;
            if (weeksG.HasValue)
            {
                weeksGParameter = new ObjectParameter("WeeksG", weeksG);
            }
            else
            {
                weeksGParameter = new ObjectParameter("WeeksG", typeof(global::System.Byte));
            }
    
            ObjectParameter weekModeParameter;
            if (weekMode != null)
            {
                weekModeParameter = new ObjectParameter("WeekMode", weekMode);
            }
            else
            {
                weekModeParameter = new ObjectParameter("WeekMode", typeof(global::System.String));
            }
    
            ObjectParameter mondayParameter;
            if (monday.HasValue)
            {
                mondayParameter = new ObjectParameter("Monday", monday);
            }
            else
            {
                mondayParameter = new ObjectParameter("Monday", typeof(global::System.Boolean));
            }
    
            ObjectParameter tuesdayParameter;
            if (tuesday.HasValue)
            {
                tuesdayParameter = new ObjectParameter("Tuesday", tuesday);
            }
            else
            {
                tuesdayParameter = new ObjectParameter("Tuesday", typeof(global::System.Boolean));
            }
    
            ObjectParameter wednesdayParameter;
            if (wednesday.HasValue)
            {
                wednesdayParameter = new ObjectParameter("Wednesday", wednesday);
            }
            else
            {
                wednesdayParameter = new ObjectParameter("Wednesday", typeof(global::System.Boolean));
            }
    
            ObjectParameter thursdayParameter;
            if (thursday.HasValue)
            {
                thursdayParameter = new ObjectParameter("Thursday", thursday);
            }
            else
            {
                thursdayParameter = new ObjectParameter("Thursday", typeof(global::System.Boolean));
            }
    
            ObjectParameter fridayParameter;
            if (friday.HasValue)
            {
                fridayParameter = new ObjectParameter("Friday", friday);
            }
            else
            {
                fridayParameter = new ObjectParameter("Friday", typeof(global::System.Boolean));
            }
    
            ObjectParameter saturdayParameter;
            if (saturday.HasValue)
            {
                saturdayParameter = new ObjectParameter("Saturday", saturday);
            }
            else
            {
                saturdayParameter = new ObjectParameter("Saturday", typeof(global::System.Boolean));
            }
    
            ObjectParameter sundayParameter;
            if (sunday.HasValue)
            {
                sundayParameter = new ObjectParameter("Sunday", sunday);
            }
            else
            {
                sundayParameter = new ObjectParameter("Sunday", typeof(global::System.Boolean));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction("UpdateGroupShedule", iDParameter, minutesEParameter, minutesGParameter, minModeParameter, hoursEParameter, hoursGParameter, hourModeParameter, daysEParameter, daysGParameter, dayModeParameter, weeksGParameter, weekModeParameter, mondayParameter, tuesdayParameter, wednesdayParameter, thursdayParameter, fridayParameter, saturdayParameter, sundayParameter, dataOwnerIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="description">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        /// <param name="standard">Нет доступной документации по метаданным.</param>
        public int AddDeviceType(global::System.String description, Nullable<global::System.Guid> dataOwnerID, Nullable<global::System.Boolean> standard)
        {
            ObjectParameter descriptionParameter;
            if (description != null)
            {
                descriptionParameter = new ObjectParameter("Description", description);
            }
            else
            {
                descriptionParameter = new ObjectParameter("Description", typeof(global::System.String));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            ObjectParameter standardParameter;
            if (standard.HasValue)
            {
                standardParameter = new ObjectParameter("Standard", standard);
            }
            else
            {
                standardParameter = new ObjectParameter("Standard", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction("AddDeviceType", descriptionParameter, dataOwnerIDParameter, standardParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="iD">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public int DeleteDeviceType(Nullable<global::System.Int64> iD, Nullable<global::System.Guid> dataOwnerID)
        {
            ObjectParameter iDParameter;
            if (iD.HasValue)
            {
                iDParameter = new ObjectParameter("ID", iD);
            }
            else
            {
                iDParameter = new ObjectParameter("ID", typeof(global::System.Int64));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction("DeleteDeviceType", iDParameter, dataOwnerIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="iD">Нет доступной документации по метаданным.</param>
        /// <param name="description">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        /// <param name="standard">Нет доступной документации по метаданным.</param>
        public int UpdateDeviceType(Nullable<global::System.Int64> iD, global::System.String description, Nullable<global::System.Guid> dataOwnerID, Nullable<global::System.Boolean> standard)
        {
            ObjectParameter iDParameter;
            if (iD.HasValue)
            {
                iDParameter = new ObjectParameter("ID", iD);
            }
            else
            {
                iDParameter = new ObjectParameter("ID", typeof(global::System.Int64));
            }
    
            ObjectParameter descriptionParameter;
            if (description != null)
            {
                descriptionParameter = new ObjectParameter("Description", description);
            }
            else
            {
                descriptionParameter = new ObjectParameter("Description", typeof(global::System.String));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            ObjectParameter standardParameter;
            if (standard.HasValue)
            {
                standardParameter = new ObjectParameter("Standard", standard);
            }
            else
            {
                standardParameter = new ObjectParameter("Standard", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction("UpdateDeviceType", iDParameter, descriptionParameter, dataOwnerIDParameter, standardParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="iD">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public int DeleteDevice(Nullable<global::System.Int64> iD, Nullable<global::System.Guid> dataOwnerID)
        {
            ObjectParameter iDParameter;
            if (iD.HasValue)
            {
                iDParameter = new ObjectParameter("ID", iD);
            }
            else
            {
                iDParameter = new ObjectParameter("ID", typeof(global::System.Int64));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction("DeleteDevice", iDParameter, dataOwnerIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="deviceID">Нет доступной документации по метаданным.</param>
        /// <param name="name">Нет доступной документации по метаданным.</param>
        /// <param name="internalAddress">Нет доступной документации по метаданным.</param>
        /// <param name="addressType">Нет доступной документации по метаданным.</param>
        /// <param name="port">Нет доступной документации по метаданным.</param>
        /// <param name="groupID">Нет доступной документации по метаданным.</param>
        /// <param name="typeID">Нет доступной документации по метаданным.</param>
        /// <param name="ownerID">Нет доступной документации по метаданным.</param>
        /// <param name="iP1">Нет доступной документации по метаданным.</param>
        /// <param name="iP2">Нет доступной документации по метаданным.</param>
        /// <param name="iP3">Нет доступной документации по метаданным.</param>
        /// <param name="iP4">Нет доступной документации по метаданным.</param>
        /// <param name="secondaryPort">Нет доступной документации по метаданным.</param>
        /// <param name="secondaryIP1">Нет доступной документации по метаданным.</param>
        /// <param name="secondaryIP2">Нет доступной документации по метаданным.</param>
        /// <param name="secondaryIP3">Нет доступной документации по метаданным.</param>
        /// <param name="secondaryIP4">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public int UpdateDevice(Nullable<global::System.Int64> deviceID, global::System.String name, global::System.String internalAddress, global::System.String addressType, global::System.String port, Nullable<global::System.Int64> groupID, Nullable<global::System.Int64> typeID, Nullable<global::System.Int64> ownerID, global::System.String iP1, global::System.String iP2, global::System.String iP3, global::System.String iP4, global::System.String secondaryPort, global::System.String secondaryIP1, global::System.String secondaryIP2, global::System.String secondaryIP3, global::System.String secondaryIP4, Nullable<global::System.Guid> dataOwnerID)
        {
            ObjectParameter deviceIDParameter;
            if (deviceID.HasValue)
            {
                deviceIDParameter = new ObjectParameter("DeviceID", deviceID);
            }
            else
            {
                deviceIDParameter = new ObjectParameter("DeviceID", typeof(global::System.Int64));
            }
    
            ObjectParameter nameParameter;
            if (name != null)
            {
                nameParameter = new ObjectParameter("Name", name);
            }
            else
            {
                nameParameter = new ObjectParameter("Name", typeof(global::System.String));
            }
    
            ObjectParameter internalAddressParameter;
            if (internalAddress != null)
            {
                internalAddressParameter = new ObjectParameter("InternalAddress", internalAddress);
            }
            else
            {
                internalAddressParameter = new ObjectParameter("InternalAddress", typeof(global::System.String));
            }
    
            ObjectParameter addressTypeParameter;
            if (addressType != null)
            {
                addressTypeParameter = new ObjectParameter("AddressType", addressType);
            }
            else
            {
                addressTypeParameter = new ObjectParameter("AddressType", typeof(global::System.String));
            }
    
            ObjectParameter portParameter;
            if (port != null)
            {
                portParameter = new ObjectParameter("Port", port);
            }
            else
            {
                portParameter = new ObjectParameter("Port", typeof(global::System.String));
            }
    
            ObjectParameter groupIDParameter;
            if (groupID.HasValue)
            {
                groupIDParameter = new ObjectParameter("GroupID", groupID);
            }
            else
            {
                groupIDParameter = new ObjectParameter("GroupID", typeof(global::System.Int64));
            }
    
            ObjectParameter typeIDParameter;
            if (typeID.HasValue)
            {
                typeIDParameter = new ObjectParameter("TypeID", typeID);
            }
            else
            {
                typeIDParameter = new ObjectParameter("TypeID", typeof(global::System.Int64));
            }
    
            ObjectParameter ownerIDParameter;
            if (ownerID.HasValue)
            {
                ownerIDParameter = new ObjectParameter("OwnerID", ownerID);
            }
            else
            {
                ownerIDParameter = new ObjectParameter("OwnerID", typeof(global::System.Int64));
            }
    
            ObjectParameter iP1Parameter;
            if (iP1 != null)
            {
                iP1Parameter = new ObjectParameter("IP1", iP1);
            }
            else
            {
                iP1Parameter = new ObjectParameter("IP1", typeof(global::System.String));
            }
    
            ObjectParameter iP2Parameter;
            if (iP2 != null)
            {
                iP2Parameter = new ObjectParameter("IP2", iP2);
            }
            else
            {
                iP2Parameter = new ObjectParameter("IP2", typeof(global::System.String));
            }
    
            ObjectParameter iP3Parameter;
            if (iP3 != null)
            {
                iP3Parameter = new ObjectParameter("IP3", iP3);
            }
            else
            {
                iP3Parameter = new ObjectParameter("IP3", typeof(global::System.String));
            }
    
            ObjectParameter iP4Parameter;
            if (iP4 != null)
            {
                iP4Parameter = new ObjectParameter("IP4", iP4);
            }
            else
            {
                iP4Parameter = new ObjectParameter("IP4", typeof(global::System.String));
            }
    
            ObjectParameter secondaryPortParameter;
            if (secondaryPort != null)
            {
                secondaryPortParameter = new ObjectParameter("SecondaryPort", secondaryPort);
            }
            else
            {
                secondaryPortParameter = new ObjectParameter("SecondaryPort", typeof(global::System.String));
            }
    
            ObjectParameter secondaryIP1Parameter;
            if (secondaryIP1 != null)
            {
                secondaryIP1Parameter = new ObjectParameter("SecondaryIP1", secondaryIP1);
            }
            else
            {
                secondaryIP1Parameter = new ObjectParameter("SecondaryIP1", typeof(global::System.String));
            }
    
            ObjectParameter secondaryIP2Parameter;
            if (secondaryIP2 != null)
            {
                secondaryIP2Parameter = new ObjectParameter("SecondaryIP2", secondaryIP2);
            }
            else
            {
                secondaryIP2Parameter = new ObjectParameter("SecondaryIP2", typeof(global::System.String));
            }
    
            ObjectParameter secondaryIP3Parameter;
            if (secondaryIP3 != null)
            {
                secondaryIP3Parameter = new ObjectParameter("SecondaryIP3", secondaryIP3);
            }
            else
            {
                secondaryIP3Parameter = new ObjectParameter("SecondaryIP3", typeof(global::System.String));
            }
    
            ObjectParameter secondaryIP4Parameter;
            if (secondaryIP4 != null)
            {
                secondaryIP4Parameter = new ObjectParameter("SecondaryIP4", secondaryIP4);
            }
            else
            {
                secondaryIP4Parameter = new ObjectParameter("SecondaryIP4", typeof(global::System.String));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction("UpdateDevice", deviceIDParameter, nameParameter, internalAddressParameter, addressTypeParameter, portParameter, groupIDParameter, typeIDParameter, ownerIDParameter, iP1Parameter, iP2Parameter, iP3Parameter, iP4Parameter, secondaryPortParameter, secondaryIP1Parameter, secondaryIP2Parameter, secondaryIP3Parameter, secondaryIP4Parameter, dataOwnerIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="cOSEMClassID">Нет доступной документации по метаданным.</param>
        /// <param name="dynamic">Нет доступной документации по метаданным.</param>
        /// <param name="name">Нет доступной документации по метаданным.</param>
        /// <param name="cOSEMDataTypeID">Нет доступной документации по метаданным.</param>
        /// <param name="minValue">Нет доступной документации по метаданным.</param>
        /// <param name="maxValue">Нет доступной документации по метаданным.</param>
        /// <param name="defValue">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public int AddCOSEMAttribute(Nullable<global::System.Int64> cOSEMClassID, Nullable<global::System.Boolean> dynamic, global::System.String name, Nullable<global::System.Int64> cOSEMDataTypeID, Nullable<global::System.Double> minValue, Nullable<global::System.Double> maxValue, Nullable<global::System.Double> defValue, Nullable<global::System.Guid> dataOwnerID)
        {
            ObjectParameter cOSEMClassIDParameter;
            if (cOSEMClassID.HasValue)
            {
                cOSEMClassIDParameter = new ObjectParameter("COSEMClassID", cOSEMClassID);
            }
            else
            {
                cOSEMClassIDParameter = new ObjectParameter("COSEMClassID", typeof(global::System.Int64));
            }
    
            ObjectParameter dynamicParameter;
            if (dynamic.HasValue)
            {
                dynamicParameter = new ObjectParameter("Dynamic", dynamic);
            }
            else
            {
                dynamicParameter = new ObjectParameter("Dynamic", typeof(global::System.Boolean));
            }
    
            ObjectParameter nameParameter;
            if (name != null)
            {
                nameParameter = new ObjectParameter("Name", name);
            }
            else
            {
                nameParameter = new ObjectParameter("Name", typeof(global::System.String));
            }
    
            ObjectParameter cOSEMDataTypeIDParameter;
            if (cOSEMDataTypeID.HasValue)
            {
                cOSEMDataTypeIDParameter = new ObjectParameter("COSEMDataTypeID", cOSEMDataTypeID);
            }
            else
            {
                cOSEMDataTypeIDParameter = new ObjectParameter("COSEMDataTypeID", typeof(global::System.Int64));
            }
    
            ObjectParameter minValueParameter;
            if (minValue.HasValue)
            {
                minValueParameter = new ObjectParameter("MinValue", minValue);
            }
            else
            {
                minValueParameter = new ObjectParameter("MinValue", typeof(global::System.Double));
            }
    
            ObjectParameter maxValueParameter;
            if (maxValue.HasValue)
            {
                maxValueParameter = new ObjectParameter("MaxValue", maxValue);
            }
            else
            {
                maxValueParameter = new ObjectParameter("MaxValue", typeof(global::System.Double));
            }
    
            ObjectParameter defValueParameter;
            if (defValue.HasValue)
            {
                defValueParameter = new ObjectParameter("DefValue", defValue);
            }
            else
            {
                defValueParameter = new ObjectParameter("DefValue", typeof(global::System.Double));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction("AddCOSEMAttribute", cOSEMClassIDParameter, dynamicParameter, nameParameter, cOSEMDataTypeIDParameter, minValueParameter, maxValueParameter, defValueParameter, dataOwnerIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="iD">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public int DeleteCOSEMAttribute(Nullable<global::System.Int64> iD, Nullable<global::System.Guid> dataOwnerID)
        {
            ObjectParameter iDParameter;
            if (iD.HasValue)
            {
                iDParameter = new ObjectParameter("ID", iD);
            }
            else
            {
                iDParameter = new ObjectParameter("ID", typeof(global::System.Int64));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction("DeleteCOSEMAttribute", iDParameter, dataOwnerIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="iD">Нет доступной документации по метаданным.</param>
        /// <param name="cOSEMClassID">Нет доступной документации по метаданным.</param>
        /// <param name="dynamic">Нет доступной документации по метаданным.</param>
        /// <param name="name">Нет доступной документации по метаданным.</param>
        /// <param name="cOSEMDataTypeID">Нет доступной документации по метаданным.</param>
        /// <param name="minValue">Нет доступной документации по метаданным.</param>
        /// <param name="maxValue">Нет доступной документации по метаданным.</param>
        /// <param name="defValue">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public int UpdateCOSEMAttribute(Nullable<global::System.Int64> iD, Nullable<global::System.Int64> cOSEMClassID, Nullable<global::System.Boolean> dynamic, global::System.String name, Nullable<global::System.Int64> cOSEMDataTypeID, Nullable<global::System.Double> minValue, Nullable<global::System.Double> maxValue, Nullable<global::System.Double> defValue, Nullable<global::System.Guid> dataOwnerID)
        {
            ObjectParameter iDParameter;
            if (iD.HasValue)
            {
                iDParameter = new ObjectParameter("ID", iD);
            }
            else
            {
                iDParameter = new ObjectParameter("ID", typeof(global::System.Int64));
            }
    
            ObjectParameter cOSEMClassIDParameter;
            if (cOSEMClassID.HasValue)
            {
                cOSEMClassIDParameter = new ObjectParameter("COSEMClassID", cOSEMClassID);
            }
            else
            {
                cOSEMClassIDParameter = new ObjectParameter("COSEMClassID", typeof(global::System.Int64));
            }
    
            ObjectParameter dynamicParameter;
            if (dynamic.HasValue)
            {
                dynamicParameter = new ObjectParameter("Dynamic", dynamic);
            }
            else
            {
                dynamicParameter = new ObjectParameter("Dynamic", typeof(global::System.Boolean));
            }
    
            ObjectParameter nameParameter;
            if (name != null)
            {
                nameParameter = new ObjectParameter("Name", name);
            }
            else
            {
                nameParameter = new ObjectParameter("Name", typeof(global::System.String));
            }
    
            ObjectParameter cOSEMDataTypeIDParameter;
            if (cOSEMDataTypeID.HasValue)
            {
                cOSEMDataTypeIDParameter = new ObjectParameter("COSEMDataTypeID", cOSEMDataTypeID);
            }
            else
            {
                cOSEMDataTypeIDParameter = new ObjectParameter("COSEMDataTypeID", typeof(global::System.Int64));
            }
    
            ObjectParameter minValueParameter;
            if (minValue.HasValue)
            {
                minValueParameter = new ObjectParameter("MinValue", minValue);
            }
            else
            {
                minValueParameter = new ObjectParameter("MinValue", typeof(global::System.Double));
            }
    
            ObjectParameter maxValueParameter;
            if (maxValue.HasValue)
            {
                maxValueParameter = new ObjectParameter("MaxValue", maxValue);
            }
            else
            {
                maxValueParameter = new ObjectParameter("MaxValue", typeof(global::System.Double));
            }
    
            ObjectParameter defValueParameter;
            if (defValue.HasValue)
            {
                defValueParameter = new ObjectParameter("DefValue", defValue);
            }
            else
            {
                defValueParameter = new ObjectParameter("DefValue", typeof(global::System.Double));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction("UpdateCOSEMAttribute", iDParameter, cOSEMClassIDParameter, dynamicParameter, nameParameter, cOSEMDataTypeIDParameter, minValueParameter, maxValueParameter, defValueParameter, dataOwnerIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="className">Нет доступной документации по метаданным.</param>
        /// <param name="cardinalityMin">Нет доступной документации по метаданным.</param>
        /// <param name="cardinalityMax">Нет доступной документации по метаданным.</param>
        /// <param name="cOSEMClassID">Нет доступной документации по метаданным.</param>
        /// <param name="version">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        /// <param name="standard">Нет доступной документации по метаданным.</param>
        public int AddCOSEMClass(global::System.String className, Nullable<global::System.Int32> cardinalityMin, Nullable<global::System.Int32> cardinalityMax, Nullable<global::System.Int32> cOSEMClassID, global::System.String version, Nullable<global::System.Guid> dataOwnerID, Nullable<global::System.Boolean> standard)
        {
            ObjectParameter classNameParameter;
            if (className != null)
            {
                classNameParameter = new ObjectParameter("ClassName", className);
            }
            else
            {
                classNameParameter = new ObjectParameter("ClassName", typeof(global::System.String));
            }
    
            ObjectParameter cardinalityMinParameter;
            if (cardinalityMin.HasValue)
            {
                cardinalityMinParameter = new ObjectParameter("CardinalityMin", cardinalityMin);
            }
            else
            {
                cardinalityMinParameter = new ObjectParameter("CardinalityMin", typeof(global::System.Int32));
            }
    
            ObjectParameter cardinalityMaxParameter;
            if (cardinalityMax.HasValue)
            {
                cardinalityMaxParameter = new ObjectParameter("CardinalityMax", cardinalityMax);
            }
            else
            {
                cardinalityMaxParameter = new ObjectParameter("CardinalityMax", typeof(global::System.Int32));
            }
    
            ObjectParameter cOSEMClassIDParameter;
            if (cOSEMClassID.HasValue)
            {
                cOSEMClassIDParameter = new ObjectParameter("COSEMClassID", cOSEMClassID);
            }
            else
            {
                cOSEMClassIDParameter = new ObjectParameter("COSEMClassID", typeof(global::System.Int32));
            }
    
            ObjectParameter versionParameter;
            if (version != null)
            {
                versionParameter = new ObjectParameter("Version", version);
            }
            else
            {
                versionParameter = new ObjectParameter("Version", typeof(global::System.String));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            ObjectParameter standardParameter;
            if (standard.HasValue)
            {
                standardParameter = new ObjectParameter("Standard", standard);
            }
            else
            {
                standardParameter = new ObjectParameter("Standard", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction("AddCOSEMClass", classNameParameter, cardinalityMinParameter, cardinalityMaxParameter, cOSEMClassIDParameter, versionParameter, dataOwnerIDParameter, standardParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="iD">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public int DeleteCOSEMClass(Nullable<global::System.Int64> iD, Nullable<global::System.Guid> dataOwnerID)
        {
            ObjectParameter iDParameter;
            if (iD.HasValue)
            {
                iDParameter = new ObjectParameter("ID", iD);
            }
            else
            {
                iDParameter = new ObjectParameter("ID", typeof(global::System.Int64));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction("DeleteCOSEMClass", iDParameter, dataOwnerIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="iD">Нет доступной документации по метаданным.</param>
        /// <param name="className">Нет доступной документации по метаданным.</param>
        /// <param name="cardinalityMin">Нет доступной документации по метаданным.</param>
        /// <param name="cardinalityMax">Нет доступной документации по метаданным.</param>
        /// <param name="cOSEMClassID">Нет доступной документации по метаданным.</param>
        /// <param name="version">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        /// <param name="standard">Нет доступной документации по метаданным.</param>
        public int UpdateCOSEMClass(Nullable<global::System.Int64> iD, global::System.String className, Nullable<global::System.Int32> cardinalityMin, Nullable<global::System.Int32> cardinalityMax, Nullable<global::System.Int32> cOSEMClassID, global::System.String version, Nullable<global::System.Guid> dataOwnerID, Nullable<global::System.Boolean> standard)
        {
            ObjectParameter iDParameter;
            if (iD.HasValue)
            {
                iDParameter = new ObjectParameter("ID", iD);
            }
            else
            {
                iDParameter = new ObjectParameter("ID", typeof(global::System.Int64));
            }
    
            ObjectParameter classNameParameter;
            if (className != null)
            {
                classNameParameter = new ObjectParameter("ClassName", className);
            }
            else
            {
                classNameParameter = new ObjectParameter("ClassName", typeof(global::System.String));
            }
    
            ObjectParameter cardinalityMinParameter;
            if (cardinalityMin.HasValue)
            {
                cardinalityMinParameter = new ObjectParameter("CardinalityMin", cardinalityMin);
            }
            else
            {
                cardinalityMinParameter = new ObjectParameter("CardinalityMin", typeof(global::System.Int32));
            }
    
            ObjectParameter cardinalityMaxParameter;
            if (cardinalityMax.HasValue)
            {
                cardinalityMaxParameter = new ObjectParameter("CardinalityMax", cardinalityMax);
            }
            else
            {
                cardinalityMaxParameter = new ObjectParameter("CardinalityMax", typeof(global::System.Int32));
            }
    
            ObjectParameter cOSEMClassIDParameter;
            if (cOSEMClassID.HasValue)
            {
                cOSEMClassIDParameter = new ObjectParameter("COSEMClassID", cOSEMClassID);
            }
            else
            {
                cOSEMClassIDParameter = new ObjectParameter("COSEMClassID", typeof(global::System.Int32));
            }
    
            ObjectParameter versionParameter;
            if (version != null)
            {
                versionParameter = new ObjectParameter("Version", version);
            }
            else
            {
                versionParameter = new ObjectParameter("Version", typeof(global::System.String));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            ObjectParameter standardParameter;
            if (standard.HasValue)
            {
                standardParameter = new ObjectParameter("Standard", standard);
            }
            else
            {
                standardParameter = new ObjectParameter("Standard", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction("UpdateCOSEMClass", iDParameter, classNameParameter, cardinalityMinParameter, cardinalityMaxParameter, cOSEMClassIDParameter, versionParameter, dataOwnerIDParameter, standardParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="name">Нет доступной документации по метаданным.</param>
        /// <param name="ancestorTypeID">Нет доступной документации по метаданным.</param>
        /// <param name="itemBitSize">Нет доступной документации по метаданным.</param>
        /// <param name="itemCount">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        /// <param name="standard">Нет доступной документации по метаданным.</param>
        public int AddCOSEMDataType(global::System.String name, Nullable<global::System.Int64> ancestorTypeID, Nullable<global::System.Int64> itemBitSize, Nullable<global::System.Int64> itemCount, Nullable<global::System.Guid> dataOwnerID, Nullable<global::System.Boolean> standard)
        {
            ObjectParameter nameParameter;
            if (name != null)
            {
                nameParameter = new ObjectParameter("Name", name);
            }
            else
            {
                nameParameter = new ObjectParameter("Name", typeof(global::System.String));
            }
    
            ObjectParameter ancestorTypeIDParameter;
            if (ancestorTypeID.HasValue)
            {
                ancestorTypeIDParameter = new ObjectParameter("AncestorTypeID", ancestorTypeID);
            }
            else
            {
                ancestorTypeIDParameter = new ObjectParameter("AncestorTypeID", typeof(global::System.Int64));
            }
    
            ObjectParameter itemBitSizeParameter;
            if (itemBitSize.HasValue)
            {
                itemBitSizeParameter = new ObjectParameter("ItemBitSize", itemBitSize);
            }
            else
            {
                itemBitSizeParameter = new ObjectParameter("ItemBitSize", typeof(global::System.Int64));
            }
    
            ObjectParameter itemCountParameter;
            if (itemCount.HasValue)
            {
                itemCountParameter = new ObjectParameter("ItemCount", itemCount);
            }
            else
            {
                itemCountParameter = new ObjectParameter("ItemCount", typeof(global::System.Int64));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            ObjectParameter standardParameter;
            if (standard.HasValue)
            {
                standardParameter = new ObjectParameter("Standard", standard);
            }
            else
            {
                standardParameter = new ObjectParameter("Standard", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction("AddCOSEMDataType", nameParameter, ancestorTypeIDParameter, itemBitSizeParameter, itemCountParameter, dataOwnerIDParameter, standardParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="iD">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public int DeleteCOSEMDataType(Nullable<global::System.Int64> iD, Nullable<global::System.Guid> dataOwnerID)
        {
            ObjectParameter iDParameter;
            if (iD.HasValue)
            {
                iDParameter = new ObjectParameter("ID", iD);
            }
            else
            {
                iDParameter = new ObjectParameter("ID", typeof(global::System.Int64));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction("DeleteCOSEMDataType", iDParameter, dataOwnerIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="iD">Нет доступной документации по метаданным.</param>
        /// <param name="name">Нет доступной документации по метаданным.</param>
        /// <param name="ancestorTypeID">Нет доступной документации по метаданным.</param>
        /// <param name="itemBitSize">Нет доступной документации по метаданным.</param>
        /// <param name="itemCount">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        /// <param name="standard">Нет доступной документации по метаданным.</param>
        public int UpdateCOSEMDataType(Nullable<global::System.Int64> iD, global::System.String name, Nullable<global::System.Int64> ancestorTypeID, Nullable<global::System.Int64> itemBitSize, Nullable<global::System.Int64> itemCount, Nullable<global::System.Guid> dataOwnerID, Nullable<global::System.Boolean> standard)
        {
            ObjectParameter iDParameter;
            if (iD.HasValue)
            {
                iDParameter = new ObjectParameter("ID", iD);
            }
            else
            {
                iDParameter = new ObjectParameter("ID", typeof(global::System.Int64));
            }
    
            ObjectParameter nameParameter;
            if (name != null)
            {
                nameParameter = new ObjectParameter("Name", name);
            }
            else
            {
                nameParameter = new ObjectParameter("Name", typeof(global::System.String));
            }
    
            ObjectParameter ancestorTypeIDParameter;
            if (ancestorTypeID.HasValue)
            {
                ancestorTypeIDParameter = new ObjectParameter("AncestorTypeID", ancestorTypeID);
            }
            else
            {
                ancestorTypeIDParameter = new ObjectParameter("AncestorTypeID", typeof(global::System.Int64));
            }
    
            ObjectParameter itemBitSizeParameter;
            if (itemBitSize.HasValue)
            {
                itemBitSizeParameter = new ObjectParameter("ItemBitSize", itemBitSize);
            }
            else
            {
                itemBitSizeParameter = new ObjectParameter("ItemBitSize", typeof(global::System.Int64));
            }
    
            ObjectParameter itemCountParameter;
            if (itemCount.HasValue)
            {
                itemCountParameter = new ObjectParameter("ItemCount", itemCount);
            }
            else
            {
                itemCountParameter = new ObjectParameter("ItemCount", typeof(global::System.Int64));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            ObjectParameter standardParameter;
            if (standard.HasValue)
            {
                standardParameter = new ObjectParameter("Standard", standard);
            }
            else
            {
                standardParameter = new ObjectParameter("Standard", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction("UpdateCOSEMDataType", iDParameter, nameParameter, ancestorTypeIDParameter, itemBitSizeParameter, itemCountParameter, dataOwnerIDParameter, standardParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="iD">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public int DeleteDeviceOwner(Nullable<global::System.Int64> iD, Nullable<global::System.Guid> dataOwnerID)
        {
            ObjectParameter iDParameter;
            if (iD.HasValue)
            {
                iDParameter = new ObjectParameter("ID", iD);
            }
            else
            {
                iDParameter = new ObjectParameter("ID", typeof(global::System.Int64));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction("DeleteDeviceOwner", iDParameter, dataOwnerIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="iD">Нет доступной документации по метаданным.</param>
        /// <param name="firstName">Нет доступной документации по метаданным.</param>
        /// <param name="lastName">Нет доступной документации по метаданным.</param>
        /// <param name="company">Нет доступной документации по метаданным.</param>
        /// <param name="apartament">Нет доступной документации по метаданным.</param>
        /// <param name="building">Нет доступной документации по метаданным.</param>
        /// <param name="street">Нет доступной документации по метаданным.</param>
        /// <param name="city">Нет доступной документации по метаданным.</param>
        /// <param name="state">Нет доступной документации по метаданным.</param>
        /// <param name="country">Нет доступной документации по метаданным.</param>
        /// <param name="zipCode">Нет доступной документации по метаданным.</param>
        /// <param name="eMail">Нет доступной документации по метаданным.</param>
        /// <param name="phone">Нет доступной документации по метаданным.</param>
        /// <param name="cell">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public int UpdateDeviceOwner(Nullable<global::System.Int64> iD, global::System.String firstName, global::System.String lastName, global::System.String company, global::System.String apartament, global::System.String building, global::System.String street, global::System.String city, global::System.String state, global::System.String country, global::System.String zipCode, global::System.String eMail, global::System.String phone, global::System.String cell, Nullable<global::System.Guid> dataOwnerID)
        {
            ObjectParameter iDParameter;
            if (iD.HasValue)
            {
                iDParameter = new ObjectParameter("ID", iD);
            }
            else
            {
                iDParameter = new ObjectParameter("ID", typeof(global::System.Int64));
            }
    
            ObjectParameter firstNameParameter;
            if (firstName != null)
            {
                firstNameParameter = new ObjectParameter("FirstName", firstName);
            }
            else
            {
                firstNameParameter = new ObjectParameter("FirstName", typeof(global::System.String));
            }
    
            ObjectParameter lastNameParameter;
            if (lastName != null)
            {
                lastNameParameter = new ObjectParameter("LastName", lastName);
            }
            else
            {
                lastNameParameter = new ObjectParameter("LastName", typeof(global::System.String));
            }
    
            ObjectParameter companyParameter;
            if (company != null)
            {
                companyParameter = new ObjectParameter("Company", company);
            }
            else
            {
                companyParameter = new ObjectParameter("Company", typeof(global::System.String));
            }
    
            ObjectParameter apartamentParameter;
            if (apartament != null)
            {
                apartamentParameter = new ObjectParameter("Apartament", apartament);
            }
            else
            {
                apartamentParameter = new ObjectParameter("Apartament", typeof(global::System.String));
            }
    
            ObjectParameter buildingParameter;
            if (building != null)
            {
                buildingParameter = new ObjectParameter("Building", building);
            }
            else
            {
                buildingParameter = new ObjectParameter("Building", typeof(global::System.String));
            }
    
            ObjectParameter streetParameter;
            if (street != null)
            {
                streetParameter = new ObjectParameter("Street", street);
            }
            else
            {
                streetParameter = new ObjectParameter("Street", typeof(global::System.String));
            }
    
            ObjectParameter cityParameter;
            if (city != null)
            {
                cityParameter = new ObjectParameter("City", city);
            }
            else
            {
                cityParameter = new ObjectParameter("City", typeof(global::System.String));
            }
    
            ObjectParameter stateParameter;
            if (state != null)
            {
                stateParameter = new ObjectParameter("State", state);
            }
            else
            {
                stateParameter = new ObjectParameter("State", typeof(global::System.String));
            }
    
            ObjectParameter countryParameter;
            if (country != null)
            {
                countryParameter = new ObjectParameter("Country", country);
            }
            else
            {
                countryParameter = new ObjectParameter("Country", typeof(global::System.String));
            }
    
            ObjectParameter zipCodeParameter;
            if (zipCode != null)
            {
                zipCodeParameter = new ObjectParameter("ZipCode", zipCode);
            }
            else
            {
                zipCodeParameter = new ObjectParameter("ZipCode", typeof(global::System.String));
            }
    
            ObjectParameter eMailParameter;
            if (eMail != null)
            {
                eMailParameter = new ObjectParameter("EMail", eMail);
            }
            else
            {
                eMailParameter = new ObjectParameter("EMail", typeof(global::System.String));
            }
    
            ObjectParameter phoneParameter;
            if (phone != null)
            {
                phoneParameter = new ObjectParameter("Phone", phone);
            }
            else
            {
                phoneParameter = new ObjectParameter("Phone", typeof(global::System.String));
            }
    
            ObjectParameter cellParameter;
            if (cell != null)
            {
                cellParameter = new ObjectParameter("Cell", cell);
            }
            else
            {
                cellParameter = new ObjectParameter("Cell", typeof(global::System.String));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction("UpdateDeviceOwner", iDParameter, firstNameParameter, lastNameParameter, companyParameter, apartamentParameter, buildingParameter, streetParameter, cityParameter, stateParameter, countryParameter, zipCodeParameter, eMailParameter, phoneParameter, cellParameter, dataOwnerIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="cOSEMClassID">Нет доступной документации по метаданным.</param>
        /// <param name="name">Нет доступной документации по метаданным.</param>
        /// <param name="mandatory">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public int AddCOSEMMethod(Nullable<global::System.Int64> cOSEMClassID, global::System.String name, Nullable<global::System.Boolean> mandatory, Nullable<global::System.Guid> dataOwnerID)
        {
            ObjectParameter cOSEMClassIDParameter;
            if (cOSEMClassID.HasValue)
            {
                cOSEMClassIDParameter = new ObjectParameter("COSEMClassID", cOSEMClassID);
            }
            else
            {
                cOSEMClassIDParameter = new ObjectParameter("COSEMClassID", typeof(global::System.Int64));
            }
    
            ObjectParameter nameParameter;
            if (name != null)
            {
                nameParameter = new ObjectParameter("Name", name);
            }
            else
            {
                nameParameter = new ObjectParameter("Name", typeof(global::System.String));
            }
    
            ObjectParameter mandatoryParameter;
            if (mandatory.HasValue)
            {
                mandatoryParameter = new ObjectParameter("Mandatory", mandatory);
            }
            else
            {
                mandatoryParameter = new ObjectParameter("Mandatory", typeof(global::System.Boolean));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction("AddCOSEMMethod", cOSEMClassIDParameter, nameParameter, mandatoryParameter, dataOwnerIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="iD">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public int DeleteCOSEMMethod(Nullable<global::System.Int64> iD, Nullable<global::System.Guid> dataOwnerID)
        {
            ObjectParameter iDParameter;
            if (iD.HasValue)
            {
                iDParameter = new ObjectParameter("ID", iD);
            }
            else
            {
                iDParameter = new ObjectParameter("ID", typeof(global::System.Int64));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction("DeleteCOSEMMethod", iDParameter, dataOwnerIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="iD">Нет доступной документации по метаданным.</param>
        /// <param name="cOSEMClassID">Нет доступной документации по метаданным.</param>
        /// <param name="name">Нет доступной документации по метаданным.</param>
        /// <param name="mandatory">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public int UpdateCOSEMMethod(Nullable<global::System.Int64> iD, Nullable<global::System.Int64> cOSEMClassID, global::System.String name, Nullable<global::System.Boolean> mandatory, Nullable<global::System.Guid> dataOwnerID)
        {
            ObjectParameter iDParameter;
            if (iD.HasValue)
            {
                iDParameter = new ObjectParameter("ID", iD);
            }
            else
            {
                iDParameter = new ObjectParameter("ID", typeof(global::System.Int64));
            }
    
            ObjectParameter cOSEMClassIDParameter;
            if (cOSEMClassID.HasValue)
            {
                cOSEMClassIDParameter = new ObjectParameter("COSEMClassID", cOSEMClassID);
            }
            else
            {
                cOSEMClassIDParameter = new ObjectParameter("COSEMClassID", typeof(global::System.Int64));
            }
    
            ObjectParameter nameParameter;
            if (name != null)
            {
                nameParameter = new ObjectParameter("Name", name);
            }
            else
            {
                nameParameter = new ObjectParameter("Name", typeof(global::System.String));
            }
    
            ObjectParameter mandatoryParameter;
            if (mandatory.HasValue)
            {
                mandatoryParameter = new ObjectParameter("Mandatory", mandatory);
            }
            else
            {
                mandatoryParameter = new ObjectParameter("Mandatory", typeof(global::System.Boolean));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction("UpdateCOSEMMethod", iDParameter, cOSEMClassIDParameter, nameParameter, mandatoryParameter, dataOwnerIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="name">Нет доступной документации по метаданным.</param>
        /// <param name="aggregateTypeID">Нет доступной документации по метаданным.</param>
        /// <param name="typeID">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        /// <param name="standard">Нет доступной документации по метаданным.</param>
        public int AddCOSEMComplexTypeField(global::System.String name, Nullable<global::System.Int64> aggregateTypeID, Nullable<global::System.Int64> typeID, Nullable<global::System.Guid> dataOwnerID, Nullable<global::System.Boolean> standard)
        {
            ObjectParameter nameParameter;
            if (name != null)
            {
                nameParameter = new ObjectParameter("Name", name);
            }
            else
            {
                nameParameter = new ObjectParameter("Name", typeof(global::System.String));
            }
    
            ObjectParameter aggregateTypeIDParameter;
            if (aggregateTypeID.HasValue)
            {
                aggregateTypeIDParameter = new ObjectParameter("AggregateTypeID", aggregateTypeID);
            }
            else
            {
                aggregateTypeIDParameter = new ObjectParameter("AggregateTypeID", typeof(global::System.Int64));
            }
    
            ObjectParameter typeIDParameter;
            if (typeID.HasValue)
            {
                typeIDParameter = new ObjectParameter("TypeID", typeID);
            }
            else
            {
                typeIDParameter = new ObjectParameter("TypeID", typeof(global::System.Int64));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            ObjectParameter standardParameter;
            if (standard.HasValue)
            {
                standardParameter = new ObjectParameter("Standard", standard);
            }
            else
            {
                standardParameter = new ObjectParameter("Standard", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction("AddCOSEMComplexTypeField", nameParameter, aggregateTypeIDParameter, typeIDParameter, dataOwnerIDParameter, standardParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="iD">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public int DeleteCOSEMComplexTypeField(Nullable<global::System.Int64> iD, Nullable<global::System.Guid> dataOwnerID)
        {
            ObjectParameter iDParameter;
            if (iD.HasValue)
            {
                iDParameter = new ObjectParameter("ID", iD);
            }
            else
            {
                iDParameter = new ObjectParameter("ID", typeof(global::System.Int64));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction("DeleteCOSEMComplexTypeField", iDParameter, dataOwnerIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="iD">Нет доступной документации по метаданным.</param>
        /// <param name="name">Нет доступной документации по метаданным.</param>
        /// <param name="aggregateTypeID">Нет доступной документации по метаданным.</param>
        /// <param name="typeID">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        /// <param name="standard">Нет доступной документации по метаданным.</param>
        public int UpdateCOSEMComplexTypeField(Nullable<global::System.Int64> iD, global::System.String name, Nullable<global::System.Int64> aggregateTypeID, Nullable<global::System.Int64> typeID, Nullable<global::System.Guid> dataOwnerID, Nullable<global::System.Boolean> standard)
        {
            ObjectParameter iDParameter;
            if (iD.HasValue)
            {
                iDParameter = new ObjectParameter("ID", iD);
            }
            else
            {
                iDParameter = new ObjectParameter("ID", typeof(global::System.Int64));
            }
    
            ObjectParameter nameParameter;
            if (name != null)
            {
                nameParameter = new ObjectParameter("Name", name);
            }
            else
            {
                nameParameter = new ObjectParameter("Name", typeof(global::System.String));
            }
    
            ObjectParameter aggregateTypeIDParameter;
            if (aggregateTypeID.HasValue)
            {
                aggregateTypeIDParameter = new ObjectParameter("AggregateTypeID", aggregateTypeID);
            }
            else
            {
                aggregateTypeIDParameter = new ObjectParameter("AggregateTypeID", typeof(global::System.Int64));
            }
    
            ObjectParameter typeIDParameter;
            if (typeID.HasValue)
            {
                typeIDParameter = new ObjectParameter("TypeID", typeID);
            }
            else
            {
                typeIDParameter = new ObjectParameter("TypeID", typeof(global::System.Int64));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            ObjectParameter standardParameter;
            if (standard.HasValue)
            {
                standardParameter = new ObjectParameter("Standard", standard);
            }
            else
            {
                standardParameter = new ObjectParameter("Standard", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction("UpdateCOSEMComplexTypeField", iDParameter, nameParameter, aggregateTypeIDParameter, typeIDParameter, dataOwnerIDParameter, standardParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="deviceTypeID">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        /// <param name="name">Нет доступной документации по метаданным.</param>
        public int AddCOSEMLogicalDevice(Nullable<global::System.Int64> deviceTypeID, Nullable<global::System.Guid> dataOwnerID, global::System.String name)
        {
            ObjectParameter deviceTypeIDParameter;
            if (deviceTypeID.HasValue)
            {
                deviceTypeIDParameter = new ObjectParameter("DeviceTypeID", deviceTypeID);
            }
            else
            {
                deviceTypeIDParameter = new ObjectParameter("DeviceTypeID", typeof(global::System.Int64));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            ObjectParameter nameParameter;
            if (name != null)
            {
                nameParameter = new ObjectParameter("Name", name);
            }
            else
            {
                nameParameter = new ObjectParameter("Name", typeof(global::System.String));
            }
    
            return base.ExecuteFunction("AddCOSEMLogicalDevice", deviceTypeIDParameter, dataOwnerIDParameter, nameParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="iD">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public int DeleteCOSEMLogicalDevice(Nullable<global::System.Int64> iD, Nullable<global::System.Guid> dataOwnerID)
        {
            ObjectParameter iDParameter;
            if (iD.HasValue)
            {
                iDParameter = new ObjectParameter("ID", iD);
            }
            else
            {
                iDParameter = new ObjectParameter("ID", typeof(global::System.Int64));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction("DeleteCOSEMLogicalDevice", iDParameter, dataOwnerIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="iD">Нет доступной документации по метаданным.</param>
        /// <param name="deviceTypeID">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        /// <param name="name">Нет доступной документации по метаданным.</param>
        public int UpdateCOSEMLogicalDevice(Nullable<global::System.Int64> iD, Nullable<global::System.Int64> deviceTypeID, Nullable<global::System.Guid> dataOwnerID, global::System.String name)
        {
            ObjectParameter iDParameter;
            if (iD.HasValue)
            {
                iDParameter = new ObjectParameter("ID", iD);
            }
            else
            {
                iDParameter = new ObjectParameter("ID", typeof(global::System.Int64));
            }
    
            ObjectParameter deviceTypeIDParameter;
            if (deviceTypeID.HasValue)
            {
                deviceTypeIDParameter = new ObjectParameter("DeviceTypeID", deviceTypeID);
            }
            else
            {
                deviceTypeIDParameter = new ObjectParameter("DeviceTypeID", typeof(global::System.Int64));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            ObjectParameter nameParameter;
            if (name != null)
            {
                nameParameter = new ObjectParameter("Name", name);
            }
            else
            {
                nameParameter = new ObjectParameter("Name", typeof(global::System.String));
            }
    
            return base.ExecuteFunction("UpdateCOSEMLogicalDevice", iDParameter, deviceTypeIDParameter, dataOwnerIDParameter, nameParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="cOSEMLogicalDeviceID">Нет доступной документации по метаданным.</param>
        /// <param name="cOSEMClassID">Нет доступной документации по метаданным.</param>
        /// <param name="deviceTypeID">Нет доступной документации по метаданным.</param>
        /// <param name="cOSEMLogicalName">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public int AddCOSEMObject(Nullable<global::System.Int64> cOSEMLogicalDeviceID, Nullable<global::System.Int64> cOSEMClassID, Nullable<global::System.Int64> deviceTypeID, global::System.String cOSEMLogicalName, Nullable<global::System.Guid> dataOwnerID)
        {
            ObjectParameter cOSEMLogicalDeviceIDParameter;
            if (cOSEMLogicalDeviceID.HasValue)
            {
                cOSEMLogicalDeviceIDParameter = new ObjectParameter("COSEMLogicalDeviceID", cOSEMLogicalDeviceID);
            }
            else
            {
                cOSEMLogicalDeviceIDParameter = new ObjectParameter("COSEMLogicalDeviceID", typeof(global::System.Int64));
            }
    
            ObjectParameter cOSEMClassIDParameter;
            if (cOSEMClassID.HasValue)
            {
                cOSEMClassIDParameter = new ObjectParameter("COSEMClassID", cOSEMClassID);
            }
            else
            {
                cOSEMClassIDParameter = new ObjectParameter("COSEMClassID", typeof(global::System.Int64));
            }
    
            ObjectParameter deviceTypeIDParameter;
            if (deviceTypeID.HasValue)
            {
                deviceTypeIDParameter = new ObjectParameter("DeviceTypeID", deviceTypeID);
            }
            else
            {
                deviceTypeIDParameter = new ObjectParameter("DeviceTypeID", typeof(global::System.Int64));
            }
    
            ObjectParameter cOSEMLogicalNameParameter;
            if (cOSEMLogicalName != null)
            {
                cOSEMLogicalNameParameter = new ObjectParameter("COSEMLogicalName", cOSEMLogicalName);
            }
            else
            {
                cOSEMLogicalNameParameter = new ObjectParameter("COSEMLogicalName", typeof(global::System.String));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction("AddCOSEMObject", cOSEMLogicalDeviceIDParameter, cOSEMClassIDParameter, deviceTypeIDParameter, cOSEMLogicalNameParameter, dataOwnerIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="iD">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public int DeleteCOSEMObject(Nullable<global::System.Int64> iD, Nullable<global::System.Guid> dataOwnerID)
        {
            ObjectParameter iDParameter;
            if (iD.HasValue)
            {
                iDParameter = new ObjectParameter("ID", iD);
            }
            else
            {
                iDParameter = new ObjectParameter("ID", typeof(global::System.Int64));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction("DeleteCOSEMObject", iDParameter, dataOwnerIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="iD">Нет доступной документации по метаданным.</param>
        /// <param name="cOSEMLogicalDeviceID">Нет доступной документации по метаданным.</param>
        /// <param name="cOSEMClassID">Нет доступной документации по метаданным.</param>
        /// <param name="deviceTypeID">Нет доступной документации по метаданным.</param>
        /// <param name="cOSEMLogicalName">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public int UpdateCOSEMObject(Nullable<global::System.Int64> iD, Nullable<global::System.Int64> cOSEMLogicalDeviceID, Nullable<global::System.Int64> cOSEMClassID, Nullable<global::System.Int64> deviceTypeID, global::System.String cOSEMLogicalName, Nullable<global::System.Guid> dataOwnerID)
        {
            ObjectParameter iDParameter;
            if (iD.HasValue)
            {
                iDParameter = new ObjectParameter("ID", iD);
            }
            else
            {
                iDParameter = new ObjectParameter("ID", typeof(global::System.Int64));
            }
    
            ObjectParameter cOSEMLogicalDeviceIDParameter;
            if (cOSEMLogicalDeviceID.HasValue)
            {
                cOSEMLogicalDeviceIDParameter = new ObjectParameter("COSEMLogicalDeviceID", cOSEMLogicalDeviceID);
            }
            else
            {
                cOSEMLogicalDeviceIDParameter = new ObjectParameter("COSEMLogicalDeviceID", typeof(global::System.Int64));
            }
    
            ObjectParameter cOSEMClassIDParameter;
            if (cOSEMClassID.HasValue)
            {
                cOSEMClassIDParameter = new ObjectParameter("COSEMClassID", cOSEMClassID);
            }
            else
            {
                cOSEMClassIDParameter = new ObjectParameter("COSEMClassID", typeof(global::System.Int64));
            }
    
            ObjectParameter deviceTypeIDParameter;
            if (deviceTypeID.HasValue)
            {
                deviceTypeIDParameter = new ObjectParameter("DeviceTypeID", deviceTypeID);
            }
            else
            {
                deviceTypeIDParameter = new ObjectParameter("DeviceTypeID", typeof(global::System.Int64));
            }
    
            ObjectParameter cOSEMLogicalNameParameter;
            if (cOSEMLogicalName != null)
            {
                cOSEMLogicalNameParameter = new ObjectParameter("COSEMLogicalName", cOSEMLogicalName);
            }
            else
            {
                cOSEMLogicalNameParameter = new ObjectParameter("COSEMLogicalName", typeof(global::System.String));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction("UpdateCOSEMObject", iDParameter, cOSEMLogicalDeviceIDParameter, cOSEMClassIDParameter, deviceTypeIDParameter, cOSEMLogicalNameParameter, dataOwnerIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="identifier">Нет доступной документации по метаданным.</param>
        /// <param name="cOSEMAttributeID">Нет доступной документации по метаданным.</param>
        /// <param name="cOSEMObjectID">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public int UpdateAttrIdentifier(global::System.String identifier, Nullable<global::System.Int64> cOSEMAttributeID, Nullable<global::System.Int64> cOSEMObjectID, Nullable<global::System.Guid> dataOwnerID)
        {
            ObjectParameter identifierParameter;
            if (identifier != null)
            {
                identifierParameter = new ObjectParameter("Identifier", identifier);
            }
            else
            {
                identifierParameter = new ObjectParameter("Identifier", typeof(global::System.String));
            }
    
            ObjectParameter cOSEMAttributeIDParameter;
            if (cOSEMAttributeID.HasValue)
            {
                cOSEMAttributeIDParameter = new ObjectParameter("COSEMAttributeID", cOSEMAttributeID);
            }
            else
            {
                cOSEMAttributeIDParameter = new ObjectParameter("COSEMAttributeID", typeof(global::System.Int64));
            }
    
            ObjectParameter cOSEMObjectIDParameter;
            if (cOSEMObjectID.HasValue)
            {
                cOSEMObjectIDParameter = new ObjectParameter("COSEMObjectID", cOSEMObjectID);
            }
            else
            {
                cOSEMObjectIDParameter = new ObjectParameter("COSEMObjectID", typeof(global::System.Int64));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction("UpdateAttrIdentifier", identifierParameter, cOSEMAttributeIDParameter, cOSEMObjectIDParameter, dataOwnerIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="aID">Нет доступной документации по метаданным.</param>
        /// <param name="bID">Нет доступной документации по метаданным.</param>
        /// <param name="cID">Нет доступной документации по метаданным.</param>
        /// <param name="dID">Нет доступной документации по метаданным.</param>
        /// <param name="eID">Нет доступной документации по метаданным.</param>
        /// <param name="fID">Нет доступной документации по метаданным.</param>
        /// <param name="deviceTypeID">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        /// <param name="standard">Нет доступной документации по метаданным.</param>
        public int AddOBISSet(Nullable<global::System.Int64> aID, Nullable<global::System.Int64> bID, Nullable<global::System.Int64> cID, Nullable<global::System.Int64> dID, Nullable<global::System.Int64> eID, Nullable<global::System.Int64> fID, Nullable<global::System.Int64> deviceTypeID, Nullable<global::System.Guid> dataOwnerID, Nullable<global::System.Boolean> standard)
        {
            ObjectParameter aIDParameter;
            if (aID.HasValue)
            {
                aIDParameter = new ObjectParameter("AID", aID);
            }
            else
            {
                aIDParameter = new ObjectParameter("AID", typeof(global::System.Int64));
            }
    
            ObjectParameter bIDParameter;
            if (bID.HasValue)
            {
                bIDParameter = new ObjectParameter("BID", bID);
            }
            else
            {
                bIDParameter = new ObjectParameter("BID", typeof(global::System.Int64));
            }
    
            ObjectParameter cIDParameter;
            if (cID.HasValue)
            {
                cIDParameter = new ObjectParameter("CID", cID);
            }
            else
            {
                cIDParameter = new ObjectParameter("CID", typeof(global::System.Int64));
            }
    
            ObjectParameter dIDParameter;
            if (dID.HasValue)
            {
                dIDParameter = new ObjectParameter("DID", dID);
            }
            else
            {
                dIDParameter = new ObjectParameter("DID", typeof(global::System.Int64));
            }
    
            ObjectParameter eIDParameter;
            if (eID.HasValue)
            {
                eIDParameter = new ObjectParameter("EID", eID);
            }
            else
            {
                eIDParameter = new ObjectParameter("EID", typeof(global::System.Int64));
            }
    
            ObjectParameter fIDParameter;
            if (fID.HasValue)
            {
                fIDParameter = new ObjectParameter("FID", fID);
            }
            else
            {
                fIDParameter = new ObjectParameter("FID", typeof(global::System.Int64));
            }
    
            ObjectParameter deviceTypeIDParameter;
            if (deviceTypeID.HasValue)
            {
                deviceTypeIDParameter = new ObjectParameter("DeviceTypeID", deviceTypeID);
            }
            else
            {
                deviceTypeIDParameter = new ObjectParameter("DeviceTypeID", typeof(global::System.Int64));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            ObjectParameter standardParameter;
            if (standard.HasValue)
            {
                standardParameter = new ObjectParameter("Standard", standard);
            }
            else
            {
                standardParameter = new ObjectParameter("Standard", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction("AddOBISSet", aIDParameter, bIDParameter, cIDParameter, dIDParameter, eIDParameter, fIDParameter, deviceTypeIDParameter, dataOwnerIDParameter, standardParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="iD">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public int DeleteOBISSet(Nullable<global::System.Int64> iD, Nullable<global::System.Guid> dataOwnerID)
        {
            ObjectParameter iDParameter;
            if (iD.HasValue)
            {
                iDParameter = new ObjectParameter("ID", iD);
            }
            else
            {
                iDParameter = new ObjectParameter("ID", typeof(global::System.Int64));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction("DeleteOBISSet", iDParameter, dataOwnerIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="iD">Нет доступной документации по метаданным.</param>
        /// <param name="aID">Нет доступной документации по метаданным.</param>
        /// <param name="bID">Нет доступной документации по метаданным.</param>
        /// <param name="cID">Нет доступной документации по метаданным.</param>
        /// <param name="dID">Нет доступной документации по метаданным.</param>
        /// <param name="eID">Нет доступной документации по метаданным.</param>
        /// <param name="fID">Нет доступной документации по метаданным.</param>
        /// <param name="deviceTypeID">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        /// <param name="standard">Нет доступной документации по метаданным.</param>
        public int UpdateOBISSet(Nullable<global::System.Int64> iD, Nullable<global::System.Int64> aID, Nullable<global::System.Int64> bID, Nullable<global::System.Int64> cID, Nullable<global::System.Int64> dID, Nullable<global::System.Int64> eID, Nullable<global::System.Int64> fID, Nullable<global::System.Int64> deviceTypeID, Nullable<global::System.Guid> dataOwnerID, Nullable<global::System.Boolean> standard)
        {
            ObjectParameter iDParameter;
            if (iD.HasValue)
            {
                iDParameter = new ObjectParameter("ID", iD);
            }
            else
            {
                iDParameter = new ObjectParameter("ID", typeof(global::System.Int64));
            }
    
            ObjectParameter aIDParameter;
            if (aID.HasValue)
            {
                aIDParameter = new ObjectParameter("AID", aID);
            }
            else
            {
                aIDParameter = new ObjectParameter("AID", typeof(global::System.Int64));
            }
    
            ObjectParameter bIDParameter;
            if (bID.HasValue)
            {
                bIDParameter = new ObjectParameter("BID", bID);
            }
            else
            {
                bIDParameter = new ObjectParameter("BID", typeof(global::System.Int64));
            }
    
            ObjectParameter cIDParameter;
            if (cID.HasValue)
            {
                cIDParameter = new ObjectParameter("CID", cID);
            }
            else
            {
                cIDParameter = new ObjectParameter("CID", typeof(global::System.Int64));
            }
    
            ObjectParameter dIDParameter;
            if (dID.HasValue)
            {
                dIDParameter = new ObjectParameter("DID", dID);
            }
            else
            {
                dIDParameter = new ObjectParameter("DID", typeof(global::System.Int64));
            }
    
            ObjectParameter eIDParameter;
            if (eID.HasValue)
            {
                eIDParameter = new ObjectParameter("EID", eID);
            }
            else
            {
                eIDParameter = new ObjectParameter("EID", typeof(global::System.Int64));
            }
    
            ObjectParameter fIDParameter;
            if (fID.HasValue)
            {
                fIDParameter = new ObjectParameter("FID", fID);
            }
            else
            {
                fIDParameter = new ObjectParameter("FID", typeof(global::System.Int64));
            }
    
            ObjectParameter deviceTypeIDParameter;
            if (deviceTypeID.HasValue)
            {
                deviceTypeIDParameter = new ObjectParameter("DeviceTypeID", deviceTypeID);
            }
            else
            {
                deviceTypeIDParameter = new ObjectParameter("DeviceTypeID", typeof(global::System.Int64));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            ObjectParameter standardParameter;
            if (standard.HasValue)
            {
                standardParameter = new ObjectParameter("Standard", standard);
            }
            else
            {
                standardParameter = new ObjectParameter("Standard", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction("UpdateOBISSet", iDParameter, aIDParameter, bIDParameter, cIDParameter, dIDParameter, eIDParameter, fIDParameter, deviceTypeIDParameter, dataOwnerIDParameter, standardParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="type">Нет доступной документации по метаданным.</param>
        /// <param name="value">Нет доступной документации по метаданным.</param>
        /// <param name="description">Нет доступной документации по метаданным.</param>
        /// <param name="standard">Нет доступной документации по метаданным.</param>
        /// <param name="reserved">Нет доступной документации по метаданным.</param>
        /// <param name="unusable">Нет доступной документации по метаданным.</param>
        /// <param name="context">Нет доступной документации по метаданным.</param>
        /// <param name="deviceTypeID">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public int AddOBISGroup(global::System.String type, Nullable<global::System.Byte> value, global::System.String description, Nullable<global::System.Boolean> standard, Nullable<global::System.Boolean> reserved, Nullable<global::System.Boolean> unusable, Nullable<global::System.Boolean> context, Nullable<global::System.Int64> deviceTypeID, Nullable<global::System.Guid> dataOwnerID)
        {
            ObjectParameter typeParameter;
            if (type != null)
            {
                typeParameter = new ObjectParameter("Type", type);
            }
            else
            {
                typeParameter = new ObjectParameter("Type", typeof(global::System.String));
            }
    
            ObjectParameter valueParameter;
            if (value.HasValue)
            {
                valueParameter = new ObjectParameter("Value", value);
            }
            else
            {
                valueParameter = new ObjectParameter("Value", typeof(global::System.Byte));
            }
    
            ObjectParameter descriptionParameter;
            if (description != null)
            {
                descriptionParameter = new ObjectParameter("Description", description);
            }
            else
            {
                descriptionParameter = new ObjectParameter("Description", typeof(global::System.String));
            }
    
            ObjectParameter standardParameter;
            if (standard.HasValue)
            {
                standardParameter = new ObjectParameter("Standard", standard);
            }
            else
            {
                standardParameter = new ObjectParameter("Standard", typeof(global::System.Boolean));
            }
    
            ObjectParameter reservedParameter;
            if (reserved.HasValue)
            {
                reservedParameter = new ObjectParameter("Reserved", reserved);
            }
            else
            {
                reservedParameter = new ObjectParameter("Reserved", typeof(global::System.Boolean));
            }
    
            ObjectParameter unusableParameter;
            if (unusable.HasValue)
            {
                unusableParameter = new ObjectParameter("Unusable", unusable);
            }
            else
            {
                unusableParameter = new ObjectParameter("Unusable", typeof(global::System.Boolean));
            }
    
            ObjectParameter contextParameter;
            if (context.HasValue)
            {
                contextParameter = new ObjectParameter("Context", context);
            }
            else
            {
                contextParameter = new ObjectParameter("Context", typeof(global::System.Boolean));
            }
    
            ObjectParameter deviceTypeIDParameter;
            if (deviceTypeID.HasValue)
            {
                deviceTypeIDParameter = new ObjectParameter("DeviceTypeID", deviceTypeID);
            }
            else
            {
                deviceTypeIDParameter = new ObjectParameter("DeviceTypeID", typeof(global::System.Int64));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction("AddOBISGroup", typeParameter, valueParameter, descriptionParameter, standardParameter, reservedParameter, unusableParameter, contextParameter, deviceTypeIDParameter, dataOwnerIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="oBISGroupID">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public int DeleteOBISGroup(Nullable<global::System.Int64> oBISGroupID, Nullable<global::System.Guid> dataOwnerID)
        {
            ObjectParameter oBISGroupIDParameter;
            if (oBISGroupID.HasValue)
            {
                oBISGroupIDParameter = new ObjectParameter("OBISGroupID", oBISGroupID);
            }
            else
            {
                oBISGroupIDParameter = new ObjectParameter("OBISGroupID", typeof(global::System.Int64));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction("DeleteOBISGroup", oBISGroupIDParameter, dataOwnerIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="iD">Нет доступной документации по метаданным.</param>
        /// <param name="type">Нет доступной документации по метаданным.</param>
        /// <param name="value">Нет доступной документации по метаданным.</param>
        /// <param name="description">Нет доступной документации по метаданным.</param>
        /// <param name="standard">Нет доступной документации по метаданным.</param>
        /// <param name="reserved">Нет доступной документации по метаданным.</param>
        /// <param name="unusable">Нет доступной документации по метаданным.</param>
        /// <param name="context">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public int UpdateOBISGroup(Nullable<global::System.Int64> iD, global::System.String type, Nullable<global::System.Byte> value, global::System.String description, Nullable<global::System.Boolean> standard, Nullable<global::System.Boolean> reserved, Nullable<global::System.Boolean> unusable, Nullable<global::System.Boolean> context, Nullable<global::System.Guid> dataOwnerID)
        {
            ObjectParameter iDParameter;
            if (iD.HasValue)
            {
                iDParameter = new ObjectParameter("ID", iD);
            }
            else
            {
                iDParameter = new ObjectParameter("ID", typeof(global::System.Int64));
            }
    
            ObjectParameter typeParameter;
            if (type != null)
            {
                typeParameter = new ObjectParameter("Type", type);
            }
            else
            {
                typeParameter = new ObjectParameter("Type", typeof(global::System.String));
            }
    
            ObjectParameter valueParameter;
            if (value.HasValue)
            {
                valueParameter = new ObjectParameter("Value", value);
            }
            else
            {
                valueParameter = new ObjectParameter("Value", typeof(global::System.Byte));
            }
    
            ObjectParameter descriptionParameter;
            if (description != null)
            {
                descriptionParameter = new ObjectParameter("Description", description);
            }
            else
            {
                descriptionParameter = new ObjectParameter("Description", typeof(global::System.String));
            }
    
            ObjectParameter standardParameter;
            if (standard.HasValue)
            {
                standardParameter = new ObjectParameter("Standard", standard);
            }
            else
            {
                standardParameter = new ObjectParameter("Standard", typeof(global::System.Boolean));
            }
    
            ObjectParameter reservedParameter;
            if (reserved.HasValue)
            {
                reservedParameter = new ObjectParameter("Reserved", reserved);
            }
            else
            {
                reservedParameter = new ObjectParameter("Reserved", typeof(global::System.Boolean));
            }
    
            ObjectParameter unusableParameter;
            if (unusable.HasValue)
            {
                unusableParameter = new ObjectParameter("Unusable", unusable);
            }
            else
            {
                unusableParameter = new ObjectParameter("Unusable", typeof(global::System.Boolean));
            }
    
            ObjectParameter contextParameter;
            if (context.HasValue)
            {
                contextParameter = new ObjectParameter("Context", context);
            }
            else
            {
                contextParameter = new ObjectParameter("Context", typeof(global::System.Boolean));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction("UpdateOBISGroup", iDParameter, typeParameter, valueParameter, descriptionParameter, standardParameter, reservedParameter, unusableParameter, contextParameter, dataOwnerIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="deviceID">Нет доступной документации по метаданным.</param>
        /// <param name="cOSEMAttributeID">Нет доступной документации по метаданным.</param>
        /// <param name="cOSEMObjectID">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public int AddAttrToCollectList(Nullable<global::System.Int64> deviceID, Nullable<global::System.Int64> cOSEMAttributeID, Nullable<global::System.Int64> cOSEMObjectID, Nullable<global::System.Guid> dataOwnerID)
        {
            ObjectParameter deviceIDParameter;
            if (deviceID.HasValue)
            {
                deviceIDParameter = new ObjectParameter("DeviceID", deviceID);
            }
            else
            {
                deviceIDParameter = new ObjectParameter("DeviceID", typeof(global::System.Int64));
            }
    
            ObjectParameter cOSEMAttributeIDParameter;
            if (cOSEMAttributeID.HasValue)
            {
                cOSEMAttributeIDParameter = new ObjectParameter("COSEMAttributeID", cOSEMAttributeID);
            }
            else
            {
                cOSEMAttributeIDParameter = new ObjectParameter("COSEMAttributeID", typeof(global::System.Int64));
            }
    
            ObjectParameter cOSEMObjectIDParameter;
            if (cOSEMObjectID.HasValue)
            {
                cOSEMObjectIDParameter = new ObjectParameter("COSEMObjectID", cOSEMObjectID);
            }
            else
            {
                cOSEMObjectIDParameter = new ObjectParameter("COSEMObjectID", typeof(global::System.Int64));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction("AddAttrToCollectList", deviceIDParameter, cOSEMAttributeIDParameter, cOSEMObjectIDParameter, dataOwnerIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="cOSEMAttributeID">Нет доступной документации по метаданным.</param>
        /// <param name="cOSEMObjectID">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public int DeleteAttrFromCollectList(Nullable<global::System.Int64> cOSEMAttributeID, Nullable<global::System.Int64> cOSEMObjectID, Nullable<global::System.Guid> dataOwnerID)
        {
            ObjectParameter cOSEMAttributeIDParameter;
            if (cOSEMAttributeID.HasValue)
            {
                cOSEMAttributeIDParameter = new ObjectParameter("COSEMAttributeID", cOSEMAttributeID);
            }
            else
            {
                cOSEMAttributeIDParameter = new ObjectParameter("COSEMAttributeID", typeof(global::System.Int64));
            }
    
            ObjectParameter cOSEMObjectIDParameter;
            if (cOSEMObjectID.HasValue)
            {
                cOSEMObjectIDParameter = new ObjectParameter("COSEMObjectID", cOSEMObjectID);
            }
            else
            {
                cOSEMObjectIDParameter = new ObjectParameter("COSEMObjectID", typeof(global::System.Int64));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction("DeleteAttrFromCollectList", cOSEMAttributeIDParameter, cOSEMObjectIDParameter, dataOwnerIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="deviceID">Нет доступной документации по метаданным.</param>
        /// <param name="objectID">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public int AddAllAttrToCollectList(Nullable<global::System.Int64> deviceID, Nullable<global::System.Int64> objectID, Nullable<global::System.Guid> dataOwnerID)
        {
            ObjectParameter deviceIDParameter;
            if (deviceID.HasValue)
            {
                deviceIDParameter = new ObjectParameter("DeviceID", deviceID);
            }
            else
            {
                deviceIDParameter = new ObjectParameter("DeviceID", typeof(global::System.Int64));
            }
    
            ObjectParameter objectIDParameter;
            if (objectID.HasValue)
            {
                objectIDParameter = new ObjectParameter("ObjectID", objectID);
            }
            else
            {
                objectIDParameter = new ObjectParameter("ObjectID", typeof(global::System.Int64));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction("AddAllAttrToCollectList", deviceIDParameter, objectIDParameter, dataOwnerIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="deviceID">Нет доступной документации по метаданным.</param>
        /// <param name="objectID">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public int DeleteAllAttrFromCollectList(Nullable<global::System.Int64> deviceID, Nullable<global::System.Int64> objectID, Nullable<global::System.Guid> dataOwnerID)
        {
            ObjectParameter deviceIDParameter;
            if (deviceID.HasValue)
            {
                deviceIDParameter = new ObjectParameter("DeviceID", deviceID);
            }
            else
            {
                deviceIDParameter = new ObjectParameter("DeviceID", typeof(global::System.Int64));
            }
    
            ObjectParameter objectIDParameter;
            if (objectID.HasValue)
            {
                objectIDParameter = new ObjectParameter("ObjectID", objectID);
            }
            else
            {
                objectIDParameter = new ObjectParameter("ObjectID", typeof(global::System.Int64));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction("DeleteAllAttrFromCollectList", deviceIDParameter, objectIDParameter, dataOwnerIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="deviceID">Нет доступной документации по метаданным.</param>
        /// <param name="logicalDeviceID">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public int AddAllObjectAttrToCollectList(Nullable<global::System.Int64> deviceID, Nullable<global::System.Int64> logicalDeviceID, Nullable<global::System.Guid> dataOwnerID)
        {
            ObjectParameter deviceIDParameter;
            if (deviceID.HasValue)
            {
                deviceIDParameter = new ObjectParameter("DeviceID", deviceID);
            }
            else
            {
                deviceIDParameter = new ObjectParameter("DeviceID", typeof(global::System.Int64));
            }
    
            ObjectParameter logicalDeviceIDParameter;
            if (logicalDeviceID.HasValue)
            {
                logicalDeviceIDParameter = new ObjectParameter("LogicalDeviceID", logicalDeviceID);
            }
            else
            {
                logicalDeviceIDParameter = new ObjectParameter("LogicalDeviceID", typeof(global::System.Int64));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction("AddAllObjectAttrToCollectList", deviceIDParameter, logicalDeviceIDParameter, dataOwnerIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="deviceID">Нет доступной документации по метаданным.</param>
        /// <param name="logicalDeviceID">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public int DeleteAllObjectAttrFromCollectList(Nullable<global::System.Int64> deviceID, Nullable<global::System.Int64> logicalDeviceID, Nullable<global::System.Guid> dataOwnerID)
        {
            ObjectParameter deviceIDParameter;
            if (deviceID.HasValue)
            {
                deviceIDParameter = new ObjectParameter("DeviceID", deviceID);
            }
            else
            {
                deviceIDParameter = new ObjectParameter("DeviceID", typeof(global::System.Int64));
            }
    
            ObjectParameter logicalDeviceIDParameter;
            if (logicalDeviceID.HasValue)
            {
                logicalDeviceIDParameter = new ObjectParameter("LogicalDeviceID", logicalDeviceID);
            }
            else
            {
                logicalDeviceIDParameter = new ObjectParameter("LogicalDeviceID", typeof(global::System.Int64));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction("DeleteAllObjectAttrFromCollectList", deviceIDParameter, logicalDeviceIDParameter, dataOwnerIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="deviceID">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public int AddAllDeviceAttrToCollectList(Nullable<global::System.Int64> deviceID, Nullable<global::System.Guid> dataOwnerID)
        {
            ObjectParameter deviceIDParameter;
            if (deviceID.HasValue)
            {
                deviceIDParameter = new ObjectParameter("DeviceID", deviceID);
            }
            else
            {
                deviceIDParameter = new ObjectParameter("DeviceID", typeof(global::System.Int64));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction("AddAllDeviceAttrToCollectList", deviceIDParameter, dataOwnerIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="deviceID">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public int DeleteAllDeviceAttrFromCollectList(Nullable<global::System.Int64> deviceID, Nullable<global::System.Guid> dataOwnerID)
        {
            ObjectParameter deviceIDParameter;
            if (deviceID.HasValue)
            {
                deviceIDParameter = new ObjectParameter("DeviceID", deviceID);
            }
            else
            {
                deviceIDParameter = new ObjectParameter("DeviceID", typeof(global::System.Int64));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction("DeleteAllDeviceAttrFromCollectList", deviceIDParameter, dataOwnerIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="addressID">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public int DeleteAddress(Nullable<global::System.Int64> addressID, Nullable<global::System.Guid> dataOwnerID)
        {
            ObjectParameter addressIDParameter;
            if (addressID.HasValue)
            {
                addressIDParameter = new ObjectParameter("AddressID", addressID);
            }
            else
            {
                addressIDParameter = new ObjectParameter("AddressID", typeof(global::System.Int64));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction("DeleteAddress", addressIDParameter, dataOwnerIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="addressID">Нет доступной документации по метаданным.</param>
        /// <param name="apartament">Нет доступной документации по метаданным.</param>
        /// <param name="building">Нет доступной документации по метаданным.</param>
        /// <param name="street">Нет доступной документации по метаданным.</param>
        /// <param name="city">Нет доступной документации по метаданным.</param>
        /// <param name="state">Нет доступной документации по метаданным.</param>
        /// <param name="country">Нет доступной документации по метаданным.</param>
        /// <param name="zipCode">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public int UpdateAddress(Nullable<global::System.Int64> addressID, global::System.String apartament, global::System.String building, global::System.String street, global::System.String city, global::System.String state, global::System.String country, global::System.String zipCode, Nullable<global::System.Guid> dataOwnerID)
        {
            ObjectParameter addressIDParameter;
            if (addressID.HasValue)
            {
                addressIDParameter = new ObjectParameter("AddressID", addressID);
            }
            else
            {
                addressIDParameter = new ObjectParameter("AddressID", typeof(global::System.Int64));
            }
    
            ObjectParameter apartamentParameter;
            if (apartament != null)
            {
                apartamentParameter = new ObjectParameter("Apartament", apartament);
            }
            else
            {
                apartamentParameter = new ObjectParameter("Apartament", typeof(global::System.String));
            }
    
            ObjectParameter buildingParameter;
            if (building != null)
            {
                buildingParameter = new ObjectParameter("Building", building);
            }
            else
            {
                buildingParameter = new ObjectParameter("Building", typeof(global::System.String));
            }
    
            ObjectParameter streetParameter;
            if (street != null)
            {
                streetParameter = new ObjectParameter("Street", street);
            }
            else
            {
                streetParameter = new ObjectParameter("Street", typeof(global::System.String));
            }
    
            ObjectParameter cityParameter;
            if (city != null)
            {
                cityParameter = new ObjectParameter("City", city);
            }
            else
            {
                cityParameter = new ObjectParameter("City", typeof(global::System.String));
            }
    
            ObjectParameter stateParameter;
            if (state != null)
            {
                stateParameter = new ObjectParameter("State", state);
            }
            else
            {
                stateParameter = new ObjectParameter("State", typeof(global::System.String));
            }
    
            ObjectParameter countryParameter;
            if (country != null)
            {
                countryParameter = new ObjectParameter("Country", country);
            }
            else
            {
                countryParameter = new ObjectParameter("Country", typeof(global::System.String));
            }
    
            ObjectParameter zipCodeParameter;
            if (zipCode != null)
            {
                zipCodeParameter = new ObjectParameter("ZipCode", zipCode);
            }
            else
            {
                zipCodeParameter = new ObjectParameter("ZipCode", typeof(global::System.String));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction("UpdateAddress", addressIDParameter, apartamentParameter, buildingParameter, streetParameter, cityParameter, stateParameter, countryParameter, zipCodeParameter, dataOwnerIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="apartament">Нет доступной документации по метаданным.</param>
        /// <param name="building">Нет доступной документации по метаданным.</param>
        /// <param name="street">Нет доступной документации по метаданным.</param>
        /// <param name="city">Нет доступной документации по метаданным.</param>
        /// <param name="state">Нет доступной документации по метаданным.</param>
        /// <param name="country">Нет доступной документации по метаданным.</param>
        /// <param name="zipCode">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public ObjectResult<Nullable<global::System.Int64>> AddAddress(global::System.String apartament, global::System.String building, global::System.String street, global::System.String city, global::System.String state, global::System.String country, global::System.String zipCode, Nullable<global::System.Guid> dataOwnerID)
        {
            ObjectParameter apartamentParameter;
            if (apartament != null)
            {
                apartamentParameter = new ObjectParameter("Apartament", apartament);
            }
            else
            {
                apartamentParameter = new ObjectParameter("Apartament", typeof(global::System.String));
            }
    
            ObjectParameter buildingParameter;
            if (building != null)
            {
                buildingParameter = new ObjectParameter("Building", building);
            }
            else
            {
                buildingParameter = new ObjectParameter("Building", typeof(global::System.String));
            }
    
            ObjectParameter streetParameter;
            if (street != null)
            {
                streetParameter = new ObjectParameter("Street", street);
            }
            else
            {
                streetParameter = new ObjectParameter("Street", typeof(global::System.String));
            }
    
            ObjectParameter cityParameter;
            if (city != null)
            {
                cityParameter = new ObjectParameter("City", city);
            }
            else
            {
                cityParameter = new ObjectParameter("City", typeof(global::System.String));
            }
    
            ObjectParameter stateParameter;
            if (state != null)
            {
                stateParameter = new ObjectParameter("State", state);
            }
            else
            {
                stateParameter = new ObjectParameter("State", typeof(global::System.String));
            }
    
            ObjectParameter countryParameter;
            if (country != null)
            {
                countryParameter = new ObjectParameter("Country", country);
            }
            else
            {
                countryParameter = new ObjectParameter("Country", typeof(global::System.String));
            }
    
            ObjectParameter zipCodeParameter;
            if (zipCode != null)
            {
                zipCodeParameter = new ObjectParameter("ZipCode", zipCode);
            }
            else
            {
                zipCodeParameter = new ObjectParameter("ZipCode", typeof(global::System.String));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<Nullable<global::System.Int64>>("AddAddress", apartamentParameter, buildingParameter, streetParameter, cityParameter, stateParameter, countryParameter, zipCodeParameter, dataOwnerIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="name">Нет доступной документации по метаданным.</param>
        /// <param name="internalAddress">Нет доступной документации по метаданным.</param>
        /// <param name="addressType">Нет доступной документации по метаданным.</param>
        /// <param name="port">Нет доступной документации по метаданным.</param>
        /// <param name="groupID">Нет доступной документации по метаданным.</param>
        /// <param name="typeID">Нет доступной документации по метаданным.</param>
        /// <param name="ownerID">Нет доступной документации по метаданным.</param>
        /// <param name="iP1">Нет доступной документации по метаданным.</param>
        /// <param name="iP2">Нет доступной документации по метаданным.</param>
        /// <param name="iP3">Нет доступной документации по метаданным.</param>
        /// <param name="iP4">Нет доступной документации по метаданным.</param>
        /// <param name="secondaryPort">Нет доступной документации по метаданным.</param>
        /// <param name="secondaryIP1">Нет доступной документации по метаданным.</param>
        /// <param name="secondaryIP2">Нет доступной документации по метаданным.</param>
        /// <param name="secondaryIP3">Нет доступной документации по метаданным.</param>
        /// <param name="secondaryIP4">Нет доступной документации по метаданным.</param>
        /// <param name="apartament">Нет доступной документации по метаданным.</param>
        /// <param name="building">Нет доступной документации по метаданным.</param>
        /// <param name="street">Нет доступной документации по метаданным.</param>
        /// <param name="city">Нет доступной документации по метаданным.</param>
        /// <param name="state">Нет доступной документации по метаданным.</param>
        /// <param name="country">Нет доступной документации по метаданным.</param>
        /// <param name="zipCode">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public ObjectResult<Nullable<global::System.Int64>> AddDeviceWithAddress(global::System.String name, global::System.String internalAddress, global::System.String addressType, global::System.String port, Nullable<global::System.Int64> groupID, Nullable<global::System.Int64> typeID, Nullable<global::System.Int64> ownerID, global::System.String iP1, global::System.String iP2, global::System.String iP3, global::System.String iP4, global::System.String secondaryPort, global::System.String secondaryIP1, global::System.String secondaryIP2, global::System.String secondaryIP3, global::System.String secondaryIP4, global::System.String apartament, global::System.String building, global::System.String street, global::System.String city, global::System.String state, global::System.String country, global::System.String zipCode, Nullable<global::System.Guid> dataOwnerID)
        {
            ObjectParameter nameParameter;
            if (name != null)
            {
                nameParameter = new ObjectParameter("Name", name);
            }
            else
            {
                nameParameter = new ObjectParameter("Name", typeof(global::System.String));
            }
    
            ObjectParameter internalAddressParameter;
            if (internalAddress != null)
            {
                internalAddressParameter = new ObjectParameter("InternalAddress", internalAddress);
            }
            else
            {
                internalAddressParameter = new ObjectParameter("InternalAddress", typeof(global::System.String));
            }
    
            ObjectParameter addressTypeParameter;
            if (addressType != null)
            {
                addressTypeParameter = new ObjectParameter("AddressType", addressType);
            }
            else
            {
                addressTypeParameter = new ObjectParameter("AddressType", typeof(global::System.String));
            }
    
            ObjectParameter portParameter;
            if (port != null)
            {
                portParameter = new ObjectParameter("Port", port);
            }
            else
            {
                portParameter = new ObjectParameter("Port", typeof(global::System.String));
            }
    
            ObjectParameter groupIDParameter;
            if (groupID.HasValue)
            {
                groupIDParameter = new ObjectParameter("GroupID", groupID);
            }
            else
            {
                groupIDParameter = new ObjectParameter("GroupID", typeof(global::System.Int64));
            }
    
            ObjectParameter typeIDParameter;
            if (typeID.HasValue)
            {
                typeIDParameter = new ObjectParameter("TypeID", typeID);
            }
            else
            {
                typeIDParameter = new ObjectParameter("TypeID", typeof(global::System.Int64));
            }
    
            ObjectParameter ownerIDParameter;
            if (ownerID.HasValue)
            {
                ownerIDParameter = new ObjectParameter("OwnerID", ownerID);
            }
            else
            {
                ownerIDParameter = new ObjectParameter("OwnerID", typeof(global::System.Int64));
            }
    
            ObjectParameter iP1Parameter;
            if (iP1 != null)
            {
                iP1Parameter = new ObjectParameter("IP1", iP1);
            }
            else
            {
                iP1Parameter = new ObjectParameter("IP1", typeof(global::System.String));
            }
    
            ObjectParameter iP2Parameter;
            if (iP2 != null)
            {
                iP2Parameter = new ObjectParameter("IP2", iP2);
            }
            else
            {
                iP2Parameter = new ObjectParameter("IP2", typeof(global::System.String));
            }
    
            ObjectParameter iP3Parameter;
            if (iP3 != null)
            {
                iP3Parameter = new ObjectParameter("IP3", iP3);
            }
            else
            {
                iP3Parameter = new ObjectParameter("IP3", typeof(global::System.String));
            }
    
            ObjectParameter iP4Parameter;
            if (iP4 != null)
            {
                iP4Parameter = new ObjectParameter("IP4", iP4);
            }
            else
            {
                iP4Parameter = new ObjectParameter("IP4", typeof(global::System.String));
            }
    
            ObjectParameter secondaryPortParameter;
            if (secondaryPort != null)
            {
                secondaryPortParameter = new ObjectParameter("SecondaryPort", secondaryPort);
            }
            else
            {
                secondaryPortParameter = new ObjectParameter("SecondaryPort", typeof(global::System.String));
            }
    
            ObjectParameter secondaryIP1Parameter;
            if (secondaryIP1 != null)
            {
                secondaryIP1Parameter = new ObjectParameter("SecondaryIP1", secondaryIP1);
            }
            else
            {
                secondaryIP1Parameter = new ObjectParameter("SecondaryIP1", typeof(global::System.String));
            }
    
            ObjectParameter secondaryIP2Parameter;
            if (secondaryIP2 != null)
            {
                secondaryIP2Parameter = new ObjectParameter("SecondaryIP2", secondaryIP2);
            }
            else
            {
                secondaryIP2Parameter = new ObjectParameter("SecondaryIP2", typeof(global::System.String));
            }
    
            ObjectParameter secondaryIP3Parameter;
            if (secondaryIP3 != null)
            {
                secondaryIP3Parameter = new ObjectParameter("SecondaryIP3", secondaryIP3);
            }
            else
            {
                secondaryIP3Parameter = new ObjectParameter("SecondaryIP3", typeof(global::System.String));
            }
    
            ObjectParameter secondaryIP4Parameter;
            if (secondaryIP4 != null)
            {
                secondaryIP4Parameter = new ObjectParameter("SecondaryIP4", secondaryIP4);
            }
            else
            {
                secondaryIP4Parameter = new ObjectParameter("SecondaryIP4", typeof(global::System.String));
            }
    
            ObjectParameter apartamentParameter;
            if (apartament != null)
            {
                apartamentParameter = new ObjectParameter("Apartament", apartament);
            }
            else
            {
                apartamentParameter = new ObjectParameter("Apartament", typeof(global::System.String));
            }
    
            ObjectParameter buildingParameter;
            if (building != null)
            {
                buildingParameter = new ObjectParameter("Building", building);
            }
            else
            {
                buildingParameter = new ObjectParameter("Building", typeof(global::System.String));
            }
    
            ObjectParameter streetParameter;
            if (street != null)
            {
                streetParameter = new ObjectParameter("Street", street);
            }
            else
            {
                streetParameter = new ObjectParameter("Street", typeof(global::System.String));
            }
    
            ObjectParameter cityParameter;
            if (city != null)
            {
                cityParameter = new ObjectParameter("City", city);
            }
            else
            {
                cityParameter = new ObjectParameter("City", typeof(global::System.String));
            }
    
            ObjectParameter stateParameter;
            if (state != null)
            {
                stateParameter = new ObjectParameter("State", state);
            }
            else
            {
                stateParameter = new ObjectParameter("State", typeof(global::System.String));
            }
    
            ObjectParameter countryParameter;
            if (country != null)
            {
                countryParameter = new ObjectParameter("Country", country);
            }
            else
            {
                countryParameter = new ObjectParameter("Country", typeof(global::System.String));
            }
    
            ObjectParameter zipCodeParameter;
            if (zipCode != null)
            {
                zipCodeParameter = new ObjectParameter("ZipCode", zipCode);
            }
            else
            {
                zipCodeParameter = new ObjectParameter("ZipCode", typeof(global::System.String));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<Nullable<global::System.Int64>>("AddDeviceWithAddress", nameParameter, internalAddressParameter, addressTypeParameter, portParameter, groupIDParameter, typeIDParameter, ownerIDParameter, iP1Parameter, iP2Parameter, iP3Parameter, iP4Parameter, secondaryPortParameter, secondaryIP1Parameter, secondaryIP2Parameter, secondaryIP3Parameter, secondaryIP4Parameter, apartamentParameter, buildingParameter, streetParameter, cityParameter, stateParameter, countryParameter, zipCodeParameter, dataOwnerIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="apartamentID">Нет доступной документации по метаданным.</param>
        /// <param name="buildingID">Нет доступной документации по метаданным.</param>
        /// <param name="streetID">Нет доступной документации по метаданным.</param>
        /// <param name="cityID">Нет доступной документации по метаданным.</param>
        /// <param name="stateID">Нет доступной документации по метаданным.</param>
        /// <param name="countryID">Нет доступной документации по метаданным.</param>
        /// <param name="zipCodeID">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public ObjectResult<Nullable<global::System.Int64>> AddAddressSet(Nullable<global::System.Int64> apartamentID, Nullable<global::System.Int64> buildingID, Nullable<global::System.Int64> streetID, Nullable<global::System.Int64> cityID, Nullable<global::System.Int64> stateID, Nullable<global::System.Int64> countryID, Nullable<global::System.Int64> zipCodeID, Nullable<global::System.Guid> dataOwnerID)
        {
            ObjectParameter apartamentIDParameter;
            if (apartamentID.HasValue)
            {
                apartamentIDParameter = new ObjectParameter("ApartamentID", apartamentID);
            }
            else
            {
                apartamentIDParameter = new ObjectParameter("ApartamentID", typeof(global::System.Int64));
            }
    
            ObjectParameter buildingIDParameter;
            if (buildingID.HasValue)
            {
                buildingIDParameter = new ObjectParameter("BuildingID", buildingID);
            }
            else
            {
                buildingIDParameter = new ObjectParameter("BuildingID", typeof(global::System.Int64));
            }
    
            ObjectParameter streetIDParameter;
            if (streetID.HasValue)
            {
                streetIDParameter = new ObjectParameter("StreetID", streetID);
            }
            else
            {
                streetIDParameter = new ObjectParameter("StreetID", typeof(global::System.Int64));
            }
    
            ObjectParameter cityIDParameter;
            if (cityID.HasValue)
            {
                cityIDParameter = new ObjectParameter("CityID", cityID);
            }
            else
            {
                cityIDParameter = new ObjectParameter("CityID", typeof(global::System.Int64));
            }
    
            ObjectParameter stateIDParameter;
            if (stateID.HasValue)
            {
                stateIDParameter = new ObjectParameter("StateID", stateID);
            }
            else
            {
                stateIDParameter = new ObjectParameter("StateID", typeof(global::System.Int64));
            }
    
            ObjectParameter countryIDParameter;
            if (countryID.HasValue)
            {
                countryIDParameter = new ObjectParameter("CountryID", countryID);
            }
            else
            {
                countryIDParameter = new ObjectParameter("CountryID", typeof(global::System.Int64));
            }
    
            ObjectParameter zipCodeIDParameter;
            if (zipCodeID.HasValue)
            {
                zipCodeIDParameter = new ObjectParameter("ZipCodeID", zipCodeID);
            }
            else
            {
                zipCodeIDParameter = new ObjectParameter("ZipCodeID", typeof(global::System.Int64));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<Nullable<global::System.Int64>>("AddAddressSet", apartamentIDParameter, buildingIDParameter, streetIDParameter, cityIDParameter, stateIDParameter, countryIDParameter, zipCodeIDParameter, dataOwnerIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="deviceID">Нет доступной документации по метаданным.</param>
        /// <param name="addressID">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public int UpdateDeviceAddress(Nullable<global::System.Int64> deviceID, Nullable<global::System.Int64> addressID, Nullable<global::System.Guid> dataOwnerID)
        {
            ObjectParameter deviceIDParameter;
            if (deviceID.HasValue)
            {
                deviceIDParameter = new ObjectParameter("DeviceID", deviceID);
            }
            else
            {
                deviceIDParameter = new ObjectParameter("DeviceID", typeof(global::System.Int64));
            }
    
            ObjectParameter addressIDParameter;
            if (addressID.HasValue)
            {
                addressIDParameter = new ObjectParameter("AddressID", addressID);
            }
            else
            {
                addressIDParameter = new ObjectParameter("AddressID", typeof(global::System.Int64));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction("UpdateDeviceAddress", deviceIDParameter, addressIDParameter, dataOwnerIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="country">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public ObjectResult<Nullable<global::System.Int64>> AddCountry(global::System.String country, Nullable<global::System.Guid> dataOwnerID)
        {
            ObjectParameter countryParameter;
            if (country != null)
            {
                countryParameter = new ObjectParameter("Country", country);
            }
            else
            {
                countryParameter = new ObjectParameter("Country", typeof(global::System.String));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<Nullable<global::System.Int64>>("AddCountry", countryParameter, dataOwnerIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="state">Нет доступной документации по метаданным.</param>
        /// <param name="countryID">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public ObjectResult<Nullable<global::System.Int64>> AddState(global::System.String state, Nullable<global::System.Int64> countryID, Nullable<global::System.Guid> dataOwnerID)
        {
            ObjectParameter stateParameter;
            if (state != null)
            {
                stateParameter = new ObjectParameter("State", state);
            }
            else
            {
                stateParameter = new ObjectParameter("State", typeof(global::System.String));
            }
    
            ObjectParameter countryIDParameter;
            if (countryID.HasValue)
            {
                countryIDParameter = new ObjectParameter("CountryID", countryID);
            }
            else
            {
                countryIDParameter = new ObjectParameter("CountryID", typeof(global::System.Int64));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<Nullable<global::System.Int64>>("AddState", stateParameter, countryIDParameter, dataOwnerIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="city">Нет доступной документации по метаданным.</param>
        /// <param name="stateID">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public ObjectResult<Nullable<global::System.Int64>> AddCity(global::System.String city, Nullable<global::System.Int64> stateID, Nullable<global::System.Guid> dataOwnerID)
        {
            ObjectParameter cityParameter;
            if (city != null)
            {
                cityParameter = new ObjectParameter("City", city);
            }
            else
            {
                cityParameter = new ObjectParameter("City", typeof(global::System.String));
            }
    
            ObjectParameter stateIDParameter;
            if (stateID.HasValue)
            {
                stateIDParameter = new ObjectParameter("StateID", stateID);
            }
            else
            {
                stateIDParameter = new ObjectParameter("StateID", typeof(global::System.Int64));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<Nullable<global::System.Int64>>("AddCity", cityParameter, stateIDParameter, dataOwnerIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="street">Нет доступной документации по метаданным.</param>
        /// <param name="cityID">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public ObjectResult<Nullable<global::System.Int64>> AddStreet(global::System.String street, Nullable<global::System.Int64> cityID, Nullable<global::System.Guid> dataOwnerID)
        {
            ObjectParameter streetParameter;
            if (street != null)
            {
                streetParameter = new ObjectParameter("Street", street);
            }
            else
            {
                streetParameter = new ObjectParameter("Street", typeof(global::System.String));
            }
    
            ObjectParameter cityIDParameter;
            if (cityID.HasValue)
            {
                cityIDParameter = new ObjectParameter("CityID", cityID);
            }
            else
            {
                cityIDParameter = new ObjectParameter("CityID", typeof(global::System.Int64));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<Nullable<global::System.Int64>>("AddStreet", streetParameter, cityIDParameter, dataOwnerIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="building">Нет доступной документации по метаданным.</param>
        /// <param name="streetID">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public ObjectResult<Nullable<global::System.Int64>> AddBuilding(global::System.String building, Nullable<global::System.Int64> streetID, Nullable<global::System.Guid> dataOwnerID)
        {
            ObjectParameter buildingParameter;
            if (building != null)
            {
                buildingParameter = new ObjectParameter("Building", building);
            }
            else
            {
                buildingParameter = new ObjectParameter("Building", typeof(global::System.String));
            }
    
            ObjectParameter streetIDParameter;
            if (streetID.HasValue)
            {
                streetIDParameter = new ObjectParameter("StreetID", streetID);
            }
            else
            {
                streetIDParameter = new ObjectParameter("StreetID", typeof(global::System.Int64));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<Nullable<global::System.Int64>>("AddBuilding", buildingParameter, streetIDParameter, dataOwnerIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="apartament">Нет доступной документации по метаданным.</param>
        /// <param name="buildingID">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public ObjectResult<Nullable<global::System.Int64>> AddApartament(global::System.String apartament, Nullable<global::System.Int64> buildingID, Nullable<global::System.Guid> dataOwnerID)
        {
            ObjectParameter apartamentParameter;
            if (apartament != null)
            {
                apartamentParameter = new ObjectParameter("Apartament", apartament);
            }
            else
            {
                apartamentParameter = new ObjectParameter("Apartament", typeof(global::System.String));
            }
    
            ObjectParameter buildingIDParameter;
            if (buildingID.HasValue)
            {
                buildingIDParameter = new ObjectParameter("BuildingID", buildingID);
            }
            else
            {
                buildingIDParameter = new ObjectParameter("BuildingID", typeof(global::System.Int64));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<Nullable<global::System.Int64>>("AddApartament", apartamentParameter, buildingIDParameter, dataOwnerIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="zipCode">Нет доступной документации по метаданным.</param>
        /// <param name="countryID">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public ObjectResult<Nullable<global::System.Int64>> AddZipCode(global::System.String zipCode, Nullable<global::System.Int64> countryID, Nullable<global::System.Guid> dataOwnerID)
        {
            ObjectParameter zipCodeParameter;
            if (zipCode != null)
            {
                zipCodeParameter = new ObjectParameter("ZipCode", zipCode);
            }
            else
            {
                zipCodeParameter = new ObjectParameter("ZipCode", typeof(global::System.String));
            }
    
            ObjectParameter countryIDParameter;
            if (countryID.HasValue)
            {
                countryIDParameter = new ObjectParameter("CountryID", countryID);
            }
            else
            {
                countryIDParameter = new ObjectParameter("CountryID", typeof(global::System.Int64));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<Nullable<global::System.Int64>>("AddZipCode", zipCodeParameter, countryIDParameter, dataOwnerIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="deviceID">Нет доступной документации по метаданным.</param>
        /// <param name="ownerID">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public int UpdateDeviceOwnerID(Nullable<global::System.Int64> deviceID, Nullable<global::System.Int64> ownerID, Nullable<global::System.Guid> dataOwnerID)
        {
            ObjectParameter deviceIDParameter;
            if (deviceID.HasValue)
            {
                deviceIDParameter = new ObjectParameter("DeviceID", deviceID);
            }
            else
            {
                deviceIDParameter = new ObjectParameter("DeviceID", typeof(global::System.Int64));
            }
    
            ObjectParameter ownerIDParameter;
            if (ownerID.HasValue)
            {
                ownerIDParameter = new ObjectParameter("OwnerID", ownerID);
            }
            else
            {
                ownerIDParameter = new ObjectParameter("OwnerID", typeof(global::System.Int64));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction("UpdateDeviceOwnerID", deviceIDParameter, ownerIDParameter, dataOwnerIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="firstName">Нет доступной документации по метаданным.</param>
        /// <param name="lastName">Нет доступной документации по метаданным.</param>
        /// <param name="company">Нет доступной документации по метаданным.</param>
        /// <param name="apartament">Нет доступной документации по метаданным.</param>
        /// <param name="building">Нет доступной документации по метаданным.</param>
        /// <param name="street">Нет доступной документации по метаданным.</param>
        /// <param name="city">Нет доступной документации по метаданным.</param>
        /// <param name="state">Нет доступной документации по метаданным.</param>
        /// <param name="country">Нет доступной документации по метаданным.</param>
        /// <param name="zipCode">Нет доступной документации по метаданным.</param>
        /// <param name="eMail">Нет доступной документации по метаданным.</param>
        /// <param name="phone">Нет доступной документации по метаданным.</param>
        /// <param name="cell">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public ObjectResult<Nullable<global::System.Int64>> AddDeviceOwner(global::System.String firstName, global::System.String lastName, global::System.String company, global::System.String apartament, global::System.String building, global::System.String street, global::System.String city, global::System.String state, global::System.String country, global::System.String zipCode, global::System.String eMail, global::System.String phone, global::System.String cell, Nullable<global::System.Guid> dataOwnerID)
        {
            ObjectParameter firstNameParameter;
            if (firstName != null)
            {
                firstNameParameter = new ObjectParameter("FirstName", firstName);
            }
            else
            {
                firstNameParameter = new ObjectParameter("FirstName", typeof(global::System.String));
            }
    
            ObjectParameter lastNameParameter;
            if (lastName != null)
            {
                lastNameParameter = new ObjectParameter("LastName", lastName);
            }
            else
            {
                lastNameParameter = new ObjectParameter("LastName", typeof(global::System.String));
            }
    
            ObjectParameter companyParameter;
            if (company != null)
            {
                companyParameter = new ObjectParameter("Company", company);
            }
            else
            {
                companyParameter = new ObjectParameter("Company", typeof(global::System.String));
            }
    
            ObjectParameter apartamentParameter;
            if (apartament != null)
            {
                apartamentParameter = new ObjectParameter("Apartament", apartament);
            }
            else
            {
                apartamentParameter = new ObjectParameter("Apartament", typeof(global::System.String));
            }
    
            ObjectParameter buildingParameter;
            if (building != null)
            {
                buildingParameter = new ObjectParameter("Building", building);
            }
            else
            {
                buildingParameter = new ObjectParameter("Building", typeof(global::System.String));
            }
    
            ObjectParameter streetParameter;
            if (street != null)
            {
                streetParameter = new ObjectParameter("Street", street);
            }
            else
            {
                streetParameter = new ObjectParameter("Street", typeof(global::System.String));
            }
    
            ObjectParameter cityParameter;
            if (city != null)
            {
                cityParameter = new ObjectParameter("City", city);
            }
            else
            {
                cityParameter = new ObjectParameter("City", typeof(global::System.String));
            }
    
            ObjectParameter stateParameter;
            if (state != null)
            {
                stateParameter = new ObjectParameter("State", state);
            }
            else
            {
                stateParameter = new ObjectParameter("State", typeof(global::System.String));
            }
    
            ObjectParameter countryParameter;
            if (country != null)
            {
                countryParameter = new ObjectParameter("Country", country);
            }
            else
            {
                countryParameter = new ObjectParameter("Country", typeof(global::System.String));
            }
    
            ObjectParameter zipCodeParameter;
            if (zipCode != null)
            {
                zipCodeParameter = new ObjectParameter("ZipCode", zipCode);
            }
            else
            {
                zipCodeParameter = new ObjectParameter("ZipCode", typeof(global::System.String));
            }
    
            ObjectParameter eMailParameter;
            if (eMail != null)
            {
                eMailParameter = new ObjectParameter("EMail", eMail);
            }
            else
            {
                eMailParameter = new ObjectParameter("EMail", typeof(global::System.String));
            }
    
            ObjectParameter phoneParameter;
            if (phone != null)
            {
                phoneParameter = new ObjectParameter("Phone", phone);
            }
            else
            {
                phoneParameter = new ObjectParameter("Phone", typeof(global::System.String));
            }
    
            ObjectParameter cellParameter;
            if (cell != null)
            {
                cellParameter = new ObjectParameter("Cell", cell);
            }
            else
            {
                cellParameter = new ObjectParameter("Cell", typeof(global::System.String));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<Nullable<global::System.Int64>>("AddDeviceOwner", firstNameParameter, lastNameParameter, companyParameter, apartamentParameter, buildingParameter, streetParameter, cityParameter, stateParameter, countryParameter, zipCodeParameter, eMailParameter, phoneParameter, cellParameter, dataOwnerIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="name">Нет доступной документации по метаданным.</param>
        /// <param name="cellWidth">Нет доступной документации по метаданным.</param>
        /// <param name="cellHeight">Нет доступной документации по метаданным.</param>
        /// <param name="rows">Нет доступной документации по метаданным.</param>
        /// <param name="cols">Нет доступной документации по метаданным.</param>
        /// <param name="margin">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public int AddChartSet(global::System.String name, Nullable<global::System.Int32> cellWidth, Nullable<global::System.Int32> cellHeight, Nullable<global::System.Int32> rows, Nullable<global::System.Int32> cols, Nullable<global::System.Int32> margin, Nullable<global::System.Guid> dataOwnerID)
        {
            ObjectParameter nameParameter;
            if (name != null)
            {
                nameParameter = new ObjectParameter("Name", name);
            }
            else
            {
                nameParameter = new ObjectParameter("Name", typeof(global::System.String));
            }
    
            ObjectParameter cellWidthParameter;
            if (cellWidth.HasValue)
            {
                cellWidthParameter = new ObjectParameter("CellWidth", cellWidth);
            }
            else
            {
                cellWidthParameter = new ObjectParameter("CellWidth", typeof(global::System.Int32));
            }
    
            ObjectParameter cellHeightParameter;
            if (cellHeight.HasValue)
            {
                cellHeightParameter = new ObjectParameter("CellHeight", cellHeight);
            }
            else
            {
                cellHeightParameter = new ObjectParameter("CellHeight", typeof(global::System.Int32));
            }
    
            ObjectParameter rowsParameter;
            if (rows.HasValue)
            {
                rowsParameter = new ObjectParameter("Rows", rows);
            }
            else
            {
                rowsParameter = new ObjectParameter("Rows", typeof(global::System.Int32));
            }
    
            ObjectParameter colsParameter;
            if (cols.HasValue)
            {
                colsParameter = new ObjectParameter("Cols", cols);
            }
            else
            {
                colsParameter = new ObjectParameter("Cols", typeof(global::System.Int32));
            }
    
            ObjectParameter marginParameter;
            if (margin.HasValue)
            {
                marginParameter = new ObjectParameter("Margin", margin);
            }
            else
            {
                marginParameter = new ObjectParameter("Margin", typeof(global::System.Int32));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction("AddChartSet", nameParameter, cellWidthParameter, cellHeightParameter, rowsParameter, colsParameter, marginParameter, dataOwnerIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="name">Нет доступной документации по метаданным.</param>
        /// <param name="chartSetID">Нет доступной документации по метаданным.</param>
        /// <param name="cellWidth">Нет доступной документации по метаданным.</param>
        /// <param name="cellHeight">Нет доступной документации по метаданным.</param>
        /// <param name="rows">Нет доступной документации по метаданным.</param>
        /// <param name="cols">Нет доступной документации по метаданным.</param>
        /// <param name="margin">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public int UpdateChartSet(global::System.String name, Nullable<global::System.Int64> chartSetID, Nullable<global::System.Int32> cellWidth, Nullable<global::System.Int32> cellHeight, Nullable<global::System.Int32> rows, Nullable<global::System.Int32> cols, Nullable<global::System.Int32> margin, Nullable<global::System.Guid> dataOwnerID)
        {
            ObjectParameter nameParameter;
            if (name != null)
            {
                nameParameter = new ObjectParameter("Name", name);
            }
            else
            {
                nameParameter = new ObjectParameter("Name", typeof(global::System.String));
            }
    
            ObjectParameter chartSetIDParameter;
            if (chartSetID.HasValue)
            {
                chartSetIDParameter = new ObjectParameter("ChartSetID", chartSetID);
            }
            else
            {
                chartSetIDParameter = new ObjectParameter("ChartSetID", typeof(global::System.Int64));
            }
    
            ObjectParameter cellWidthParameter;
            if (cellWidth.HasValue)
            {
                cellWidthParameter = new ObjectParameter("CellWidth", cellWidth);
            }
            else
            {
                cellWidthParameter = new ObjectParameter("CellWidth", typeof(global::System.Int32));
            }
    
            ObjectParameter cellHeightParameter;
            if (cellHeight.HasValue)
            {
                cellHeightParameter = new ObjectParameter("CellHeight", cellHeight);
            }
            else
            {
                cellHeightParameter = new ObjectParameter("CellHeight", typeof(global::System.Int32));
            }
    
            ObjectParameter rowsParameter;
            if (rows.HasValue)
            {
                rowsParameter = new ObjectParameter("Rows", rows);
            }
            else
            {
                rowsParameter = new ObjectParameter("Rows", typeof(global::System.Int32));
            }
    
            ObjectParameter colsParameter;
            if (cols.HasValue)
            {
                colsParameter = new ObjectParameter("Cols", cols);
            }
            else
            {
                colsParameter = new ObjectParameter("Cols", typeof(global::System.Int32));
            }
    
            ObjectParameter marginParameter;
            if (margin.HasValue)
            {
                marginParameter = new ObjectParameter("Margin", margin);
            }
            else
            {
                marginParameter = new ObjectParameter("Margin", typeof(global::System.Int32));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction("UpdateChartSet", nameParameter, chartSetIDParameter, cellWidthParameter, cellHeightParameter, rowsParameter, colsParameter, marginParameter, dataOwnerIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="chartSetID">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public int DeleteChartSet(Nullable<global::System.Int64> chartSetID, Nullable<global::System.Guid> dataOwnerID)
        {
            ObjectParameter chartSetIDParameter;
            if (chartSetID.HasValue)
            {
                chartSetIDParameter = new ObjectParameter("ChartSetID", chartSetID);
            }
            else
            {
                chartSetIDParameter = new ObjectParameter("ChartSetID", typeof(global::System.Int64));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction("DeleteChartSet", chartSetIDParameter, dataOwnerIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="iD">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public int DeleteChart(Nullable<global::System.Int64> iD, Nullable<global::System.Guid> dataOwnerID)
        {
            ObjectParameter iDParameter;
            if (iD.HasValue)
            {
                iDParameter = new ObjectParameter("ID", iD);
            }
            else
            {
                iDParameter = new ObjectParameter("ID", typeof(global::System.Int64));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction("DeleteChart", iDParameter, dataOwnerIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="iD">Нет доступной документации по метаданным.</param>
        /// <param name="name">Нет доступной документации по метаданным.</param>
        /// <param name="width">Нет доступной документации по метаданным.</param>
        /// <param name="height">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        /// <param name="dataSetType">Нет доступной документации по метаданным.</param>
        /// <param name="dataSetMaxCount">Нет доступной документации по метаданным.</param>
        /// <param name="chartType">Нет доступной документации по метаданным.</param>
        public int UpdateChart(Nullable<global::System.Int64> iD, global::System.String name, Nullable<global::System.Int32> width, Nullable<global::System.Int32> height, Nullable<global::System.Guid> dataOwnerID, global::System.String dataSetType, Nullable<global::System.Int32> dataSetMaxCount, global::System.String chartType)
        {
            ObjectParameter iDParameter;
            if (iD.HasValue)
            {
                iDParameter = new ObjectParameter("ID", iD);
            }
            else
            {
                iDParameter = new ObjectParameter("ID", typeof(global::System.Int64));
            }
    
            ObjectParameter nameParameter;
            if (name != null)
            {
                nameParameter = new ObjectParameter("Name", name);
            }
            else
            {
                nameParameter = new ObjectParameter("Name", typeof(global::System.String));
            }
    
            ObjectParameter widthParameter;
            if (width.HasValue)
            {
                widthParameter = new ObjectParameter("Width", width);
            }
            else
            {
                widthParameter = new ObjectParameter("Width", typeof(global::System.Int32));
            }
    
            ObjectParameter heightParameter;
            if (height.HasValue)
            {
                heightParameter = new ObjectParameter("Height", height);
            }
            else
            {
                heightParameter = new ObjectParameter("Height", typeof(global::System.Int32));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            ObjectParameter dataSetTypeParameter;
            if (dataSetType != null)
            {
                dataSetTypeParameter = new ObjectParameter("DataSetType", dataSetType);
            }
            else
            {
                dataSetTypeParameter = new ObjectParameter("DataSetType", typeof(global::System.String));
            }
    
            ObjectParameter dataSetMaxCountParameter;
            if (dataSetMaxCount.HasValue)
            {
                dataSetMaxCountParameter = new ObjectParameter("DataSetMaxCount", dataSetMaxCount);
            }
            else
            {
                dataSetMaxCountParameter = new ObjectParameter("DataSetMaxCount", typeof(global::System.Int32));
            }
    
            ObjectParameter chartTypeParameter;
            if (chartType != null)
            {
                chartTypeParameter = new ObjectParameter("ChartType", chartType);
            }
            else
            {
                chartTypeParameter = new ObjectParameter("ChartType", typeof(global::System.String));
            }
    
            return base.ExecuteFunction("UpdateChart", iDParameter, nameParameter, widthParameter, heightParameter, dataOwnerIDParameter, dataSetTypeParameter, dataSetMaxCountParameter, chartTypeParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="elementID">Нет доступной документации по метаданным.</param>
        /// <param name="chartID">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public int AddElementToChart(Nullable<global::System.Int64> elementID, Nullable<global::System.Int64> chartID, Nullable<global::System.Guid> dataOwnerID)
        {
            ObjectParameter elementIDParameter;
            if (elementID.HasValue)
            {
                elementIDParameter = new ObjectParameter("ElementID", elementID);
            }
            else
            {
                elementIDParameter = new ObjectParameter("ElementID", typeof(global::System.Int64));
            }
    
            ObjectParameter chartIDParameter;
            if (chartID.HasValue)
            {
                chartIDParameter = new ObjectParameter("ChartID", chartID);
            }
            else
            {
                chartIDParameter = new ObjectParameter("ChartID", typeof(global::System.Int64));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction("AddElementToChart", elementIDParameter, chartIDParameter, dataOwnerIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="chartID">Нет доступной документации по метаданным.</param>
        /// <param name="elementID">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public int DeleteElementFromChart(Nullable<global::System.Int64> chartID, Nullable<global::System.Int64> elementID, Nullable<global::System.Guid> dataOwnerID)
        {
            ObjectParameter chartIDParameter;
            if (chartID.HasValue)
            {
                chartIDParameter = new ObjectParameter("ChartID", chartID);
            }
            else
            {
                chartIDParameter = new ObjectParameter("ChartID", typeof(global::System.Int64));
            }
    
            ObjectParameter elementIDParameter;
            if (elementID.HasValue)
            {
                elementIDParameter = new ObjectParameter("ElementID", elementID);
            }
            else
            {
                elementIDParameter = new ObjectParameter("ElementID", typeof(global::System.Int64));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction("DeleteElementFromChart", chartIDParameter, elementIDParameter, dataOwnerIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="chartID">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public ObjectResult<Nullable<global::System.Int64>> GetChartElements(Nullable<global::System.Int64> chartID, Nullable<global::System.Guid> dataOwnerID)
        {
            ObjectParameter chartIDParameter;
            if (chartID.HasValue)
            {
                chartIDParameter = new ObjectParameter("ChartID", chartID);
            }
            else
            {
                chartIDParameter = new ObjectParameter("ChartID", typeof(global::System.Int64));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<Nullable<global::System.Int64>>("GetChartElements", chartIDParameter, dataOwnerIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="chartSetID">Нет доступной документации по метаданным.</param>
        /// <param name="chartID">Нет доступной документации по метаданным.</param>
        /// <param name="colIndex">Нет доступной документации по метаданным.</param>
        /// <param name="rowIndex">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public int AddChartSetsCharts(Nullable<global::System.Int64> chartSetID, Nullable<global::System.Int64> chartID, Nullable<global::System.Int64> colIndex, Nullable<global::System.Int64> rowIndex, Nullable<global::System.Guid> dataOwnerID)
        {
            ObjectParameter chartSetIDParameter;
            if (chartSetID.HasValue)
            {
                chartSetIDParameter = new ObjectParameter("ChartSetID", chartSetID);
            }
            else
            {
                chartSetIDParameter = new ObjectParameter("ChartSetID", typeof(global::System.Int64));
            }
    
            ObjectParameter chartIDParameter;
            if (chartID.HasValue)
            {
                chartIDParameter = new ObjectParameter("ChartID", chartID);
            }
            else
            {
                chartIDParameter = new ObjectParameter("ChartID", typeof(global::System.Int64));
            }
    
            ObjectParameter colIndexParameter;
            if (colIndex.HasValue)
            {
                colIndexParameter = new ObjectParameter("ColIndex", colIndex);
            }
            else
            {
                colIndexParameter = new ObjectParameter("ColIndex", typeof(global::System.Int64));
            }
    
            ObjectParameter rowIndexParameter;
            if (rowIndex.HasValue)
            {
                rowIndexParameter = new ObjectParameter("RowIndex", rowIndex);
            }
            else
            {
                rowIndexParameter = new ObjectParameter("RowIndex", typeof(global::System.Int64));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction("AddChartSetsCharts", chartSetIDParameter, chartIDParameter, colIndexParameter, rowIndexParameter, dataOwnerIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="chartSetID">Нет доступной документации по метаданным.</param>
        /// <param name="chartID">Нет доступной документации по метаданным.</param>
        /// <param name="colIndex">Нет доступной документации по метаданным.</param>
        /// <param name="rowIndex">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public int UpdateChartSetsCharts(Nullable<global::System.Int64> chartSetID, Nullable<global::System.Int64> chartID, Nullable<global::System.Int64> colIndex, Nullable<global::System.Int64> rowIndex, Nullable<global::System.Guid> dataOwnerID)
        {
            ObjectParameter chartSetIDParameter;
            if (chartSetID.HasValue)
            {
                chartSetIDParameter = new ObjectParameter("ChartSetID", chartSetID);
            }
            else
            {
                chartSetIDParameter = new ObjectParameter("ChartSetID", typeof(global::System.Int64));
            }
    
            ObjectParameter chartIDParameter;
            if (chartID.HasValue)
            {
                chartIDParameter = new ObjectParameter("ChartID", chartID);
            }
            else
            {
                chartIDParameter = new ObjectParameter("ChartID", typeof(global::System.Int64));
            }
    
            ObjectParameter colIndexParameter;
            if (colIndex.HasValue)
            {
                colIndexParameter = new ObjectParameter("ColIndex", colIndex);
            }
            else
            {
                colIndexParameter = new ObjectParameter("ColIndex", typeof(global::System.Int64));
            }
    
            ObjectParameter rowIndexParameter;
            if (rowIndex.HasValue)
            {
                rowIndexParameter = new ObjectParameter("RowIndex", rowIndex);
            }
            else
            {
                rowIndexParameter = new ObjectParameter("RowIndex", typeof(global::System.Int64));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction("UpdateChartSetsCharts", chartSetIDParameter, chartIDParameter, colIndexParameter, rowIndexParameter, dataOwnerIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="chartSetID">Нет доступной документации по метаданным.</param>
        /// <param name="chartID">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public int DeleteChartSetsCharts(Nullable<global::System.Int64> chartSetID, Nullable<global::System.Int64> chartID, Nullable<global::System.Guid> dataOwnerID)
        {
            ObjectParameter chartSetIDParameter;
            if (chartSetID.HasValue)
            {
                chartSetIDParameter = new ObjectParameter("ChartSetID", chartSetID);
            }
            else
            {
                chartSetIDParameter = new ObjectParameter("ChartSetID", typeof(global::System.Int64));
            }
    
            ObjectParameter chartIDParameter;
            if (chartID.HasValue)
            {
                chartIDParameter = new ObjectParameter("ChartID", chartID);
            }
            else
            {
                chartIDParameter = new ObjectParameter("ChartID", typeof(global::System.Int64));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction("DeleteChartSetsCharts", chartSetIDParameter, chartIDParameter, dataOwnerIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="name">Нет доступной документации по метаданным.</param>
        /// <param name="width">Нет доступной документации по метаданным.</param>
        /// <param name="height">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        /// <param name="dataSetType">Нет доступной документации по метаданным.</param>
        /// <param name="dataSetMaxCount">Нет доступной документации по метаданным.</param>
        /// <param name="chartType">Нет доступной документации по метаданным.</param>
        public int AddChart(global::System.String name, Nullable<global::System.Int32> width, Nullable<global::System.Int32> height, Nullable<global::System.Guid> dataOwnerID, global::System.String dataSetType, Nullable<global::System.Int32> dataSetMaxCount, global::System.String chartType)
        {
            ObjectParameter nameParameter;
            if (name != null)
            {
                nameParameter = new ObjectParameter("Name", name);
            }
            else
            {
                nameParameter = new ObjectParameter("Name", typeof(global::System.String));
            }
    
            ObjectParameter widthParameter;
            if (width.HasValue)
            {
                widthParameter = new ObjectParameter("Width", width);
            }
            else
            {
                widthParameter = new ObjectParameter("Width", typeof(global::System.Int32));
            }
    
            ObjectParameter heightParameter;
            if (height.HasValue)
            {
                heightParameter = new ObjectParameter("Height", height);
            }
            else
            {
                heightParameter = new ObjectParameter("Height", typeof(global::System.Int32));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            ObjectParameter dataSetTypeParameter;
            if (dataSetType != null)
            {
                dataSetTypeParameter = new ObjectParameter("DataSetType", dataSetType);
            }
            else
            {
                dataSetTypeParameter = new ObjectParameter("DataSetType", typeof(global::System.String));
            }
    
            ObjectParameter dataSetMaxCountParameter;
            if (dataSetMaxCount.HasValue)
            {
                dataSetMaxCountParameter = new ObjectParameter("DataSetMaxCount", dataSetMaxCount);
            }
            else
            {
                dataSetMaxCountParameter = new ObjectParameter("DataSetMaxCount", typeof(global::System.Int32));
            }
    
            ObjectParameter chartTypeParameter;
            if (chartType != null)
            {
                chartTypeParameter = new ObjectParameter("ChartType", chartType);
            }
            else
            {
                chartTypeParameter = new ObjectParameter("ChartType", typeof(global::System.String));
            }
    
            return base.ExecuteFunction("AddChart", nameParameter, widthParameter, heightParameter, dataOwnerIDParameter, dataSetTypeParameter, dataSetMaxCountParameter, chartTypeParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="deviceTypeID">Нет доступной документации по метаданным.</param>
        public ObjectResult<global::System.String> GetLogicalDeviceName(Nullable<global::System.Int64> deviceTypeID)
        {
            ObjectParameter deviceTypeIDParameter;
            if (deviceTypeID.HasValue)
            {
                deviceTypeIDParameter = new ObjectParameter("DeviceTypeID", deviceTypeID);
            }
            else
            {
                deviceTypeIDParameter = new ObjectParameter("DeviceTypeID", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<global::System.String>("GetLogicalDeviceName", deviceTypeIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="deviceTypeID">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public int CreateCustomDeviceType(Nullable<global::System.Int64> deviceTypeID, Nullable<global::System.Guid> dataOwnerID)
        {
            ObjectParameter deviceTypeIDParameter;
            if (deviceTypeID.HasValue)
            {
                deviceTypeIDParameter = new ObjectParameter("DeviceTypeID", deviceTypeID);
            }
            else
            {
                deviceTypeIDParameter = new ObjectParameter("DeviceTypeID", typeof(global::System.Int64));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction("CreateCustomDeviceType", deviceTypeIDParameter, dataOwnerIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="chartSetID">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public ObjectResult<ViewChartSetsCharts> GetChartSetCharts(Nullable<global::System.Int64> chartSetID, Nullable<global::System.Guid> dataOwnerID)
        {
            ObjectParameter chartSetIDParameter;
            if (chartSetID.HasValue)
            {
                chartSetIDParameter = new ObjectParameter("ChartSetID", chartSetID);
            }
            else
            {
                chartSetIDParameter = new ObjectParameter("ChartSetID", typeof(global::System.Int64));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<ViewChartSetsCharts>("GetChartSetCharts", chartSetIDParameter, dataOwnerIDParameter);
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="chartSetID">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public ObjectResult<ViewChartSetsCharts> GetChartSetCharts(Nullable<global::System.Int64> chartSetID, Nullable<global::System.Guid> dataOwnerID, MergeOption mergeOption)
        {
            ObjectParameter chartSetIDParameter;
            if (chartSetID.HasValue)
            {
                chartSetIDParameter = new ObjectParameter("ChartSetID", chartSetID);
            }
            else
            {
                chartSetIDParameter = new ObjectParameter("ChartSetID", typeof(global::System.Int64));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<ViewChartSetsCharts>("GetChartSetCharts", mergeOption, chartSetIDParameter, dataOwnerIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="elementInstanceName">Нет доступной документации по метаданным.</param>
        /// <param name="ownerID">Нет доступной документации по метаданным.</param>
        /// <param name="groupID">Нет доступной документации по метаданным.</param>
        /// <param name="locationID">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        /// <param name="chartID">Нет доступной документации по метаданным.</param>
        public ObjectResult<ViewElementFiltered> GetFilteredElements(global::System.String elementInstanceName, Nullable<global::System.Int64> ownerID, Nullable<global::System.Int64> groupID, Nullable<global::System.Int64> locationID, Nullable<global::System.Guid> dataOwnerID, Nullable<global::System.Int64> chartID)
        {
            ObjectParameter elementInstanceNameParameter;
            if (elementInstanceName != null)
            {
                elementInstanceNameParameter = new ObjectParameter("ElementInstanceName", elementInstanceName);
            }
            else
            {
                elementInstanceNameParameter = new ObjectParameter("ElementInstanceName", typeof(global::System.String));
            }
    
            ObjectParameter ownerIDParameter;
            if (ownerID.HasValue)
            {
                ownerIDParameter = new ObjectParameter("OwnerID", ownerID);
            }
            else
            {
                ownerIDParameter = new ObjectParameter("OwnerID", typeof(global::System.Int64));
            }
    
            ObjectParameter groupIDParameter;
            if (groupID.HasValue)
            {
                groupIDParameter = new ObjectParameter("GroupID", groupID);
            }
            else
            {
                groupIDParameter = new ObjectParameter("GroupID", typeof(global::System.Int64));
            }
    
            ObjectParameter locationIDParameter;
            if (locationID.HasValue)
            {
                locationIDParameter = new ObjectParameter("LocationID", locationID);
            }
            else
            {
                locationIDParameter = new ObjectParameter("LocationID", typeof(global::System.Int64));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            ObjectParameter chartIDParameter;
            if (chartID.HasValue)
            {
                chartIDParameter = new ObjectParameter("ChartID", chartID);
            }
            else
            {
                chartIDParameter = new ObjectParameter("ChartID", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<ViewElementFiltered>("GetFilteredElements", elementInstanceNameParameter, ownerIDParameter, groupIDParameter, locationIDParameter, dataOwnerIDParameter, chartIDParameter);
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="elementInstanceName">Нет доступной документации по метаданным.</param>
        /// <param name="ownerID">Нет доступной документации по метаданным.</param>
        /// <param name="groupID">Нет доступной документации по метаданным.</param>
        /// <param name="locationID">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        /// <param name="chartID">Нет доступной документации по метаданным.</param>
        public ObjectResult<ViewElementFiltered> GetFilteredElements(global::System.String elementInstanceName, Nullable<global::System.Int64> ownerID, Nullable<global::System.Int64> groupID, Nullable<global::System.Int64> locationID, Nullable<global::System.Guid> dataOwnerID, Nullable<global::System.Int64> chartID, MergeOption mergeOption)
        {
            ObjectParameter elementInstanceNameParameter;
            if (elementInstanceName != null)
            {
                elementInstanceNameParameter = new ObjectParameter("ElementInstanceName", elementInstanceName);
            }
            else
            {
                elementInstanceNameParameter = new ObjectParameter("ElementInstanceName", typeof(global::System.String));
            }
    
            ObjectParameter ownerIDParameter;
            if (ownerID.HasValue)
            {
                ownerIDParameter = new ObjectParameter("OwnerID", ownerID);
            }
            else
            {
                ownerIDParameter = new ObjectParameter("OwnerID", typeof(global::System.Int64));
            }
    
            ObjectParameter groupIDParameter;
            if (groupID.HasValue)
            {
                groupIDParameter = new ObjectParameter("GroupID", groupID);
            }
            else
            {
                groupIDParameter = new ObjectParameter("GroupID", typeof(global::System.Int64));
            }
    
            ObjectParameter locationIDParameter;
            if (locationID.HasValue)
            {
                locationIDParameter = new ObjectParameter("LocationID", locationID);
            }
            else
            {
                locationIDParameter = new ObjectParameter("LocationID", typeof(global::System.Int64));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            ObjectParameter chartIDParameter;
            if (chartID.HasValue)
            {
                chartIDParameter = new ObjectParameter("ChartID", chartID);
            }
            else
            {
                chartIDParameter = new ObjectParameter("ChartID", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<ViewElementFiltered>("GetFilteredElements", mergeOption, elementInstanceNameParameter, ownerIDParameter, groupIDParameter, locationIDParameter, dataOwnerIDParameter, chartIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="deviceDescription">Нет доступной документации по метаданным.</param>
        /// <param name="ownerID">Нет доступной документации по метаданным.</param>
        /// <param name="groupID">Нет доступной документации по метаданным.</param>
        /// <param name="locationID">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        /// <param name="chartID">Нет доступной документации по метаданным.</param>
        public ObjectResult<ViewElementFiltered> GetFilteredByDeviceTypeElements(global::System.String deviceDescription, Nullable<global::System.Int64> ownerID, Nullable<global::System.Int64> groupID, Nullable<global::System.Int64> locationID, Nullable<global::System.Guid> dataOwnerID, Nullable<global::System.Int64> chartID)
        {
            ObjectParameter deviceDescriptionParameter;
            if (deviceDescription != null)
            {
                deviceDescriptionParameter = new ObjectParameter("DeviceDescription", deviceDescription);
            }
            else
            {
                deviceDescriptionParameter = new ObjectParameter("DeviceDescription", typeof(global::System.String));
            }
    
            ObjectParameter ownerIDParameter;
            if (ownerID.HasValue)
            {
                ownerIDParameter = new ObjectParameter("OwnerID", ownerID);
            }
            else
            {
                ownerIDParameter = new ObjectParameter("OwnerID", typeof(global::System.Int64));
            }
    
            ObjectParameter groupIDParameter;
            if (groupID.HasValue)
            {
                groupIDParameter = new ObjectParameter("GroupID", groupID);
            }
            else
            {
                groupIDParameter = new ObjectParameter("GroupID", typeof(global::System.Int64));
            }
    
            ObjectParameter locationIDParameter;
            if (locationID.HasValue)
            {
                locationIDParameter = new ObjectParameter("LocationID", locationID);
            }
            else
            {
                locationIDParameter = new ObjectParameter("LocationID", typeof(global::System.Int64));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            ObjectParameter chartIDParameter;
            if (chartID.HasValue)
            {
                chartIDParameter = new ObjectParameter("ChartID", chartID);
            }
            else
            {
                chartIDParameter = new ObjectParameter("ChartID", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<ViewElementFiltered>("GetFilteredByDeviceTypeElements", deviceDescriptionParameter, ownerIDParameter, groupIDParameter, locationIDParameter, dataOwnerIDParameter, chartIDParameter);
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="deviceDescription">Нет доступной документации по метаданным.</param>
        /// <param name="ownerID">Нет доступной документации по метаданным.</param>
        /// <param name="groupID">Нет доступной документации по метаданным.</param>
        /// <param name="locationID">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        /// <param name="chartID">Нет доступной документации по метаданным.</param>
        public ObjectResult<ViewElementFiltered> GetFilteredByDeviceTypeElements(global::System.String deviceDescription, Nullable<global::System.Int64> ownerID, Nullable<global::System.Int64> groupID, Nullable<global::System.Int64> locationID, Nullable<global::System.Guid> dataOwnerID, Nullable<global::System.Int64> chartID, MergeOption mergeOption)
        {
            ObjectParameter deviceDescriptionParameter;
            if (deviceDescription != null)
            {
                deviceDescriptionParameter = new ObjectParameter("DeviceDescription", deviceDescription);
            }
            else
            {
                deviceDescriptionParameter = new ObjectParameter("DeviceDescription", typeof(global::System.String));
            }
    
            ObjectParameter ownerIDParameter;
            if (ownerID.HasValue)
            {
                ownerIDParameter = new ObjectParameter("OwnerID", ownerID);
            }
            else
            {
                ownerIDParameter = new ObjectParameter("OwnerID", typeof(global::System.Int64));
            }
    
            ObjectParameter groupIDParameter;
            if (groupID.HasValue)
            {
                groupIDParameter = new ObjectParameter("GroupID", groupID);
            }
            else
            {
                groupIDParameter = new ObjectParameter("GroupID", typeof(global::System.Int64));
            }
    
            ObjectParameter locationIDParameter;
            if (locationID.HasValue)
            {
                locationIDParameter = new ObjectParameter("LocationID", locationID);
            }
            else
            {
                locationIDParameter = new ObjectParameter("LocationID", typeof(global::System.Int64));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            ObjectParameter chartIDParameter;
            if (chartID.HasValue)
            {
                chartIDParameter = new ObjectParameter("ChartID", chartID);
            }
            else
            {
                chartIDParameter = new ObjectParameter("ChartID", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<ViewElementFiltered>("GetFilteredByDeviceTypeElements", mergeOption, deviceDescriptionParameter, ownerIDParameter, groupIDParameter, locationIDParameter, dataOwnerIDParameter, chartIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public ObjectResult<ViewElementGroup> GetElementGroups(Nullable<global::System.Guid> dataOwnerID)
        {
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<ViewElementGroup>("GetElementGroups", dataOwnerIDParameter);
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public ObjectResult<ViewElementGroup> GetElementGroups(Nullable<global::System.Guid> dataOwnerID, MergeOption mergeOption)
        {
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<ViewElementGroup>("GetElementGroups", mergeOption, dataOwnerIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public ObjectResult<ViewElementLocation> GetElementLocations(Nullable<global::System.Guid> dataOwnerID)
        {
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<ViewElementLocation>("GetElementLocations", dataOwnerIDParameter);
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public ObjectResult<ViewElementLocation> GetElementLocations(Nullable<global::System.Guid> dataOwnerID, MergeOption mergeOption)
        {
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<ViewElementLocation>("GetElementLocations", mergeOption, dataOwnerIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public ObjectResult<ViewElementOwner> GetElementOwners(Nullable<global::System.Guid> dataOwnerID)
        {
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<ViewElementOwner>("GetElementOwners", dataOwnerIDParameter);
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public ObjectResult<ViewElementOwner> GetElementOwners(Nullable<global::System.Guid> dataOwnerID, MergeOption mergeOption)
        {
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<ViewElementOwner>("GetElementOwners", mergeOption, dataOwnerIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="chartID">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        /// <param name="lastPointCount">Нет доступной документации по метаданным.</param>
        public ObjectResult<ViewFile> GetPointsVsAcqTime_Stat_Last(Nullable<global::System.Int64> chartID, Nullable<global::System.Guid> dataOwnerID, Nullable<global::System.Int64> lastPointCount)
        {
            ObjectParameter chartIDParameter;
            if (chartID.HasValue)
            {
                chartIDParameter = new ObjectParameter("ChartID", chartID);
            }
            else
            {
                chartIDParameter = new ObjectParameter("ChartID", typeof(global::System.Int64));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            ObjectParameter lastPointCountParameter;
            if (lastPointCount.HasValue)
            {
                lastPointCountParameter = new ObjectParameter("LastPointCount", lastPointCount);
            }
            else
            {
                lastPointCountParameter = new ObjectParameter("LastPointCount", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<ViewFile>("GetPointsVsAcqTime_Stat_Last", chartIDParameter, dataOwnerIDParameter, lastPointCountParameter);
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="chartID">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        /// <param name="lastPointCount">Нет доступной документации по метаданным.</param>
        public ObjectResult<ViewFile> GetPointsVsAcqTime_Stat_Last(Nullable<global::System.Int64> chartID, Nullable<global::System.Guid> dataOwnerID, Nullable<global::System.Int64> lastPointCount, MergeOption mergeOption)
        {
            ObjectParameter chartIDParameter;
            if (chartID.HasValue)
            {
                chartIDParameter = new ObjectParameter("ChartID", chartID);
            }
            else
            {
                chartIDParameter = new ObjectParameter("ChartID", typeof(global::System.Int64));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            ObjectParameter lastPointCountParameter;
            if (lastPointCount.HasValue)
            {
                lastPointCountParameter = new ObjectParameter("LastPointCount", lastPointCount);
            }
            else
            {
                lastPointCountParameter = new ObjectParameter("LastPointCount", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<ViewFile>("GetPointsVsAcqTime_Stat_Last", mergeOption, chartIDParameter, dataOwnerIDParameter, lastPointCountParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="iD">Нет доступной документации по метаданным.</param>
        /// <param name="minutesE">Нет доступной документации по метаданным.</param>
        /// <param name="minutesG">Нет доступной документации по метаданным.</param>
        /// <param name="minMode">Нет доступной документации по метаданным.</param>
        /// <param name="hoursE">Нет доступной документации по метаданным.</param>
        /// <param name="hoursG">Нет доступной документации по метаданным.</param>
        /// <param name="hourMode">Нет доступной документации по метаданным.</param>
        /// <param name="daysE">Нет доступной документации по метаданным.</param>
        /// <param name="daysG">Нет доступной документации по метаданным.</param>
        /// <param name="dayMode">Нет доступной документации по метаданным.</param>
        /// <param name="weeksG">Нет доступной документации по метаданным.</param>
        /// <param name="weekMode">Нет доступной документации по метаданным.</param>
        /// <param name="monday">Нет доступной документации по метаданным.</param>
        /// <param name="tuesday">Нет доступной документации по метаданным.</param>
        /// <param name="wednesday">Нет доступной документации по метаданным.</param>
        /// <param name="thursday">Нет доступной документации по метаданным.</param>
        /// <param name="friday">Нет доступной документации по метаданным.</param>
        /// <param name="saturday">Нет доступной документации по метаданным.</param>
        /// <param name="sunday">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        /// <param name="name">Нет доступной документации по метаданным.</param>
        public int UpdateGroup(Nullable<global::System.Int64> iD, Nullable<global::System.Byte> minutesE, Nullable<global::System.Byte> minutesG, global::System.String minMode, Nullable<global::System.Byte> hoursE, Nullable<global::System.Byte> hoursG, global::System.String hourMode, Nullable<global::System.Byte> daysE, Nullable<global::System.Byte> daysG, global::System.String dayMode, Nullable<global::System.Byte> weeksG, global::System.String weekMode, Nullable<global::System.Boolean> monday, Nullable<global::System.Boolean> tuesday, Nullable<global::System.Boolean> wednesday, Nullable<global::System.Boolean> thursday, Nullable<global::System.Boolean> friday, Nullable<global::System.Boolean> saturday, Nullable<global::System.Boolean> sunday, Nullable<global::System.Guid> dataOwnerID, global::System.String name)
        {
            ObjectParameter iDParameter;
            if (iD.HasValue)
            {
                iDParameter = new ObjectParameter("ID", iD);
            }
            else
            {
                iDParameter = new ObjectParameter("ID", typeof(global::System.Int64));
            }
    
            ObjectParameter minutesEParameter;
            if (minutesE.HasValue)
            {
                minutesEParameter = new ObjectParameter("MinutesE", minutesE);
            }
            else
            {
                minutesEParameter = new ObjectParameter("MinutesE", typeof(global::System.Byte));
            }
    
            ObjectParameter minutesGParameter;
            if (minutesG.HasValue)
            {
                minutesGParameter = new ObjectParameter("MinutesG", minutesG);
            }
            else
            {
                minutesGParameter = new ObjectParameter("MinutesG", typeof(global::System.Byte));
            }
    
            ObjectParameter minModeParameter;
            if (minMode != null)
            {
                minModeParameter = new ObjectParameter("MinMode", minMode);
            }
            else
            {
                minModeParameter = new ObjectParameter("MinMode", typeof(global::System.String));
            }
    
            ObjectParameter hoursEParameter;
            if (hoursE.HasValue)
            {
                hoursEParameter = new ObjectParameter("HoursE", hoursE);
            }
            else
            {
                hoursEParameter = new ObjectParameter("HoursE", typeof(global::System.Byte));
            }
    
            ObjectParameter hoursGParameter;
            if (hoursG.HasValue)
            {
                hoursGParameter = new ObjectParameter("HoursG", hoursG);
            }
            else
            {
                hoursGParameter = new ObjectParameter("HoursG", typeof(global::System.Byte));
            }
    
            ObjectParameter hourModeParameter;
            if (hourMode != null)
            {
                hourModeParameter = new ObjectParameter("HourMode", hourMode);
            }
            else
            {
                hourModeParameter = new ObjectParameter("HourMode", typeof(global::System.String));
            }
    
            ObjectParameter daysEParameter;
            if (daysE.HasValue)
            {
                daysEParameter = new ObjectParameter("DaysE", daysE);
            }
            else
            {
                daysEParameter = new ObjectParameter("DaysE", typeof(global::System.Byte));
            }
    
            ObjectParameter daysGParameter;
            if (daysG.HasValue)
            {
                daysGParameter = new ObjectParameter("DaysG", daysG);
            }
            else
            {
                daysGParameter = new ObjectParameter("DaysG", typeof(global::System.Byte));
            }
    
            ObjectParameter dayModeParameter;
            if (dayMode != null)
            {
                dayModeParameter = new ObjectParameter("DayMode", dayMode);
            }
            else
            {
                dayModeParameter = new ObjectParameter("DayMode", typeof(global::System.String));
            }
    
            ObjectParameter weeksGParameter;
            if (weeksG.HasValue)
            {
                weeksGParameter = new ObjectParameter("WeeksG", weeksG);
            }
            else
            {
                weeksGParameter = new ObjectParameter("WeeksG", typeof(global::System.Byte));
            }
    
            ObjectParameter weekModeParameter;
            if (weekMode != null)
            {
                weekModeParameter = new ObjectParameter("WeekMode", weekMode);
            }
            else
            {
                weekModeParameter = new ObjectParameter("WeekMode", typeof(global::System.String));
            }
    
            ObjectParameter mondayParameter;
            if (monday.HasValue)
            {
                mondayParameter = new ObjectParameter("Monday", monday);
            }
            else
            {
                mondayParameter = new ObjectParameter("Monday", typeof(global::System.Boolean));
            }
    
            ObjectParameter tuesdayParameter;
            if (tuesday.HasValue)
            {
                tuesdayParameter = new ObjectParameter("Tuesday", tuesday);
            }
            else
            {
                tuesdayParameter = new ObjectParameter("Tuesday", typeof(global::System.Boolean));
            }
    
            ObjectParameter wednesdayParameter;
            if (wednesday.HasValue)
            {
                wednesdayParameter = new ObjectParameter("Wednesday", wednesday);
            }
            else
            {
                wednesdayParameter = new ObjectParameter("Wednesday", typeof(global::System.Boolean));
            }
    
            ObjectParameter thursdayParameter;
            if (thursday.HasValue)
            {
                thursdayParameter = new ObjectParameter("Thursday", thursday);
            }
            else
            {
                thursdayParameter = new ObjectParameter("Thursday", typeof(global::System.Boolean));
            }
    
            ObjectParameter fridayParameter;
            if (friday.HasValue)
            {
                fridayParameter = new ObjectParameter("Friday", friday);
            }
            else
            {
                fridayParameter = new ObjectParameter("Friday", typeof(global::System.Boolean));
            }
    
            ObjectParameter saturdayParameter;
            if (saturday.HasValue)
            {
                saturdayParameter = new ObjectParameter("Saturday", saturday);
            }
            else
            {
                saturdayParameter = new ObjectParameter("Saturday", typeof(global::System.Boolean));
            }
    
            ObjectParameter sundayParameter;
            if (sunday.HasValue)
            {
                sundayParameter = new ObjectParameter("Sunday", sunday);
            }
            else
            {
                sundayParameter = new ObjectParameter("Sunday", typeof(global::System.Boolean));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            ObjectParameter nameParameter;
            if (name != null)
            {
                nameParameter = new ObjectParameter("Name", name);
            }
            else
            {
                nameParameter = new ObjectParameter("Name", typeof(global::System.String));
            }
    
            return base.ExecuteFunction("UpdateGroup", iDParameter, minutesEParameter, minutesGParameter, minModeParameter, hoursEParameter, hoursGParameter, hourModeParameter, daysEParameter, daysGParameter, dayModeParameter, weeksGParameter, weekModeParameter, mondayParameter, tuesdayParameter, wednesdayParameter, thursdayParameter, fridayParameter, saturdayParameter, sundayParameter, dataOwnerIDParameter, nameParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="chartID">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public ObjectResult<ViewSeries> GetSnapshotSerieList(Nullable<global::System.Int64> chartID, Nullable<global::System.Guid> dataOwnerID)
        {
            ObjectParameter chartIDParameter;
            if (chartID.HasValue)
            {
                chartIDParameter = new ObjectParameter("ChartID", chartID);
            }
            else
            {
                chartIDParameter = new ObjectParameter("ChartID", typeof(global::System.Int64));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<ViewSeries>("GetSnapshotSerieList", chartIDParameter, dataOwnerIDParameter);
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="chartID">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public ObjectResult<ViewSeries> GetSnapshotSerieList(Nullable<global::System.Int64> chartID, Nullable<global::System.Guid> dataOwnerID, MergeOption mergeOption)
        {
            ObjectParameter chartIDParameter;
            if (chartID.HasValue)
            {
                chartIDParameter = new ObjectParameter("ChartID", chartID);
            }
            else
            {
                chartIDParameter = new ObjectParameter("ChartID", typeof(global::System.Int64));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<ViewSeries>("GetSnapshotSerieList", mergeOption, chartIDParameter, dataOwnerIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="serieID">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public ObjectResult<ViewFile> GetFirstSnapshotAsXML(Nullable<global::System.Guid> serieID, Nullable<global::System.Guid> dataOwnerID)
        {
            ObjectParameter serieIDParameter;
            if (serieID.HasValue)
            {
                serieIDParameter = new ObjectParameter("SerieID", serieID);
            }
            else
            {
                serieIDParameter = new ObjectParameter("SerieID", typeof(global::System.Guid));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<ViewFile>("GetFirstSnapshotAsXML", serieIDParameter, dataOwnerIDParameter);
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="serieID">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public ObjectResult<ViewFile> GetFirstSnapshotAsXML(Nullable<global::System.Guid> serieID, Nullable<global::System.Guid> dataOwnerID, MergeOption mergeOption)
        {
            ObjectParameter serieIDParameter;
            if (serieID.HasValue)
            {
                serieIDParameter = new ObjectParameter("SerieID", serieID);
            }
            else
            {
                serieIDParameter = new ObjectParameter("SerieID", typeof(global::System.Guid));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<ViewFile>("GetFirstSnapshotAsXML", mergeOption, serieIDParameter, dataOwnerIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="serieID">Нет доступной документации по метаданным.</param>
        /// <param name="snapshotID">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public ObjectResult<ViewFile> GetNextSnapshotAsXML(Nullable<global::System.Guid> serieID, Nullable<global::System.Int64> snapshotID, Nullable<global::System.Guid> dataOwnerID)
        {
            ObjectParameter serieIDParameter;
            if (serieID.HasValue)
            {
                serieIDParameter = new ObjectParameter("SerieID", serieID);
            }
            else
            {
                serieIDParameter = new ObjectParameter("SerieID", typeof(global::System.Guid));
            }
    
            ObjectParameter snapshotIDParameter;
            if (snapshotID.HasValue)
            {
                snapshotIDParameter = new ObjectParameter("SnapshotID", snapshotID);
            }
            else
            {
                snapshotIDParameter = new ObjectParameter("SnapshotID", typeof(global::System.Int64));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<ViewFile>("GetNextSnapshotAsXML", serieIDParameter, snapshotIDParameter, dataOwnerIDParameter);
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="serieID">Нет доступной документации по метаданным.</param>
        /// <param name="snapshotID">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public ObjectResult<ViewFile> GetNextSnapshotAsXML(Nullable<global::System.Guid> serieID, Nullable<global::System.Int64> snapshotID, Nullable<global::System.Guid> dataOwnerID, MergeOption mergeOption)
        {
            ObjectParameter serieIDParameter;
            if (serieID.HasValue)
            {
                serieIDParameter = new ObjectParameter("SerieID", serieID);
            }
            else
            {
                serieIDParameter = new ObjectParameter("SerieID", typeof(global::System.Guid));
            }
    
            ObjectParameter snapshotIDParameter;
            if (snapshotID.HasValue)
            {
                snapshotIDParameter = new ObjectParameter("SnapshotID", snapshotID);
            }
            else
            {
                snapshotIDParameter = new ObjectParameter("SnapshotID", typeof(global::System.Int64));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<ViewFile>("GetNextSnapshotAsXML", mergeOption, serieIDParameter, snapshotIDParameter, dataOwnerIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="serieID">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public ObjectResult<ViewFile> GetLastSnapshotAsXML(Nullable<global::System.Guid> serieID, Nullable<global::System.Guid> dataOwnerID)
        {
            ObjectParameter serieIDParameter;
            if (serieID.HasValue)
            {
                serieIDParameter = new ObjectParameter("SerieID", serieID);
            }
            else
            {
                serieIDParameter = new ObjectParameter("SerieID", typeof(global::System.Guid));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<ViewFile>("GetLastSnapshotAsXML", serieIDParameter, dataOwnerIDParameter);
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="serieID">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public ObjectResult<ViewFile> GetLastSnapshotAsXML(Nullable<global::System.Guid> serieID, Nullable<global::System.Guid> dataOwnerID, MergeOption mergeOption)
        {
            ObjectParameter serieIDParameter;
            if (serieID.HasValue)
            {
                serieIDParameter = new ObjectParameter("SerieID", serieID);
            }
            else
            {
                serieIDParameter = new ObjectParameter("SerieID", typeof(global::System.Guid));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<ViewFile>("GetLastSnapshotAsXML", mergeOption, serieIDParameter, dataOwnerIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="serieID">Нет доступной документации по метаданным.</param>
        /// <param name="snapshotID">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public ObjectResult<ViewFile> GetPrevSnapshotAsXML(Nullable<global::System.Guid> serieID, Nullable<global::System.Int64> snapshotID, Nullable<global::System.Guid> dataOwnerID)
        {
            ObjectParameter serieIDParameter;
            if (serieID.HasValue)
            {
                serieIDParameter = new ObjectParameter("SerieID", serieID);
            }
            else
            {
                serieIDParameter = new ObjectParameter("SerieID", typeof(global::System.Guid));
            }
    
            ObjectParameter snapshotIDParameter;
            if (snapshotID.HasValue)
            {
                snapshotIDParameter = new ObjectParameter("SnapshotID", snapshotID);
            }
            else
            {
                snapshotIDParameter = new ObjectParameter("SnapshotID", typeof(global::System.Int64));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<ViewFile>("GetPrevSnapshotAsXML", serieIDParameter, snapshotIDParameter, dataOwnerIDParameter);
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="serieID">Нет доступной документации по метаданным.</param>
        /// <param name="snapshotID">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public ObjectResult<ViewFile> GetPrevSnapshotAsXML(Nullable<global::System.Guid> serieID, Nullable<global::System.Int64> snapshotID, Nullable<global::System.Guid> dataOwnerID, MergeOption mergeOption)
        {
            ObjectParameter serieIDParameter;
            if (serieID.HasValue)
            {
                serieIDParameter = new ObjectParameter("SerieID", serieID);
            }
            else
            {
                serieIDParameter = new ObjectParameter("SerieID", typeof(global::System.Guid));
            }
    
            ObjectParameter snapshotIDParameter;
            if (snapshotID.HasValue)
            {
                snapshotIDParameter = new ObjectParameter("SnapshotID", snapshotID);
            }
            else
            {
                snapshotIDParameter = new ObjectParameter("SnapshotID", typeof(global::System.Int64));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<ViewFile>("GetPrevSnapshotAsXML", mergeOption, serieIDParameter, snapshotIDParameter, dataOwnerIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="docID">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public ObjectResult<global::System.String> ExportSVGElements(Nullable<global::System.Int64> docID, Nullable<global::System.Guid> dataOwnerID)
        {
            ObjectParameter docIDParameter;
            if (docID.HasValue)
            {
                docIDParameter = new ObjectParameter("DocID", docID);
            }
            else
            {
                docIDParameter = new ObjectParameter("DocID", typeof(global::System.Int64));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<global::System.String>("ExportSVGElements", docIDParameter, dataOwnerIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="docID">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public ObjectResult<global::System.String> ExportDataElementStates(Nullable<global::System.Int64> docID, Nullable<global::System.Guid> dataOwnerID)
        {
            ObjectParameter docIDParameter;
            if (docID.HasValue)
            {
                docIDParameter = new ObjectParameter("DocID", docID);
            }
            else
            {
                docIDParameter = new ObjectParameter("DocID", typeof(global::System.Int64));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<global::System.String>("ExportDataElementStates", docIDParameter, dataOwnerIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="chartID">Нет доступной документации по метаданным.</param>
        /// <param name="srcFileName">Нет доступной документации по метаданным.</param>
        /// <param name="processedFileName">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public int PutSVGIntoBase(Nullable<global::System.Int64> chartID, global::System.String srcFileName, global::System.String processedFileName, Nullable<global::System.Guid> dataOwnerID)
        {
            ObjectParameter chartIDParameter;
            if (chartID.HasValue)
            {
                chartIDParameter = new ObjectParameter("ChartID", chartID);
            }
            else
            {
                chartIDParameter = new ObjectParameter("ChartID", typeof(global::System.Int64));
            }
    
            ObjectParameter srcFileNameParameter;
            if (srcFileName != null)
            {
                srcFileNameParameter = new ObjectParameter("SrcFileName", srcFileName);
            }
            else
            {
                srcFileNameParameter = new ObjectParameter("SrcFileName", typeof(global::System.String));
            }
    
            ObjectParameter processedFileNameParameter;
            if (processedFileName != null)
            {
                processedFileNameParameter = new ObjectParameter("ProcessedFileName", processedFileName);
            }
            else
            {
                processedFileNameParameter = new ObjectParameter("ProcessedFileName", typeof(global::System.String));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction("PutSVGIntoBase", chartIDParameter, srcFileNameParameter, processedFileNameParameter, dataOwnerIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="lowLimit">Нет доступной документации по метаданным.</param>
        /// <param name="state">Нет доступной документации по метаданным.</param>
        /// <param name="docID">Нет доступной документации по метаданным.</param>
        /// <param name="valueIdentifier">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public ObjectResult<Nullable<global::System.Int64>> AddDataElementSate(Nullable<global::System.Decimal> lowLimit, global::System.String state, Nullable<global::System.Int64> docID, Nullable<global::System.Guid> valueIdentifier, Nullable<global::System.Guid> dataOwnerID)
        {
            ObjectParameter lowLimitParameter;
            if (lowLimit.HasValue)
            {
                lowLimitParameter = new ObjectParameter("LowLimit", lowLimit);
            }
            else
            {
                lowLimitParameter = new ObjectParameter("LowLimit", typeof(global::System.Decimal));
            }
    
            ObjectParameter stateParameter;
            if (state != null)
            {
                stateParameter = new ObjectParameter("State", state);
            }
            else
            {
                stateParameter = new ObjectParameter("State", typeof(global::System.String));
            }
    
            ObjectParameter docIDParameter;
            if (docID.HasValue)
            {
                docIDParameter = new ObjectParameter("DocID", docID);
            }
            else
            {
                docIDParameter = new ObjectParameter("DocID", typeof(global::System.Int64));
            }
    
            ObjectParameter valueIdentifierParameter;
            if (valueIdentifier.HasValue)
            {
                valueIdentifierParameter = new ObjectParameter("ValueIdentifier", valueIdentifier);
            }
            else
            {
                valueIdentifierParameter = new ObjectParameter("ValueIdentifier", typeof(global::System.Guid));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<Nullable<global::System.Int64>>("AddDataElementSate", lowLimitParameter, stateParameter, docIDParameter, valueIdentifierParameter, dataOwnerIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="sVGID">Нет доступной документации по метаданным.</param>
        /// <param name="valueIdentifier">Нет доступной документации по метаданным.</param>
        /// <param name="state">Нет доступной документации по метаданным.</param>
        /// <param name="docID">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        /// <param name="identifier">Нет доступной документации по метаданным.</param>
        public int SetDataElementState(global::System.String sVGID, global::System.String valueIdentifier, global::System.String state, Nullable<global::System.Int64> docID, Nullable<global::System.Guid> dataOwnerID, global::System.String identifier)
        {
            ObjectParameter sVGIDParameter;
            if (sVGID != null)
            {
                sVGIDParameter = new ObjectParameter("SVGID", sVGID);
            }
            else
            {
                sVGIDParameter = new ObjectParameter("SVGID", typeof(global::System.String));
            }
    
            ObjectParameter valueIdentifierParameter;
            if (valueIdentifier != null)
            {
                valueIdentifierParameter = new ObjectParameter("ValueIdentifier", valueIdentifier);
            }
            else
            {
                valueIdentifierParameter = new ObjectParameter("ValueIdentifier", typeof(global::System.String));
            }
    
            ObjectParameter stateParameter;
            if (state != null)
            {
                stateParameter = new ObjectParameter("State", state);
            }
            else
            {
                stateParameter = new ObjectParameter("State", typeof(global::System.String));
            }
    
            ObjectParameter docIDParameter;
            if (docID.HasValue)
            {
                docIDParameter = new ObjectParameter("DocID", docID);
            }
            else
            {
                docIDParameter = new ObjectParameter("DocID", typeof(global::System.Int64));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            ObjectParameter identifierParameter;
            if (identifier != null)
            {
                identifierParameter = new ObjectParameter("Identifier", identifier);
            }
            else
            {
                identifierParameter = new ObjectParameter("Identifier", typeof(global::System.String));
            }
    
            return base.ExecuteFunction("SetDataElementState", sVGIDParameter, valueIdentifierParameter, stateParameter, docIDParameter, dataOwnerIDParameter, identifierParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="iD">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public int DeleteDataElementState(Nullable<global::System.Int64> iD, Nullable<global::System.Guid> dataOwnerID)
        {
            ObjectParameter iDParameter;
            if (iD.HasValue)
            {
                iDParameter = new ObjectParameter("ID", iD);
            }
            else
            {
                iDParameter = new ObjectParameter("ID", typeof(global::System.Int64));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction("DeleteDataElementState", iDParameter, dataOwnerIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="iD">Нет доступной документации по метаданным.</param>
        /// <param name="lowLimit">Нет доступной документации по метаданным.</param>
        /// <param name="state">Нет доступной документации по метаданным.</param>
        /// <param name="docID">Нет доступной документации по метаданным.</param>
        /// <param name="valueIdentifier">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public int UpdateDataElementState(Nullable<global::System.Int64> iD, Nullable<global::System.Decimal> lowLimit, global::System.String state, Nullable<global::System.Int64> docID, Nullable<global::System.Guid> valueIdentifier, Nullable<global::System.Guid> dataOwnerID)
        {
            ObjectParameter iDParameter;
            if (iD.HasValue)
            {
                iDParameter = new ObjectParameter("ID", iD);
            }
            else
            {
                iDParameter = new ObjectParameter("ID", typeof(global::System.Int64));
            }
    
            ObjectParameter lowLimitParameter;
            if (lowLimit.HasValue)
            {
                lowLimitParameter = new ObjectParameter("LowLimit", lowLimit);
            }
            else
            {
                lowLimitParameter = new ObjectParameter("LowLimit", typeof(global::System.Decimal));
            }
    
            ObjectParameter stateParameter;
            if (state != null)
            {
                stateParameter = new ObjectParameter("State", state);
            }
            else
            {
                stateParameter = new ObjectParameter("State", typeof(global::System.String));
            }
    
            ObjectParameter docIDParameter;
            if (docID.HasValue)
            {
                docIDParameter = new ObjectParameter("DocID", docID);
            }
            else
            {
                docIDParameter = new ObjectParameter("DocID", typeof(global::System.Int64));
            }
    
            ObjectParameter valueIdentifierParameter;
            if (valueIdentifier.HasValue)
            {
                valueIdentifierParameter = new ObjectParameter("ValueIdentifier", valueIdentifier);
            }
            else
            {
                valueIdentifierParameter = new ObjectParameter("ValueIdentifier", typeof(global::System.Guid));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction("UpdateDataElementState", iDParameter, lowLimitParameter, stateParameter, docIDParameter, valueIdentifierParameter, dataOwnerIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="sVGID">Нет доступной документации по метаданным.</param>
        /// <param name="docID">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public int DetachDataElementState(global::System.String sVGID, Nullable<global::System.Int64> docID, Nullable<global::System.Guid> dataOwnerID)
        {
            ObjectParameter sVGIDParameter;
            if (sVGID != null)
            {
                sVGIDParameter = new ObjectParameter("SVGID", sVGID);
            }
            else
            {
                sVGIDParameter = new ObjectParameter("SVGID", typeof(global::System.String));
            }
    
            ObjectParameter docIDParameter;
            if (docID.HasValue)
            {
                docIDParameter = new ObjectParameter("DocID", docID);
            }
            else
            {
                docIDParameter = new ObjectParameter("DocID", typeof(global::System.Int64));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction("DetachDataElementState", sVGIDParameter, docIDParameter, dataOwnerIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="valueIdentifier">Нет доступной документации по метаданным.</param>
        /// <param name="units">Нет доступной документации по метаданным.</param>
        /// <param name="intValue">Нет доступной документации по метаданным.</param>
        /// <param name="stringValue">Нет доступной документации по метаданным.</param>
        /// <param name="intStatus">Нет доступной документации по метаданным.</param>
        /// <param name="year">Нет доступной документации по метаданным.</param>
        /// <param name="month">Нет доступной документации по метаданным.</param>
        /// <param name="dayOfMonth">Нет доступной документации по метаданным.</param>
        /// <param name="dayOfWeek">Нет доступной документации по метаданным.</param>
        /// <param name="hour">Нет доступной документации по метаданным.</param>
        /// <param name="minute">Нет доступной документации по метаданным.</param>
        /// <param name="second">Нет доступной документации по метаданным.</param>
        /// <param name="hundredthsOfSecond">Нет доступной документации по метаданным.</param>
        public int PutExtendedRegisterIntoBase(global::System.String valueIdentifier, global::System.String units, Nullable<global::System.Int32> intValue, global::System.String stringValue, Nullable<global::System.Int32> intStatus, Nullable<global::System.Int32> year, Nullable<global::System.Int32> month, Nullable<global::System.Int32> dayOfMonth, global::System.String dayOfWeek, Nullable<global::System.Int32> hour, Nullable<global::System.Int32> minute, Nullable<global::System.Int32> second, Nullable<global::System.Int32> hundredthsOfSecond)
        {
            ObjectParameter valueIdentifierParameter;
            if (valueIdentifier != null)
            {
                valueIdentifierParameter = new ObjectParameter("ValueIdentifier", valueIdentifier);
            }
            else
            {
                valueIdentifierParameter = new ObjectParameter("ValueIdentifier", typeof(global::System.String));
            }
    
            ObjectParameter unitsParameter;
            if (units != null)
            {
                unitsParameter = new ObjectParameter("Units", units);
            }
            else
            {
                unitsParameter = new ObjectParameter("Units", typeof(global::System.String));
            }
    
            ObjectParameter intValueParameter;
            if (intValue.HasValue)
            {
                intValueParameter = new ObjectParameter("IntValue", intValue);
            }
            else
            {
                intValueParameter = new ObjectParameter("IntValue", typeof(global::System.Int32));
            }
    
            ObjectParameter stringValueParameter;
            if (stringValue != null)
            {
                stringValueParameter = new ObjectParameter("StringValue", stringValue);
            }
            else
            {
                stringValueParameter = new ObjectParameter("StringValue", typeof(global::System.String));
            }
    
            ObjectParameter intStatusParameter;
            if (intStatus.HasValue)
            {
                intStatusParameter = new ObjectParameter("IntStatus", intStatus);
            }
            else
            {
                intStatusParameter = new ObjectParameter("IntStatus", typeof(global::System.Int32));
            }
    
            ObjectParameter yearParameter;
            if (year.HasValue)
            {
                yearParameter = new ObjectParameter("Year", year);
            }
            else
            {
                yearParameter = new ObjectParameter("Year", typeof(global::System.Int32));
            }
    
            ObjectParameter monthParameter;
            if (month.HasValue)
            {
                monthParameter = new ObjectParameter("Month", month);
            }
            else
            {
                monthParameter = new ObjectParameter("Month", typeof(global::System.Int32));
            }
    
            ObjectParameter dayOfMonthParameter;
            if (dayOfMonth.HasValue)
            {
                dayOfMonthParameter = new ObjectParameter("DayOfMonth", dayOfMonth);
            }
            else
            {
                dayOfMonthParameter = new ObjectParameter("DayOfMonth", typeof(global::System.Int32));
            }
    
            ObjectParameter dayOfWeekParameter;
            if (dayOfWeek != null)
            {
                dayOfWeekParameter = new ObjectParameter("DayOfWeek", dayOfWeek);
            }
            else
            {
                dayOfWeekParameter = new ObjectParameter("DayOfWeek", typeof(global::System.String));
            }
    
            ObjectParameter hourParameter;
            if (hour.HasValue)
            {
                hourParameter = new ObjectParameter("Hour", hour);
            }
            else
            {
                hourParameter = new ObjectParameter("Hour", typeof(global::System.Int32));
            }
    
            ObjectParameter minuteParameter;
            if (minute.HasValue)
            {
                minuteParameter = new ObjectParameter("Minute", minute);
            }
            else
            {
                minuteParameter = new ObjectParameter("Minute", typeof(global::System.Int32));
            }
    
            ObjectParameter secondParameter;
            if (second.HasValue)
            {
                secondParameter = new ObjectParameter("Second", second);
            }
            else
            {
                secondParameter = new ObjectParameter("Second", typeof(global::System.Int32));
            }
    
            ObjectParameter hundredthsOfSecondParameter;
            if (hundredthsOfSecond.HasValue)
            {
                hundredthsOfSecondParameter = new ObjectParameter("HundredthsOfSecond", hundredthsOfSecond);
            }
            else
            {
                hundredthsOfSecondParameter = new ObjectParameter("HundredthsOfSecond", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction("PutExtendedRegisterIntoBase", valueIdentifierParameter, unitsParameter, intValueParameter, stringValueParameter, intStatusParameter, yearParameter, monthParameter, dayOfMonthParameter, dayOfWeekParameter, hourParameter, minuteParameter, secondParameter, hundredthsOfSecondParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="deviceID">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        public ObjectResult<global::System.String> ExportXMLTemplate(Nullable<global::System.Int64> deviceID, Nullable<global::System.Guid> dataOwnerID)
        {
            ObjectParameter deviceIDParameter;
            if (deviceID.HasValue)
            {
                deviceIDParameter = new ObjectParameter("DeviceID", deviceID);
            }
            else
            {
                deviceIDParameter = new ObjectParameter("DeviceID", typeof(global::System.Int64));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<global::System.String>("ExportXMLTemplate", deviceIDParameter, dataOwnerIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="chartID">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        /// <param name="lastSecondCount">Нет доступной документации по метаданным.</param>
        public ObjectResult<ViewFile> GetPointsVsAcqTime_Stat_LastSeconds(Nullable<global::System.Int64> chartID, Nullable<global::System.Guid> dataOwnerID, Nullable<global::System.Int64> lastSecondCount)
        {
            ObjectParameter chartIDParameter;
            if (chartID.HasValue)
            {
                chartIDParameter = new ObjectParameter("ChartID", chartID);
            }
            else
            {
                chartIDParameter = new ObjectParameter("ChartID", typeof(global::System.Int64));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            ObjectParameter lastSecondCountParameter;
            if (lastSecondCount.HasValue)
            {
                lastSecondCountParameter = new ObjectParameter("LastSecondCount", lastSecondCount);
            }
            else
            {
                lastSecondCountParameter = new ObjectParameter("LastSecondCount", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<ViewFile>("GetPointsVsAcqTime_Stat_LastSeconds", chartIDParameter, dataOwnerIDParameter, lastSecondCountParameter);
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="chartID">Нет доступной документации по метаданным.</param>
        /// <param name="dataOwnerID">Нет доступной документации по метаданным.</param>
        /// <param name="lastSecondCount">Нет доступной документации по метаданным.</param>
        public ObjectResult<ViewFile> GetPointsVsAcqTime_Stat_LastSeconds(Nullable<global::System.Int64> chartID, Nullable<global::System.Guid> dataOwnerID, Nullable<global::System.Int64> lastSecondCount, MergeOption mergeOption)
        {
            ObjectParameter chartIDParameter;
            if (chartID.HasValue)
            {
                chartIDParameter = new ObjectParameter("ChartID", chartID);
            }
            else
            {
                chartIDParameter = new ObjectParameter("ChartID", typeof(global::System.Int64));
            }
    
            ObjectParameter dataOwnerIDParameter;
            if (dataOwnerID.HasValue)
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", dataOwnerID);
            }
            else
            {
                dataOwnerIDParameter = new ObjectParameter("DataOwnerID", typeof(global::System.Guid));
            }
    
            ObjectParameter lastSecondCountParameter;
            if (lastSecondCount.HasValue)
            {
                lastSecondCountParameter = new ObjectParameter("LastSecondCount", lastSecondCount);
            }
            else
            {
                lastSecondCountParameter = new ObjectParameter("LastSecondCount", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<ViewFile>("GetPointsVsAcqTime_Stat_LastSeconds", mergeOption, chartIDParameter, dataOwnerIDParameter, lastSecondCountParameter);
        }

        #endregion

    }

    #endregion

    #region Сущности
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="web.Models", Name="ViewAddress")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ViewAddress : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ViewAddress.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="dataOwnerID">Исходное значение свойства DataOwnerID.</param>
        public static ViewAddress CreateViewAddress(global::System.Int64 id, global::System.Guid dataOwnerID)
        {
            ViewAddress viewAddress = new ViewAddress();
            viewAddress.ID = id;
            viewAddress.DataOwnerID = dataOwnerID;
            return viewAddress;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int64 _ID;
        partial void OnIDChanging(global::System.Int64 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid DataOwnerID
        {
            get
            {
                return _DataOwnerID;
            }
            set
            {
                if (_DataOwnerID != value)
                {
                    OnDataOwnerIDChanging(value);
                    ReportPropertyChanging("DataOwnerID");
                    _DataOwnerID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("DataOwnerID");
                    OnDataOwnerIDChanged();
                }
            }
        }
        private global::System.Guid _DataOwnerID;
        partial void OnDataOwnerIDChanging(global::System.Guid value);
        partial void OnDataOwnerIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Apartament
        {
            get
            {
                return _Apartament;
            }
            set
            {
                OnApartamentChanging(value);
                ReportPropertyChanging("Apartament");
                _Apartament = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Apartament");
                OnApartamentChanged();
            }
        }
        private global::System.String _Apartament;
        partial void OnApartamentChanging(global::System.String value);
        partial void OnApartamentChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Building
        {
            get
            {
                return _Building;
            }
            set
            {
                OnBuildingChanging(value);
                ReportPropertyChanging("Building");
                _Building = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Building");
                OnBuildingChanged();
            }
        }
        private global::System.String _Building;
        partial void OnBuildingChanging(global::System.String value);
        partial void OnBuildingChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Street
        {
            get
            {
                return _Street;
            }
            set
            {
                OnStreetChanging(value);
                ReportPropertyChanging("Street");
                _Street = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Street");
                OnStreetChanged();
            }
        }
        private global::System.String _Street;
        partial void OnStreetChanging(global::System.String value);
        partial void OnStreetChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String City
        {
            get
            {
                return _City;
            }
            set
            {
                OnCityChanging(value);
                ReportPropertyChanging("City");
                _City = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("City");
                OnCityChanged();
            }
        }
        private global::System.String _City;
        partial void OnCityChanging(global::System.String value);
        partial void OnCityChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String State
        {
            get
            {
                return _State;
            }
            set
            {
                OnStateChanging(value);
                ReportPropertyChanging("State");
                _State = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("State");
                OnStateChanged();
            }
        }
        private global::System.String _State;
        partial void OnStateChanging(global::System.String value);
        partial void OnStateChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Country
        {
            get
            {
                return _Country;
            }
            set
            {
                OnCountryChanging(value);
                ReportPropertyChanging("Country");
                _Country = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Country");
                OnCountryChanged();
            }
        }
        private global::System.String _Country;
        partial void OnCountryChanging(global::System.String value);
        partial void OnCountryChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ZipCode
        {
            get
            {
                return _ZipCode;
            }
            set
            {
                OnZipCodeChanging(value);
                ReportPropertyChanging("ZipCode");
                _ZipCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ZipCode");
                OnZipCodeChanged();
            }
        }
        private global::System.String _ZipCode;
        partial void OnZipCodeChanging(global::System.String value);
        partial void OnZipCodeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> ApartamentID
        {
            get
            {
                return _ApartamentID;
            }
            set
            {
                OnApartamentIDChanging(value);
                ReportPropertyChanging("ApartamentID");
                _ApartamentID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ApartamentID");
                OnApartamentIDChanged();
            }
        }
        private Nullable<global::System.Int64> _ApartamentID;
        partial void OnApartamentIDChanging(Nullable<global::System.Int64> value);
        partial void OnApartamentIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> BuildingID
        {
            get
            {
                return _BuildingID;
            }
            set
            {
                OnBuildingIDChanging(value);
                ReportPropertyChanging("BuildingID");
                _BuildingID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("BuildingID");
                OnBuildingIDChanged();
            }
        }
        private Nullable<global::System.Int64> _BuildingID;
        partial void OnBuildingIDChanging(Nullable<global::System.Int64> value);
        partial void OnBuildingIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> StreetID
        {
            get
            {
                return _StreetID;
            }
            set
            {
                OnStreetIDChanging(value);
                ReportPropertyChanging("StreetID");
                _StreetID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("StreetID");
                OnStreetIDChanged();
            }
        }
        private Nullable<global::System.Int64> _StreetID;
        partial void OnStreetIDChanging(Nullable<global::System.Int64> value);
        partial void OnStreetIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> CityID
        {
            get
            {
                return _CityID;
            }
            set
            {
                OnCityIDChanging(value);
                ReportPropertyChanging("CityID");
                _CityID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CityID");
                OnCityIDChanged();
            }
        }
        private Nullable<global::System.Int64> _CityID;
        partial void OnCityIDChanging(Nullable<global::System.Int64> value);
        partial void OnCityIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> StateID
        {
            get
            {
                return _StateID;
            }
            set
            {
                OnStateIDChanging(value);
                ReportPropertyChanging("StateID");
                _StateID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("StateID");
                OnStateIDChanged();
            }
        }
        private Nullable<global::System.Int64> _StateID;
        partial void OnStateIDChanging(Nullable<global::System.Int64> value);
        partial void OnStateIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> CountryID
        {
            get
            {
                return _CountryID;
            }
            set
            {
                OnCountryIDChanging(value);
                ReportPropertyChanging("CountryID");
                _CountryID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CountryID");
                OnCountryIDChanged();
            }
        }
        private Nullable<global::System.Int64> _CountryID;
        partial void OnCountryIDChanging(Nullable<global::System.Int64> value);
        partial void OnCountryIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> ZipCodeID
        {
            get
            {
                return _ZipCodeID;
            }
            set
            {
                OnZipCodeIDChanging(value);
                ReportPropertyChanging("ZipCodeID");
                _ZipCodeID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ZipCodeID");
                OnZipCodeIDChanged();
            }
        }
        private Nullable<global::System.Int64> _ZipCodeID;
        partial void OnZipCodeIDChanging(Nullable<global::System.Int64> value);
        partial void OnZipCodeIDChanged();

        #endregion

    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="web.Models", Name="ViewApartament")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ViewApartament : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ViewApartament.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="buildingID">Исходное значение свойства BuildingID.</param>
        /// <param name="dataOwnerID">Исходное значение свойства DataOwnerID.</param>
        /// <param name="streetID">Исходное значение свойства StreetID.</param>
        /// <param name="cityID">Исходное значение свойства CityID.</param>
        /// <param name="stateID">Исходное значение свойства StateID.</param>
        /// <param name="countryID">Исходное значение свойства CountryID.</param>
        public static ViewApartament CreateViewApartament(global::System.Int64 id, global::System.Int64 buildingID, global::System.Guid dataOwnerID, global::System.Int64 streetID, global::System.Int64 cityID, global::System.Int64 stateID, global::System.Int64 countryID)
        {
            ViewApartament viewApartament = new ViewApartament();
            viewApartament.ID = id;
            viewApartament.BuildingID = buildingID;
            viewApartament.DataOwnerID = dataOwnerID;
            viewApartament.StreetID = streetID;
            viewApartament.CityID = cityID;
            viewApartament.StateID = stateID;
            viewApartament.CountryID = countryID;
            return viewApartament;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int64 _ID;
        partial void OnIDChanging(global::System.Int64 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Apartament
        {
            get
            {
                return _Apartament;
            }
            set
            {
                OnApartamentChanging(value);
                ReportPropertyChanging("Apartament");
                _Apartament = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Apartament");
                OnApartamentChanged();
            }
        }
        private global::System.String _Apartament;
        partial void OnApartamentChanging(global::System.String value);
        partial void OnApartamentChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 BuildingID
        {
            get
            {
                return _BuildingID;
            }
            set
            {
                if (_BuildingID != value)
                {
                    OnBuildingIDChanging(value);
                    ReportPropertyChanging("BuildingID");
                    _BuildingID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("BuildingID");
                    OnBuildingIDChanged();
                }
            }
        }
        private global::System.Int64 _BuildingID;
        partial void OnBuildingIDChanging(global::System.Int64 value);
        partial void OnBuildingIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid DataOwnerID
        {
            get
            {
                return _DataOwnerID;
            }
            set
            {
                if (_DataOwnerID != value)
                {
                    OnDataOwnerIDChanging(value);
                    ReportPropertyChanging("DataOwnerID");
                    _DataOwnerID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("DataOwnerID");
                    OnDataOwnerIDChanged();
                }
            }
        }
        private global::System.Guid _DataOwnerID;
        partial void OnDataOwnerIDChanging(global::System.Guid value);
        partial void OnDataOwnerIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 StreetID
        {
            get
            {
                return _StreetID;
            }
            set
            {
                if (_StreetID != value)
                {
                    OnStreetIDChanging(value);
                    ReportPropertyChanging("StreetID");
                    _StreetID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("StreetID");
                    OnStreetIDChanged();
                }
            }
        }
        private global::System.Int64 _StreetID;
        partial void OnStreetIDChanging(global::System.Int64 value);
        partial void OnStreetIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 CityID
        {
            get
            {
                return _CityID;
            }
            set
            {
                if (_CityID != value)
                {
                    OnCityIDChanging(value);
                    ReportPropertyChanging("CityID");
                    _CityID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("CityID");
                    OnCityIDChanged();
                }
            }
        }
        private global::System.Int64 _CityID;
        partial void OnCityIDChanging(global::System.Int64 value);
        partial void OnCityIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 StateID
        {
            get
            {
                return _StateID;
            }
            set
            {
                if (_StateID != value)
                {
                    OnStateIDChanging(value);
                    ReportPropertyChanging("StateID");
                    _StateID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("StateID");
                    OnStateIDChanged();
                }
            }
        }
        private global::System.Int64 _StateID;
        partial void OnStateIDChanging(global::System.Int64 value);
        partial void OnStateIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 CountryID
        {
            get
            {
                return _CountryID;
            }
            set
            {
                if (_CountryID != value)
                {
                    OnCountryIDChanging(value);
                    ReportPropertyChanging("CountryID");
                    _CountryID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("CountryID");
                    OnCountryIDChanged();
                }
            }
        }
        private global::System.Int64 _CountryID;
        partial void OnCountryIDChanging(global::System.Int64 value);
        partial void OnCountryIDChanged();

        #endregion

    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="web.Models", Name="ViewBuilding")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ViewBuilding : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ViewBuilding.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="streetID">Исходное значение свойства StreetID.</param>
        /// <param name="dataOwnerID">Исходное значение свойства DataOwnerID.</param>
        /// <param name="cityID">Исходное значение свойства CityID.</param>
        /// <param name="stateID">Исходное значение свойства StateID.</param>
        /// <param name="countryID">Исходное значение свойства CountryID.</param>
        public static ViewBuilding CreateViewBuilding(global::System.Int64 id, global::System.Int64 streetID, global::System.Guid dataOwnerID, global::System.Int64 cityID, global::System.Int64 stateID, global::System.Int64 countryID)
        {
            ViewBuilding viewBuilding = new ViewBuilding();
            viewBuilding.ID = id;
            viewBuilding.StreetID = streetID;
            viewBuilding.DataOwnerID = dataOwnerID;
            viewBuilding.CityID = cityID;
            viewBuilding.StateID = stateID;
            viewBuilding.CountryID = countryID;
            return viewBuilding;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int64 _ID;
        partial void OnIDChanging(global::System.Int64 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Building
        {
            get
            {
                return _Building;
            }
            set
            {
                OnBuildingChanging(value);
                ReportPropertyChanging("Building");
                _Building = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Building");
                OnBuildingChanged();
            }
        }
        private global::System.String _Building;
        partial void OnBuildingChanging(global::System.String value);
        partial void OnBuildingChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 StreetID
        {
            get
            {
                return _StreetID;
            }
            set
            {
                if (_StreetID != value)
                {
                    OnStreetIDChanging(value);
                    ReportPropertyChanging("StreetID");
                    _StreetID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("StreetID");
                    OnStreetIDChanged();
                }
            }
        }
        private global::System.Int64 _StreetID;
        partial void OnStreetIDChanging(global::System.Int64 value);
        partial void OnStreetIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid DataOwnerID
        {
            get
            {
                return _DataOwnerID;
            }
            set
            {
                if (_DataOwnerID != value)
                {
                    OnDataOwnerIDChanging(value);
                    ReportPropertyChanging("DataOwnerID");
                    _DataOwnerID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("DataOwnerID");
                    OnDataOwnerIDChanged();
                }
            }
        }
        private global::System.Guid _DataOwnerID;
        partial void OnDataOwnerIDChanging(global::System.Guid value);
        partial void OnDataOwnerIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 CityID
        {
            get
            {
                return _CityID;
            }
            set
            {
                if (_CityID != value)
                {
                    OnCityIDChanging(value);
                    ReportPropertyChanging("CityID");
                    _CityID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("CityID");
                    OnCityIDChanged();
                }
            }
        }
        private global::System.Int64 _CityID;
        partial void OnCityIDChanging(global::System.Int64 value);
        partial void OnCityIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 StateID
        {
            get
            {
                return _StateID;
            }
            set
            {
                if (_StateID != value)
                {
                    OnStateIDChanging(value);
                    ReportPropertyChanging("StateID");
                    _StateID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("StateID");
                    OnStateIDChanged();
                }
            }
        }
        private global::System.Int64 _StateID;
        partial void OnStateIDChanging(global::System.Int64 value);
        partial void OnStateIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 CountryID
        {
            get
            {
                return _CountryID;
            }
            set
            {
                if (_CountryID != value)
                {
                    OnCountryIDChanging(value);
                    ReportPropertyChanging("CountryID");
                    _CountryID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("CountryID");
                    OnCountryIDChanged();
                }
            }
        }
        private global::System.Int64 _CountryID;
        partial void OnCountryIDChanging(global::System.Int64 value);
        partial void OnCountryIDChanged();

        #endregion

    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="web.Models", Name="ViewChart")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ViewChart : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ViewChart.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="width">Исходное значение свойства Width.</param>
        /// <param name="height">Исходное значение свойства Height.</param>
        /// <param name="dataOwnerID">Исходное значение свойства DataOwnerID.</param>
        /// <param name="dataSetMaxCount">Исходное значение свойства DataSetMaxCount.</param>
        public static ViewChart CreateViewChart(global::System.Int64 id, global::System.Int32 width, global::System.Int32 height, global::System.Guid dataOwnerID, global::System.Int32 dataSetMaxCount)
        {
            ViewChart viewChart = new ViewChart();
            viewChart.ID = id;
            viewChart.Width = width;
            viewChart.Height = height;
            viewChart.DataOwnerID = dataOwnerID;
            viewChart.DataSetMaxCount = dataSetMaxCount;
            return viewChart;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int64 _ID;
        partial void OnIDChanging(global::System.Int64 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Width
        {
            get
            {
                return _Width;
            }
            set
            {
                if (_Width != value)
                {
                    OnWidthChanging(value);
                    ReportPropertyChanging("Width");
                    _Width = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Width");
                    OnWidthChanged();
                }
            }
        }
        private global::System.Int32 _Width;
        partial void OnWidthChanging(global::System.Int32 value);
        partial void OnWidthChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Height
        {
            get
            {
                return _Height;
            }
            set
            {
                if (_Height != value)
                {
                    OnHeightChanging(value);
                    ReportPropertyChanging("Height");
                    _Height = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Height");
                    OnHeightChanged();
                }
            }
        }
        private global::System.Int32 _Height;
        partial void OnHeightChanging(global::System.Int32 value);
        partial void OnHeightChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid DataOwnerID
        {
            get
            {
                return _DataOwnerID;
            }
            set
            {
                if (_DataOwnerID != value)
                {
                    OnDataOwnerIDChanging(value);
                    ReportPropertyChanging("DataOwnerID");
                    _DataOwnerID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("DataOwnerID");
                    OnDataOwnerIDChanged();
                }
            }
        }
        private global::System.Guid _DataOwnerID;
        partial void OnDataOwnerIDChanging(global::System.Guid value);
        partial void OnDataOwnerIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DataSetType
        {
            get
            {
                return _DataSetType;
            }
            set
            {
                OnDataSetTypeChanging(value);
                ReportPropertyChanging("DataSetType");
                _DataSetType = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DataSetType");
                OnDataSetTypeChanged();
            }
        }
        private global::System.String _DataSetType;
        partial void OnDataSetTypeChanging(global::System.String value);
        partial void OnDataSetTypeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 DataSetMaxCount
        {
            get
            {
                return _DataSetMaxCount;
            }
            set
            {
                if (_DataSetMaxCount != value)
                {
                    OnDataSetMaxCountChanging(value);
                    ReportPropertyChanging("DataSetMaxCount");
                    _DataSetMaxCount = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("DataSetMaxCount");
                    OnDataSetMaxCountChanged();
                }
            }
        }
        private global::System.Int32 _DataSetMaxCount;
        partial void OnDataSetMaxCountChanging(global::System.Int32 value);
        partial void OnDataSetMaxCountChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ChartType
        {
            get
            {
                return _ChartType;
            }
            set
            {
                OnChartTypeChanging(value);
                ReportPropertyChanging("ChartType");
                _ChartType = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ChartType");
                OnChartTypeChanged();
            }
        }
        private global::System.String _ChartType;
        partial void OnChartTypeChanging(global::System.String value);
        partial void OnChartTypeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Content
        {
            get
            {
                return _Content;
            }
            set
            {
                OnContentChanging(value);
                ReportPropertyChanging("Content");
                _Content = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Content");
                OnContentChanged();
            }
        }
        private global::System.String _Content;
        partial void OnContentChanging(global::System.String value);
        partial void OnContentChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> DocID
        {
            get
            {
                return _DocID;
            }
            set
            {
                OnDocIDChanging(value);
                ReportPropertyChanging("DocID");
                _DocID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DocID");
                OnDocIDChanged();
            }
        }
        private Nullable<global::System.Int64> _DocID;
        partial void OnDocIDChanging(Nullable<global::System.Int64> value);
        partial void OnDocIDChanged();

        #endregion

    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="web.Models", Name="ViewChartsDataTypes")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ViewChartsDataTypes : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ViewChartsDataTypes.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="chartID">Исходное значение свойства ChartID.</param>
        /// <param name="dataOwnerID">Исходное значение свойства DataOwnerID.</param>
        /// <param name="elementID">Исходное значение свойства ElementID.</param>
        public static ViewChartsDataTypes CreateViewChartsDataTypes(global::System.Int64 id, global::System.Int64 chartID, global::System.Guid dataOwnerID, global::System.Int64 elementID)
        {
            ViewChartsDataTypes viewChartsDataTypes = new ViewChartsDataTypes();
            viewChartsDataTypes.ID = id;
            viewChartsDataTypes.ChartID = chartID;
            viewChartsDataTypes.DataOwnerID = dataOwnerID;
            viewChartsDataTypes.ElementID = elementID;
            return viewChartsDataTypes;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int64 _ID;
        partial void OnIDChanging(global::System.Int64 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 ChartID
        {
            get
            {
                return _ChartID;
            }
            set
            {
                if (_ChartID != value)
                {
                    OnChartIDChanging(value);
                    ReportPropertyChanging("ChartID");
                    _ChartID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ChartID");
                    OnChartIDChanged();
                }
            }
        }
        private global::System.Int64 _ChartID;
        partial void OnChartIDChanging(global::System.Int64 value);
        partial void OnChartIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid DataOwnerID
        {
            get
            {
                return _DataOwnerID;
            }
            set
            {
                if (_DataOwnerID != value)
                {
                    OnDataOwnerIDChanging(value);
                    ReportPropertyChanging("DataOwnerID");
                    _DataOwnerID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("DataOwnerID");
                    OnDataOwnerIDChanged();
                }
            }
        }
        private global::System.Guid _DataOwnerID;
        partial void OnDataOwnerIDChanging(global::System.Guid value);
        partial void OnDataOwnerIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 ElementID
        {
            get
            {
                return _ElementID;
            }
            set
            {
                if (_ElementID != value)
                {
                    OnElementIDChanging(value);
                    ReportPropertyChanging("ElementID");
                    _ElementID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ElementID");
                    OnElementIDChanged();
                }
            }
        }
        private global::System.Int64 _ElementID;
        partial void OnElementIDChanging(global::System.Int64 value);
        partial void OnElementIDChanged();

        #endregion

    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="web.Models", Name="ViewChartSet")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ViewChartSet : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ViewChartSet.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="cellWidth">Исходное значение свойства CellWidth.</param>
        /// <param name="cellHeight">Исходное значение свойства CellHeight.</param>
        /// <param name="rows">Исходное значение свойства Rows.</param>
        /// <param name="cols">Исходное значение свойства Cols.</param>
        /// <param name="margin">Исходное значение свойства Margin.</param>
        /// <param name="dataOwnerID">Исходное значение свойства DataOwnerID.</param>
        public static ViewChartSet CreateViewChartSet(global::System.Int64 id, global::System.Int32 cellWidth, global::System.Int32 cellHeight, global::System.Int32 rows, global::System.Int32 cols, global::System.Int32 margin, global::System.Guid dataOwnerID)
        {
            ViewChartSet viewChartSet = new ViewChartSet();
            viewChartSet.ID = id;
            viewChartSet.CellWidth = cellWidth;
            viewChartSet.CellHeight = cellHeight;
            viewChartSet.Rows = rows;
            viewChartSet.Cols = cols;
            viewChartSet.Margin = margin;
            viewChartSet.DataOwnerID = dataOwnerID;
            return viewChartSet;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int64 _ID;
        partial void OnIDChanging(global::System.Int64 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CellWidth
        {
            get
            {
                return _CellWidth;
            }
            set
            {
                if (_CellWidth != value)
                {
                    OnCellWidthChanging(value);
                    ReportPropertyChanging("CellWidth");
                    _CellWidth = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("CellWidth");
                    OnCellWidthChanged();
                }
            }
        }
        private global::System.Int32 _CellWidth;
        partial void OnCellWidthChanging(global::System.Int32 value);
        partial void OnCellWidthChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CellHeight
        {
            get
            {
                return _CellHeight;
            }
            set
            {
                if (_CellHeight != value)
                {
                    OnCellHeightChanging(value);
                    ReportPropertyChanging("CellHeight");
                    _CellHeight = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("CellHeight");
                    OnCellHeightChanged();
                }
            }
        }
        private global::System.Int32 _CellHeight;
        partial void OnCellHeightChanging(global::System.Int32 value);
        partial void OnCellHeightChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Rows
        {
            get
            {
                return _Rows;
            }
            set
            {
                if (_Rows != value)
                {
                    OnRowsChanging(value);
                    ReportPropertyChanging("Rows");
                    _Rows = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Rows");
                    OnRowsChanged();
                }
            }
        }
        private global::System.Int32 _Rows;
        partial void OnRowsChanging(global::System.Int32 value);
        partial void OnRowsChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Cols
        {
            get
            {
                return _Cols;
            }
            set
            {
                if (_Cols != value)
                {
                    OnColsChanging(value);
                    ReportPropertyChanging("Cols");
                    _Cols = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Cols");
                    OnColsChanged();
                }
            }
        }
        private global::System.Int32 _Cols;
        partial void OnColsChanging(global::System.Int32 value);
        partial void OnColsChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Margin
        {
            get
            {
                return _Margin;
            }
            set
            {
                if (_Margin != value)
                {
                    OnMarginChanging(value);
                    ReportPropertyChanging("Margin");
                    _Margin = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Margin");
                    OnMarginChanged();
                }
            }
        }
        private global::System.Int32 _Margin;
        partial void OnMarginChanging(global::System.Int32 value);
        partial void OnMarginChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid DataOwnerID
        {
            get
            {
                return _DataOwnerID;
            }
            set
            {
                if (_DataOwnerID != value)
                {
                    OnDataOwnerIDChanging(value);
                    ReportPropertyChanging("DataOwnerID");
                    _DataOwnerID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("DataOwnerID");
                    OnDataOwnerIDChanged();
                }
            }
        }
        private global::System.Guid _DataOwnerID;
        partial void OnDataOwnerIDChanging(global::System.Guid value);
        partial void OnDataOwnerIDChanged();

        #endregion

    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="web.Models", Name="ViewChartSetsCharts")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ViewChartSetsCharts : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ViewChartSetsCharts.
        /// </summary>
        /// <param name="dataOwnerID">Исходное значение свойства DataOwnerID.</param>
        /// <param name="chartID">Исходное значение свойства ChartID.</param>
        /// <param name="chartType">Исходное значение свойства ChartType.</param>
        public static ViewChartSetsCharts CreateViewChartSetsCharts(global::System.Guid dataOwnerID, global::System.Int64 chartID, global::System.String chartType)
        {
            ViewChartSetsCharts viewChartSetsCharts = new ViewChartSetsCharts();
            viewChartSetsCharts.DataOwnerID = dataOwnerID;
            viewChartSetsCharts.ChartID = chartID;
            viewChartSetsCharts.ChartType = chartType;
            return viewChartSetsCharts;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> ColIndex
        {
            get
            {
                return _ColIndex;
            }
            set
            {
                OnColIndexChanging(value);
                ReportPropertyChanging("ColIndex");
                _ColIndex = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ColIndex");
                OnColIndexChanged();
            }
        }
        private Nullable<global::System.Int64> _ColIndex;
        partial void OnColIndexChanging(Nullable<global::System.Int64> value);
        partial void OnColIndexChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> RowIndex
        {
            get
            {
                return _RowIndex;
            }
            set
            {
                OnRowIndexChanging(value);
                ReportPropertyChanging("RowIndex");
                _RowIndex = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("RowIndex");
                OnRowIndexChanged();
            }
        }
        private Nullable<global::System.Int64> _RowIndex;
        partial void OnRowIndexChanging(Nullable<global::System.Int64> value);
        partial void OnRowIndexChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ChartName
        {
            get
            {
                return _ChartName;
            }
            set
            {
                OnChartNameChanging(value);
                ReportPropertyChanging("ChartName");
                _ChartName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ChartName");
                OnChartNameChanged();
            }
        }
        private global::System.String _ChartName;
        partial void OnChartNameChanging(global::System.String value);
        partial void OnChartNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ChartSetName
        {
            get
            {
                return _ChartSetName;
            }
            set
            {
                OnChartSetNameChanging(value);
                ReportPropertyChanging("ChartSetName");
                _ChartSetName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ChartSetName");
                OnChartSetNameChanged();
            }
        }
        private global::System.String _ChartSetName;
        partial void OnChartSetNameChanging(global::System.String value);
        partial void OnChartSetNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid DataOwnerID
        {
            get
            {
                return _DataOwnerID;
            }
            set
            {
                if (_DataOwnerID != value)
                {
                    OnDataOwnerIDChanging(value);
                    ReportPropertyChanging("DataOwnerID");
                    _DataOwnerID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("DataOwnerID");
                    OnDataOwnerIDChanged();
                }
            }
        }
        private global::System.Guid _DataOwnerID;
        partial void OnDataOwnerIDChanging(global::System.Guid value);
        partial void OnDataOwnerIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> ChartSetID
        {
            get
            {
                return _ChartSetID;
            }
            set
            {
                OnChartSetIDChanging(value);
                ReportPropertyChanging("ChartSetID");
                _ChartSetID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ChartSetID");
                OnChartSetIDChanged();
            }
        }
        private Nullable<global::System.Int64> _ChartSetID;
        partial void OnChartSetIDChanging(Nullable<global::System.Int64> value);
        partial void OnChartSetIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 ChartID
        {
            get
            {
                return _ChartID;
            }
            set
            {
                if (_ChartID != value)
                {
                    OnChartIDChanging(value);
                    ReportPropertyChanging("ChartID");
                    _ChartID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ChartID");
                    OnChartIDChanged();
                }
            }
        }
        private global::System.Int64 _ChartID;
        partial void OnChartIDChanging(global::System.Int64 value);
        partial void OnChartIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ChartType
        {
            get
            {
                return _ChartType;
            }
            set
            {
                if (_ChartType != value)
                {
                    OnChartTypeChanging(value);
                    ReportPropertyChanging("ChartType");
                    _ChartType = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("ChartType");
                    OnChartTypeChanged();
                }
            }
        }
        private global::System.String _ChartType;
        partial void OnChartTypeChanging(global::System.String value);
        partial void OnChartTypeChanged();

        #endregion

    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="web.Models", Name="ViewCity")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ViewCity : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ViewCity.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="stateID">Исходное значение свойства StateID.</param>
        /// <param name="dataOwnerID">Исходное значение свойства DataOwnerID.</param>
        /// <param name="countryID">Исходное значение свойства CountryID.</param>
        public static ViewCity CreateViewCity(global::System.Int64 id, global::System.Int64 stateID, global::System.Guid dataOwnerID, global::System.Int64 countryID)
        {
            ViewCity viewCity = new ViewCity();
            viewCity.ID = id;
            viewCity.StateID = stateID;
            viewCity.DataOwnerID = dataOwnerID;
            viewCity.CountryID = countryID;
            return viewCity;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int64 _ID;
        partial void OnIDChanging(global::System.Int64 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String City
        {
            get
            {
                return _City;
            }
            set
            {
                OnCityChanging(value);
                ReportPropertyChanging("City");
                _City = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("City");
                OnCityChanged();
            }
        }
        private global::System.String _City;
        partial void OnCityChanging(global::System.String value);
        partial void OnCityChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 StateID
        {
            get
            {
                return _StateID;
            }
            set
            {
                if (_StateID != value)
                {
                    OnStateIDChanging(value);
                    ReportPropertyChanging("StateID");
                    _StateID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("StateID");
                    OnStateIDChanged();
                }
            }
        }
        private global::System.Int64 _StateID;
        partial void OnStateIDChanging(global::System.Int64 value);
        partial void OnStateIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String PhoneCode
        {
            get
            {
                return _PhoneCode;
            }
            set
            {
                OnPhoneCodeChanging(value);
                ReportPropertyChanging("PhoneCode");
                _PhoneCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("PhoneCode");
                OnPhoneCodeChanged();
            }
        }
        private global::System.String _PhoneCode;
        partial void OnPhoneCodeChanging(global::System.String value);
        partial void OnPhoneCodeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid DataOwnerID
        {
            get
            {
                return _DataOwnerID;
            }
            set
            {
                if (_DataOwnerID != value)
                {
                    OnDataOwnerIDChanging(value);
                    ReportPropertyChanging("DataOwnerID");
                    _DataOwnerID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("DataOwnerID");
                    OnDataOwnerIDChanged();
                }
            }
        }
        private global::System.Guid _DataOwnerID;
        partial void OnDataOwnerIDChanging(global::System.Guid value);
        partial void OnDataOwnerIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 CountryID
        {
            get
            {
                return _CountryID;
            }
            set
            {
                if (_CountryID != value)
                {
                    OnCountryIDChanging(value);
                    ReportPropertyChanging("CountryID");
                    _CountryID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("CountryID");
                    OnCountryIDChanged();
                }
            }
        }
        private global::System.Int64 _CountryID;
        partial void OnCountryIDChanging(global::System.Int64 value);
        partial void OnCountryIDChanged();

        #endregion

    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="web.Models", Name="ViewCOSEMAttribute")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ViewCOSEMAttribute : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ViewCOSEMAttribute.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="cOSEMClassID">Исходное значение свойства COSEMClassID.</param>
        /// <param name="dynamic">Исходное значение свойства Dynamic.</param>
        /// <param name="cOSEMDataTypeID">Исходное значение свойства COSEMDataTypeID.</param>
        /// <param name="standard">Исходное значение свойства Standard.</param>
        public static ViewCOSEMAttribute CreateViewCOSEMAttribute(global::System.Int64 id, global::System.Int64 cOSEMClassID, global::System.Boolean dynamic, global::System.Int64 cOSEMDataTypeID, global::System.Boolean standard)
        {
            ViewCOSEMAttribute viewCOSEMAttribute = new ViewCOSEMAttribute();
            viewCOSEMAttribute.ID = id;
            viewCOSEMAttribute.COSEMClassID = cOSEMClassID;
            viewCOSEMAttribute.Dynamic = dynamic;
            viewCOSEMAttribute.COSEMDataTypeID = cOSEMDataTypeID;
            viewCOSEMAttribute.Standard = standard;
            return viewCOSEMAttribute;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int64 _ID;
        partial void OnIDChanging(global::System.Int64 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 COSEMClassID
        {
            get
            {
                return _COSEMClassID;
            }
            set
            {
                if (_COSEMClassID != value)
                {
                    OnCOSEMClassIDChanging(value);
                    ReportPropertyChanging("COSEMClassID");
                    _COSEMClassID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("COSEMClassID");
                    OnCOSEMClassIDChanged();
                }
            }
        }
        private global::System.Int64 _COSEMClassID;
        partial void OnCOSEMClassIDChanging(global::System.Int64 value);
        partial void OnCOSEMClassIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Dynamic
        {
            get
            {
                return _Dynamic;
            }
            set
            {
                if (_Dynamic != value)
                {
                    OnDynamicChanging(value);
                    ReportPropertyChanging("Dynamic");
                    _Dynamic = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Dynamic");
                    OnDynamicChanged();
                }
            }
        }
        private global::System.Boolean _Dynamic;
        partial void OnDynamicChanging(global::System.Boolean value);
        partial void OnDynamicChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 COSEMDataTypeID
        {
            get
            {
                return _COSEMDataTypeID;
            }
            set
            {
                if (_COSEMDataTypeID != value)
                {
                    OnCOSEMDataTypeIDChanging(value);
                    ReportPropertyChanging("COSEMDataTypeID");
                    _COSEMDataTypeID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("COSEMDataTypeID");
                    OnCOSEMDataTypeIDChanged();
                }
            }
        }
        private global::System.Int64 _COSEMDataTypeID;
        partial void OnCOSEMDataTypeIDChanging(global::System.Int64 value);
        partial void OnCOSEMDataTypeIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Double> MinValue
        {
            get
            {
                return _MinValue;
            }
            set
            {
                OnMinValueChanging(value);
                ReportPropertyChanging("MinValue");
                _MinValue = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("MinValue");
                OnMinValueChanged();
            }
        }
        private Nullable<global::System.Double> _MinValue;
        partial void OnMinValueChanging(Nullable<global::System.Double> value);
        partial void OnMinValueChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Double> MaxValue
        {
            get
            {
                return _MaxValue;
            }
            set
            {
                OnMaxValueChanging(value);
                ReportPropertyChanging("MaxValue");
                _MaxValue = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("MaxValue");
                OnMaxValueChanged();
            }
        }
        private Nullable<global::System.Double> _MaxValue;
        partial void OnMaxValueChanging(Nullable<global::System.Double> value);
        partial void OnMaxValueChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Double> DefValue
        {
            get
            {
                return _DefValue;
            }
            set
            {
                OnDefValueChanging(value);
                ReportPropertyChanging("DefValue");
                _DefValue = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DefValue");
                OnDefValueChanged();
            }
        }
        private Nullable<global::System.Double> _DefValue;
        partial void OnDefValueChanging(Nullable<global::System.Double> value);
        partial void OnDefValueChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Guid> DataOwnerID
        {
            get
            {
                return _DataOwnerID;
            }
            set
            {
                OnDataOwnerIDChanging(value);
                ReportPropertyChanging("DataOwnerID");
                _DataOwnerID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DataOwnerID");
                OnDataOwnerIDChanged();
            }
        }
        private Nullable<global::System.Guid> _DataOwnerID;
        partial void OnDataOwnerIDChanging(Nullable<global::System.Guid> value);
        partial void OnDataOwnerIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String COSEMClassName
        {
            get
            {
                return _COSEMClassName;
            }
            set
            {
                OnCOSEMClassNameChanging(value);
                ReportPropertyChanging("COSEMClassName");
                _COSEMClassName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("COSEMClassName");
                OnCOSEMClassNameChanged();
            }
        }
        private global::System.String _COSEMClassName;
        partial void OnCOSEMClassNameChanging(global::System.String value);
        partial void OnCOSEMClassNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String COSEMDataTypeName
        {
            get
            {
                return _COSEMDataTypeName;
            }
            set
            {
                OnCOSEMDataTypeNameChanging(value);
                ReportPropertyChanging("COSEMDataTypeName");
                _COSEMDataTypeName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("COSEMDataTypeName");
                OnCOSEMDataTypeNameChanged();
            }
        }
        private global::System.String _COSEMDataTypeName;
        partial void OnCOSEMDataTypeNameChanging(global::System.String value);
        partial void OnCOSEMDataTypeNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Standard
        {
            get
            {
                return _Standard;
            }
            set
            {
                if (_Standard != value)
                {
                    OnStandardChanging(value);
                    ReportPropertyChanging("Standard");
                    _Standard = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Standard");
                    OnStandardChanged();
                }
            }
        }
        private global::System.Boolean _Standard;
        partial void OnStandardChanging(global::System.Boolean value);
        partial void OnStandardChanged();

        #endregion

    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="web.Models", Name="ViewCOSEMAttributeDataType")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ViewCOSEMAttributeDataType : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ViewCOSEMAttributeDataType.
        /// </summary>
        /// <param name="cOSEMClassID">Исходное значение свойства COSEMClassID.</param>
        /// <param name="attributeID">Исходное значение свойства AttributeID.</param>
        /// <param name="dynamic">Исходное значение свойства Dynamic.</param>
        /// <param name="standard">Исходное значение свойства Standard.</param>
        /// <param name="cOSEMDataTypeID">Исходное значение свойства COSEMDataTypeID.</param>
        /// <param name="cOSEMObjectID">Исходное значение свойства COSEMObjectID.</param>
        /// <param name="cOSEMLogicalDeviceID">Исходное значение свойства COSEMLogicalDeviceID.</param>
        public static ViewCOSEMAttributeDataType CreateViewCOSEMAttributeDataType(global::System.Int64 cOSEMClassID, global::System.Int64 attributeID, global::System.Boolean dynamic, global::System.Boolean standard, global::System.Int64 cOSEMDataTypeID, global::System.Int64 cOSEMObjectID, global::System.Int64 cOSEMLogicalDeviceID)
        {
            ViewCOSEMAttributeDataType viewCOSEMAttributeDataType = new ViewCOSEMAttributeDataType();
            viewCOSEMAttributeDataType.COSEMClassID = cOSEMClassID;
            viewCOSEMAttributeDataType.AttributeID = attributeID;
            viewCOSEMAttributeDataType.Dynamic = dynamic;
            viewCOSEMAttributeDataType.Standard = standard;
            viewCOSEMAttributeDataType.COSEMDataTypeID = cOSEMDataTypeID;
            viewCOSEMAttributeDataType.COSEMObjectID = cOSEMObjectID;
            viewCOSEMAttributeDataType.COSEMLogicalDeviceID = cOSEMLogicalDeviceID;
            return viewCOSEMAttributeDataType;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 COSEMClassID
        {
            get
            {
                return _COSEMClassID;
            }
            set
            {
                if (_COSEMClassID != value)
                {
                    OnCOSEMClassIDChanging(value);
                    ReportPropertyChanging("COSEMClassID");
                    _COSEMClassID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("COSEMClassID");
                    OnCOSEMClassIDChanged();
                }
            }
        }
        private global::System.Int64 _COSEMClassID;
        partial void OnCOSEMClassIDChanging(global::System.Int64 value);
        partial void OnCOSEMClassIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String COSEMLogicalName
        {
            get
            {
                return _COSEMLogicalName;
            }
            set
            {
                OnCOSEMLogicalNameChanging(value);
                ReportPropertyChanging("COSEMLogicalName");
                _COSEMLogicalName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("COSEMLogicalName");
                OnCOSEMLogicalNameChanged();
            }
        }
        private global::System.String _COSEMLogicalName;
        partial void OnCOSEMLogicalNameChanging(global::System.String value);
        partial void OnCOSEMLogicalNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 AttributeID
        {
            get
            {
                return _AttributeID;
            }
            set
            {
                if (_AttributeID != value)
                {
                    OnAttributeIDChanging(value);
                    ReportPropertyChanging("AttributeID");
                    _AttributeID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("AttributeID");
                    OnAttributeIDChanged();
                }
            }
        }
        private global::System.Int64 _AttributeID;
        partial void OnAttributeIDChanging(global::System.Int64 value);
        partial void OnAttributeIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Dynamic
        {
            get
            {
                return _Dynamic;
            }
            set
            {
                if (_Dynamic != value)
                {
                    OnDynamicChanging(value);
                    ReportPropertyChanging("Dynamic");
                    _Dynamic = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Dynamic");
                    OnDynamicChanged();
                }
            }
        }
        private global::System.Boolean _Dynamic;
        partial void OnDynamicChanging(global::System.Boolean value);
        partial void OnDynamicChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Double> MinValue
        {
            get
            {
                return _MinValue;
            }
            set
            {
                OnMinValueChanging(value);
                ReportPropertyChanging("MinValue");
                _MinValue = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("MinValue");
                OnMinValueChanged();
            }
        }
        private Nullable<global::System.Double> _MinValue;
        partial void OnMinValueChanging(Nullable<global::System.Double> value);
        partial void OnMinValueChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Double> MaxValue
        {
            get
            {
                return _MaxValue;
            }
            set
            {
                OnMaxValueChanging(value);
                ReportPropertyChanging("MaxValue");
                _MaxValue = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("MaxValue");
                OnMaxValueChanged();
            }
        }
        private Nullable<global::System.Double> _MaxValue;
        partial void OnMaxValueChanging(Nullable<global::System.Double> value);
        partial void OnMaxValueChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Double> DefValue
        {
            get
            {
                return _DefValue;
            }
            set
            {
                OnDefValueChanging(value);
                ReportPropertyChanging("DefValue");
                _DefValue = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DefValue");
                OnDefValueChanged();
            }
        }
        private Nullable<global::System.Double> _DefValue;
        partial void OnDefValueChanging(Nullable<global::System.Double> value);
        partial void OnDefValueChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Standard
        {
            get
            {
                return _Standard;
            }
            set
            {
                if (_Standard != value)
                {
                    OnStandardChanging(value);
                    ReportPropertyChanging("Standard");
                    _Standard = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Standard");
                    OnStandardChanged();
                }
            }
        }
        private global::System.Boolean _Standard;
        partial void OnStandardChanging(global::System.Boolean value);
        partial void OnStandardChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 COSEMDataTypeID
        {
            get
            {
                return _COSEMDataTypeID;
            }
            set
            {
                if (_COSEMDataTypeID != value)
                {
                    OnCOSEMDataTypeIDChanging(value);
                    ReportPropertyChanging("COSEMDataTypeID");
                    _COSEMDataTypeID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("COSEMDataTypeID");
                    OnCOSEMDataTypeIDChanged();
                }
            }
        }
        private global::System.Int64 _COSEMDataTypeID;
        partial void OnCOSEMDataTypeIDChanging(global::System.Int64 value);
        partial void OnCOSEMDataTypeIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> DataTypeID
        {
            get
            {
                return _DataTypeID;
            }
            set
            {
                OnDataTypeIDChanging(value);
                ReportPropertyChanging("DataTypeID");
                _DataTypeID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DataTypeID");
                OnDataTypeIDChanged();
            }
        }
        private Nullable<global::System.Int64> _DataTypeID;
        partial void OnDataTypeIDChanging(Nullable<global::System.Int64> value);
        partial void OnDataTypeIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 COSEMObjectID
        {
            get
            {
                return _COSEMObjectID;
            }
            set
            {
                if (_COSEMObjectID != value)
                {
                    OnCOSEMObjectIDChanging(value);
                    ReportPropertyChanging("COSEMObjectID");
                    _COSEMObjectID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("COSEMObjectID");
                    OnCOSEMObjectIDChanged();
                }
            }
        }
        private global::System.Int64 _COSEMObjectID;
        partial void OnCOSEMObjectIDChanging(global::System.Int64 value);
        partial void OnCOSEMObjectIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String COSEMDataTypeName
        {
            get
            {
                return _COSEMDataTypeName;
            }
            set
            {
                OnCOSEMDataTypeNameChanging(value);
                ReportPropertyChanging("COSEMDataTypeName");
                _COSEMDataTypeName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("COSEMDataTypeName");
                OnCOSEMDataTypeNameChanged();
            }
        }
        private global::System.String _COSEMDataTypeName;
        partial void OnCOSEMDataTypeNameChanging(global::System.String value);
        partial void OnCOSEMDataTypeNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 COSEMLogicalDeviceID
        {
            get
            {
                return _COSEMLogicalDeviceID;
            }
            set
            {
                if (_COSEMLogicalDeviceID != value)
                {
                    OnCOSEMLogicalDeviceIDChanging(value);
                    ReportPropertyChanging("COSEMLogicalDeviceID");
                    _COSEMLogicalDeviceID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("COSEMLogicalDeviceID");
                    OnCOSEMLogicalDeviceIDChanged();
                }
            }
        }
        private global::System.Int64 _COSEMLogicalDeviceID;
        partial void OnCOSEMLogicalDeviceIDChanging(global::System.Int64 value);
        partial void OnCOSEMLogicalDeviceIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Guid> DataOwnerID
        {
            get
            {
                return _DataOwnerID;
            }
            set
            {
                OnDataOwnerIDChanging(value);
                ReportPropertyChanging("DataOwnerID");
                _DataOwnerID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DataOwnerID");
                OnDataOwnerIDChanged();
            }
        }
        private Nullable<global::System.Guid> _DataOwnerID;
        partial void OnDataOwnerIDChanging(Nullable<global::System.Guid> value);
        partial void OnDataOwnerIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Identifier
        {
            get
            {
                return _Identifier;
            }
            set
            {
                OnIdentifierChanging(value);
                ReportPropertyChanging("Identifier");
                _Identifier = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Identifier");
                OnIdentifierChanged();
            }
        }
        private global::System.String _Identifier;
        partial void OnIdentifierChanging(global::System.String value);
        partial void OnIdentifierChanged();

        #endregion

    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="web.Models", Name="ViewCOSEMAttributeValue")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ViewCOSEMAttributeValue : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ViewCOSEMAttributeValue.
        /// </summary>
        /// <param name="cOSEMClassID">Исходное значение свойства COSEMClassID.</param>
        /// <param name="attributeID">Исходное значение свойства AttributeID.</param>
        /// <param name="dynamic">Исходное значение свойства Dynamic.</param>
        /// <param name="cOSEMObjectID">Исходное значение свойства COSEMObjectID.</param>
        /// <param name="cOSEMLogicalDeviceID">Исходное значение свойства COSEMLogicalDeviceID.</param>
        /// <param name="standard">Исходное значение свойства Standard.</param>
        public static ViewCOSEMAttributeValue CreateViewCOSEMAttributeValue(global::System.Int64 cOSEMClassID, global::System.Int64 attributeID, global::System.Boolean dynamic, global::System.Int64 cOSEMObjectID, global::System.Int64 cOSEMLogicalDeviceID, global::System.Boolean standard)
        {
            ViewCOSEMAttributeValue viewCOSEMAttributeValue = new ViewCOSEMAttributeValue();
            viewCOSEMAttributeValue.COSEMClassID = cOSEMClassID;
            viewCOSEMAttributeValue.AttributeID = attributeID;
            viewCOSEMAttributeValue.Dynamic = dynamic;
            viewCOSEMAttributeValue.COSEMObjectID = cOSEMObjectID;
            viewCOSEMAttributeValue.COSEMLogicalDeviceID = cOSEMLogicalDeviceID;
            viewCOSEMAttributeValue.Standard = standard;
            return viewCOSEMAttributeValue;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 COSEMClassID
        {
            get
            {
                return _COSEMClassID;
            }
            set
            {
                if (_COSEMClassID != value)
                {
                    OnCOSEMClassIDChanging(value);
                    ReportPropertyChanging("COSEMClassID");
                    _COSEMClassID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("COSEMClassID");
                    OnCOSEMClassIDChanged();
                }
            }
        }
        private global::System.Int64 _COSEMClassID;
        partial void OnCOSEMClassIDChanging(global::System.Int64 value);
        partial void OnCOSEMClassIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 AttributeID
        {
            get
            {
                return _AttributeID;
            }
            set
            {
                if (_AttributeID != value)
                {
                    OnAttributeIDChanging(value);
                    ReportPropertyChanging("AttributeID");
                    _AttributeID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("AttributeID");
                    OnAttributeIDChanged();
                }
            }
        }
        private global::System.Int64 _AttributeID;
        partial void OnAttributeIDChanging(global::System.Int64 value);
        partial void OnAttributeIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Dynamic
        {
            get
            {
                return _Dynamic;
            }
            set
            {
                if (_Dynamic != value)
                {
                    OnDynamicChanging(value);
                    ReportPropertyChanging("Dynamic");
                    _Dynamic = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Dynamic");
                    OnDynamicChanged();
                }
            }
        }
        private global::System.Boolean _Dynamic;
        partial void OnDynamicChanging(global::System.Boolean value);
        partial void OnDynamicChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> DataTypeID
        {
            get
            {
                return _DataTypeID;
            }
            set
            {
                OnDataTypeIDChanging(value);
                ReportPropertyChanging("DataTypeID");
                _DataTypeID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DataTypeID");
                OnDataTypeIDChanged();
            }
        }
        private Nullable<global::System.Int64> _DataTypeID;
        partial void OnDataTypeIDChanging(Nullable<global::System.Int64> value);
        partial void OnDataTypeIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 COSEMObjectID
        {
            get
            {
                return _COSEMObjectID;
            }
            set
            {
                if (_COSEMObjectID != value)
                {
                    OnCOSEMObjectIDChanging(value);
                    ReportPropertyChanging("COSEMObjectID");
                    _COSEMObjectID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("COSEMObjectID");
                    OnCOSEMObjectIDChanged();
                }
            }
        }
        private global::System.Int64 _COSEMObjectID;
        partial void OnCOSEMObjectIDChanging(global::System.Int64 value);
        partial void OnCOSEMObjectIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String COSEMDataTypeName
        {
            get
            {
                return _COSEMDataTypeName;
            }
            set
            {
                OnCOSEMDataTypeNameChanging(value);
                ReportPropertyChanging("COSEMDataTypeName");
                _COSEMDataTypeName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("COSEMDataTypeName");
                OnCOSEMDataTypeNameChanged();
            }
        }
        private global::System.String _COSEMDataTypeName;
        partial void OnCOSEMDataTypeNameChanging(global::System.String value);
        partial void OnCOSEMDataTypeNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> MeasurementTime
        {
            get
            {
                return _MeasurementTime;
            }
            set
            {
                OnMeasurementTimeChanging(value);
                ReportPropertyChanging("MeasurementTime");
                _MeasurementTime = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("MeasurementTime");
                OnMeasurementTimeChanged();
            }
        }
        private Nullable<global::System.DateTime> _MeasurementTime;
        partial void OnMeasurementTimeChanging(Nullable<global::System.DateTime> value);
        partial void OnMeasurementTimeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> AcquisitionTime
        {
            get
            {
                return _AcquisitionTime;
            }
            set
            {
                OnAcquisitionTimeChanging(value);
                ReportPropertyChanging("AcquisitionTime");
                _AcquisitionTime = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("AcquisitionTime");
                OnAcquisitionTimeChanged();
            }
        }
        private Nullable<global::System.DateTime> _AcquisitionTime;
        partial void OnAcquisitionTimeChanging(Nullable<global::System.DateTime> value);
        partial void OnAcquisitionTimeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> Value
        {
            get
            {
                return _Value;
            }
            set
            {
                OnValueChanging(value);
                ReportPropertyChanging("Value");
                _Value = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Value");
                OnValueChanged();
            }
        }
        private Nullable<global::System.Decimal> _Value;
        partial void OnValueChanging(Nullable<global::System.Decimal> value);
        partial void OnValueChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Units
        {
            get
            {
                return _Units;
            }
            set
            {
                OnUnitsChanging(value);
                ReportPropertyChanging("Units");
                _Units = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Units");
                OnUnitsChanged();
            }
        }
        private global::System.String _Units;
        partial void OnUnitsChanging(global::System.String value);
        partial void OnUnitsChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> DeviceID
        {
            get
            {
                return _DeviceID;
            }
            set
            {
                OnDeviceIDChanging(value);
                ReportPropertyChanging("DeviceID");
                _DeviceID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DeviceID");
                OnDeviceIDChanged();
            }
        }
        private Nullable<global::System.Int64> _DeviceID;
        partial void OnDeviceIDChanging(Nullable<global::System.Int64> value);
        partial void OnDeviceIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> QualityBad
        {
            get
            {
                return _QualityBad;
            }
            set
            {
                OnQualityBadChanging(value);
                ReportPropertyChanging("QualityBad");
                _QualityBad = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("QualityBad");
                OnQualityBadChanged();
            }
        }
        private Nullable<global::System.Boolean> _QualityBad;
        partial void OnQualityBadChanging(Nullable<global::System.Boolean> value);
        partial void OnQualityBadChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 COSEMLogicalDeviceID
        {
            get
            {
                return _COSEMLogicalDeviceID;
            }
            set
            {
                if (_COSEMLogicalDeviceID != value)
                {
                    OnCOSEMLogicalDeviceIDChanging(value);
                    ReportPropertyChanging("COSEMLogicalDeviceID");
                    _COSEMLogicalDeviceID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("COSEMLogicalDeviceID");
                    OnCOSEMLogicalDeviceIDChanged();
                }
            }
        }
        private global::System.Int64 _COSEMLogicalDeviceID;
        partial void OnCOSEMLogicalDeviceIDChanging(global::System.Int64 value);
        partial void OnCOSEMLogicalDeviceIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Standard
        {
            get
            {
                return _Standard;
            }
            set
            {
                if (_Standard != value)
                {
                    OnStandardChanging(value);
                    ReportPropertyChanging("Standard");
                    _Standard = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Standard");
                    OnStandardChanged();
                }
            }
        }
        private global::System.Boolean _Standard;
        partial void OnStandardChanging(global::System.Boolean value);
        partial void OnStandardChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Guid> DataOwnerID
        {
            get
            {
                return _DataOwnerID;
            }
            set
            {
                OnDataOwnerIDChanging(value);
                ReportPropertyChanging("DataOwnerID");
                _DataOwnerID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DataOwnerID");
                OnDataOwnerIDChanged();
            }
        }
        private Nullable<global::System.Guid> _DataOwnerID;
        partial void OnDataOwnerIDChanging(Nullable<global::System.Guid> value);
        partial void OnDataOwnerIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Identifier
        {
            get
            {
                return _Identifier;
            }
            set
            {
                OnIdentifierChanging(value);
                ReportPropertyChanging("Identifier");
                _Identifier = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Identifier");
                OnIdentifierChanged();
            }
        }
        private global::System.String _Identifier;
        partial void OnIdentifierChanging(global::System.String value);
        partial void OnIdentifierChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ValueIdentifier
        {
            get
            {
                return _ValueIdentifier;
            }
            set
            {
                OnValueIdentifierChanging(value);
                ReportPropertyChanging("ValueIdentifier");
                _ValueIdentifier = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ValueIdentifier");
                OnValueIdentifierChanged();
            }
        }
        private global::System.String _ValueIdentifier;
        partial void OnValueIdentifierChanging(global::System.String value);
        partial void OnValueIdentifierChanged();

        #endregion

    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="web.Models", Name="ViewCOSEMClass")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ViewCOSEMClass : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ViewCOSEMClass.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="cOSEMClassID">Исходное значение свойства COSEMClassID.</param>
        /// <param name="standard">Исходное значение свойства Standard.</param>
        public static ViewCOSEMClass CreateViewCOSEMClass(global::System.Int64 id, global::System.Int32 cOSEMClassID, global::System.Boolean standard)
        {
            ViewCOSEMClass viewCOSEMClass = new ViewCOSEMClass();
            viewCOSEMClass.ID = id;
            viewCOSEMClass.COSEMClassID = cOSEMClassID;
            viewCOSEMClass.Standard = standard;
            return viewCOSEMClass;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int64 _ID;
        partial void OnIDChanging(global::System.Int64 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ClassName
        {
            get
            {
                return _ClassName;
            }
            set
            {
                OnClassNameChanging(value);
                ReportPropertyChanging("ClassName");
                _ClassName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ClassName");
                OnClassNameChanged();
            }
        }
        private global::System.String _ClassName;
        partial void OnClassNameChanging(global::System.String value);
        partial void OnClassNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> CardinalityMin
        {
            get
            {
                return _CardinalityMin;
            }
            set
            {
                OnCardinalityMinChanging(value);
                ReportPropertyChanging("CardinalityMin");
                _CardinalityMin = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CardinalityMin");
                OnCardinalityMinChanged();
            }
        }
        private Nullable<global::System.Int32> _CardinalityMin;
        partial void OnCardinalityMinChanging(Nullable<global::System.Int32> value);
        partial void OnCardinalityMinChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> CardinalityMax
        {
            get
            {
                return _CardinalityMax;
            }
            set
            {
                OnCardinalityMaxChanging(value);
                ReportPropertyChanging("CardinalityMax");
                _CardinalityMax = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CardinalityMax");
                OnCardinalityMaxChanged();
            }
        }
        private Nullable<global::System.Int32> _CardinalityMax;
        partial void OnCardinalityMaxChanging(Nullable<global::System.Int32> value);
        partial void OnCardinalityMaxChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 COSEMClassID
        {
            get
            {
                return _COSEMClassID;
            }
            set
            {
                if (_COSEMClassID != value)
                {
                    OnCOSEMClassIDChanging(value);
                    ReportPropertyChanging("COSEMClassID");
                    _COSEMClassID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("COSEMClassID");
                    OnCOSEMClassIDChanged();
                }
            }
        }
        private global::System.Int32 _COSEMClassID;
        partial void OnCOSEMClassIDChanging(global::System.Int32 value);
        partial void OnCOSEMClassIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Version
        {
            get
            {
                return _Version;
            }
            set
            {
                OnVersionChanging(value);
                ReportPropertyChanging("Version");
                _Version = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Version");
                OnVersionChanged();
            }
        }
        private global::System.String _Version;
        partial void OnVersionChanging(global::System.String value);
        partial void OnVersionChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Guid> DataOwnerID
        {
            get
            {
                return _DataOwnerID;
            }
            set
            {
                OnDataOwnerIDChanging(value);
                ReportPropertyChanging("DataOwnerID");
                _DataOwnerID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DataOwnerID");
                OnDataOwnerIDChanged();
            }
        }
        private Nullable<global::System.Guid> _DataOwnerID;
        partial void OnDataOwnerIDChanging(Nullable<global::System.Guid> value);
        partial void OnDataOwnerIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Standard
        {
            get
            {
                return _Standard;
            }
            set
            {
                if (_Standard != value)
                {
                    OnStandardChanging(value);
                    ReportPropertyChanging("Standard");
                    _Standard = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Standard");
                    OnStandardChanged();
                }
            }
        }
        private global::System.Boolean _Standard;
        partial void OnStandardChanging(global::System.Boolean value);
        partial void OnStandardChanged();

        #endregion

    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="web.Models", Name="ViewCOSEMComplexTypeField")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ViewCOSEMComplexTypeField : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ViewCOSEMComplexTypeField.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="aggregateTypeID">Исходное значение свойства AggregateTypeID.</param>
        /// <param name="typeID">Исходное значение свойства TypeID.</param>
        /// <param name="standard">Исходное значение свойства Standard.</param>
        public static ViewCOSEMComplexTypeField CreateViewCOSEMComplexTypeField(global::System.Int64 id, global::System.Int64 aggregateTypeID, global::System.Int64 typeID, global::System.Boolean standard)
        {
            ViewCOSEMComplexTypeField viewCOSEMComplexTypeField = new ViewCOSEMComplexTypeField();
            viewCOSEMComplexTypeField.ID = id;
            viewCOSEMComplexTypeField.AggregateTypeID = aggregateTypeID;
            viewCOSEMComplexTypeField.TypeID = typeID;
            viewCOSEMComplexTypeField.Standard = standard;
            return viewCOSEMComplexTypeField;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int64 _ID;
        partial void OnIDChanging(global::System.Int64 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 AggregateTypeID
        {
            get
            {
                return _AggregateTypeID;
            }
            set
            {
                if (_AggregateTypeID != value)
                {
                    OnAggregateTypeIDChanging(value);
                    ReportPropertyChanging("AggregateTypeID");
                    _AggregateTypeID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("AggregateTypeID");
                    OnAggregateTypeIDChanged();
                }
            }
        }
        private global::System.Int64 _AggregateTypeID;
        partial void OnAggregateTypeIDChanging(global::System.Int64 value);
        partial void OnAggregateTypeIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 TypeID
        {
            get
            {
                return _TypeID;
            }
            set
            {
                if (_TypeID != value)
                {
                    OnTypeIDChanging(value);
                    ReportPropertyChanging("TypeID");
                    _TypeID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("TypeID");
                    OnTypeIDChanged();
                }
            }
        }
        private global::System.Int64 _TypeID;
        partial void OnTypeIDChanging(global::System.Int64 value);
        partial void OnTypeIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Guid> DataOwnerID
        {
            get
            {
                return _DataOwnerID;
            }
            set
            {
                OnDataOwnerIDChanging(value);
                ReportPropertyChanging("DataOwnerID");
                _DataOwnerID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DataOwnerID");
                OnDataOwnerIDChanged();
            }
        }
        private Nullable<global::System.Guid> _DataOwnerID;
        partial void OnDataOwnerIDChanging(Nullable<global::System.Guid> value);
        partial void OnDataOwnerIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String TypeName
        {
            get
            {
                return _TypeName;
            }
            set
            {
                OnTypeNameChanging(value);
                ReportPropertyChanging("TypeName");
                _TypeName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("TypeName");
                OnTypeNameChanged();
            }
        }
        private global::System.String _TypeName;
        partial void OnTypeNameChanging(global::System.String value);
        partial void OnTypeNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String AggregateTypeName
        {
            get
            {
                return _AggregateTypeName;
            }
            set
            {
                OnAggregateTypeNameChanging(value);
                ReportPropertyChanging("AggregateTypeName");
                _AggregateTypeName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("AggregateTypeName");
                OnAggregateTypeNameChanged();
            }
        }
        private global::System.String _AggregateTypeName;
        partial void OnAggregateTypeNameChanging(global::System.String value);
        partial void OnAggregateTypeNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Standard
        {
            get
            {
                return _Standard;
            }
            set
            {
                if (_Standard != value)
                {
                    OnStandardChanging(value);
                    ReportPropertyChanging("Standard");
                    _Standard = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Standard");
                    OnStandardChanged();
                }
            }
        }
        private global::System.Boolean _Standard;
        partial void OnStandardChanging(global::System.Boolean value);
        partial void OnStandardChanged();

        #endregion

    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="web.Models", Name="ViewCOSEMDataType")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ViewCOSEMDataType : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ViewCOSEMDataType.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="standard">Исходное значение свойства Standard.</param>
        public static ViewCOSEMDataType CreateViewCOSEMDataType(global::System.Int64 id, global::System.Boolean standard)
        {
            ViewCOSEMDataType viewCOSEMDataType = new ViewCOSEMDataType();
            viewCOSEMDataType.ID = id;
            viewCOSEMDataType.Standard = standard;
            return viewCOSEMDataType;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int64 _ID;
        partial void OnIDChanging(global::System.Int64 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> AncestorTypeID
        {
            get
            {
                return _AncestorTypeID;
            }
            set
            {
                OnAncestorTypeIDChanging(value);
                ReportPropertyChanging("AncestorTypeID");
                _AncestorTypeID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("AncestorTypeID");
                OnAncestorTypeIDChanged();
            }
        }
        private Nullable<global::System.Int64> _AncestorTypeID;
        partial void OnAncestorTypeIDChanging(Nullable<global::System.Int64> value);
        partial void OnAncestorTypeIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> ItemBitSize
        {
            get
            {
                return _ItemBitSize;
            }
            set
            {
                OnItemBitSizeChanging(value);
                ReportPropertyChanging("ItemBitSize");
                _ItemBitSize = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ItemBitSize");
                OnItemBitSizeChanged();
            }
        }
        private Nullable<global::System.Int64> _ItemBitSize;
        partial void OnItemBitSizeChanging(Nullable<global::System.Int64> value);
        partial void OnItemBitSizeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> ItemCount
        {
            get
            {
                return _ItemCount;
            }
            set
            {
                OnItemCountChanging(value);
                ReportPropertyChanging("ItemCount");
                _ItemCount = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ItemCount");
                OnItemCountChanged();
            }
        }
        private Nullable<global::System.Int64> _ItemCount;
        partial void OnItemCountChanging(Nullable<global::System.Int64> value);
        partial void OnItemCountChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Guid> DataOwnerID
        {
            get
            {
                return _DataOwnerID;
            }
            set
            {
                OnDataOwnerIDChanging(value);
                ReportPropertyChanging("DataOwnerID");
                _DataOwnerID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DataOwnerID");
                OnDataOwnerIDChanged();
            }
        }
        private Nullable<global::System.Guid> _DataOwnerID;
        partial void OnDataOwnerIDChanging(Nullable<global::System.Guid> value);
        partial void OnDataOwnerIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String AncestorTypeName
        {
            get
            {
                return _AncestorTypeName;
            }
            set
            {
                OnAncestorTypeNameChanging(value);
                ReportPropertyChanging("AncestorTypeName");
                _AncestorTypeName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("AncestorTypeName");
                OnAncestorTypeNameChanged();
            }
        }
        private global::System.String _AncestorTypeName;
        partial void OnAncestorTypeNameChanging(global::System.String value);
        partial void OnAncestorTypeNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Standard
        {
            get
            {
                return _Standard;
            }
            set
            {
                if (_Standard != value)
                {
                    OnStandardChanging(value);
                    ReportPropertyChanging("Standard");
                    _Standard = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Standard");
                    OnStandardChanged();
                }
            }
        }
        private global::System.Boolean _Standard;
        partial void OnStandardChanging(global::System.Boolean value);
        partial void OnStandardChanged();

        #endregion

    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="web.Models", Name="ViewCOSEMLogicalDevice")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ViewCOSEMLogicalDevice : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ViewCOSEMLogicalDevice.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="deviceTypeID">Исходное значение свойства DeviceTypeID.</param>
        public static ViewCOSEMLogicalDevice CreateViewCOSEMLogicalDevice(global::System.Int64 id, global::System.Int64 deviceTypeID)
        {
            ViewCOSEMLogicalDevice viewCOSEMLogicalDevice = new ViewCOSEMLogicalDevice();
            viewCOSEMLogicalDevice.ID = id;
            viewCOSEMLogicalDevice.DeviceTypeID = deviceTypeID;
            return viewCOSEMLogicalDevice;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int64 _ID;
        partial void OnIDChanging(global::System.Int64 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 DeviceTypeID
        {
            get
            {
                return _DeviceTypeID;
            }
            set
            {
                if (_DeviceTypeID != value)
                {
                    OnDeviceTypeIDChanging(value);
                    ReportPropertyChanging("DeviceTypeID");
                    _DeviceTypeID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("DeviceTypeID");
                    OnDeviceTypeIDChanged();
                }
            }
        }
        private global::System.Int64 _DeviceTypeID;
        partial void OnDeviceTypeIDChanging(global::System.Int64 value);
        partial void OnDeviceTypeIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Guid> DataOwnerID
        {
            get
            {
                return _DataOwnerID;
            }
            set
            {
                OnDataOwnerIDChanging(value);
                ReportPropertyChanging("DataOwnerID");
                _DataOwnerID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DataOwnerID");
                OnDataOwnerIDChanged();
            }
        }
        private Nullable<global::System.Guid> _DataOwnerID;
        partial void OnDataOwnerIDChanging(Nullable<global::System.Guid> value);
        partial void OnDataOwnerIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DeviceTypeName
        {
            get
            {
                return _DeviceTypeName;
            }
            set
            {
                OnDeviceTypeNameChanging(value);
                ReportPropertyChanging("DeviceTypeName");
                _DeviceTypeName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DeviceTypeName");
                OnDeviceTypeNameChanged();
            }
        }
        private global::System.String _DeviceTypeName;
        partial void OnDeviceTypeNameChanging(global::System.String value);
        partial void OnDeviceTypeNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Standard
        {
            get
            {
                return _Standard;
            }
            set
            {
                OnStandardChanging(value);
                ReportPropertyChanging("Standard");
                _Standard = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Standard");
                OnStandardChanged();
            }
        }
        private Nullable<global::System.Boolean> _Standard;
        partial void OnStandardChanging(Nullable<global::System.Boolean> value);
        partial void OnStandardChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion

    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="web.Models", Name="ViewCOSEMMethod")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ViewCOSEMMethod : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ViewCOSEMMethod.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="cOSEMClassID">Исходное значение свойства COSEMClassID.</param>
        /// <param name="mandatory">Исходное значение свойства Mandatory.</param>
        /// <param name="standard">Исходное значение свойства Standard.</param>
        public static ViewCOSEMMethod CreateViewCOSEMMethod(global::System.Int64 id, global::System.Int64 cOSEMClassID, global::System.Boolean mandatory, global::System.Boolean standard)
        {
            ViewCOSEMMethod viewCOSEMMethod = new ViewCOSEMMethod();
            viewCOSEMMethod.ID = id;
            viewCOSEMMethod.COSEMClassID = cOSEMClassID;
            viewCOSEMMethod.Mandatory = mandatory;
            viewCOSEMMethod.Standard = standard;
            return viewCOSEMMethod;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int64 _ID;
        partial void OnIDChanging(global::System.Int64 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 COSEMClassID
        {
            get
            {
                return _COSEMClassID;
            }
            set
            {
                if (_COSEMClassID != value)
                {
                    OnCOSEMClassIDChanging(value);
                    ReportPropertyChanging("COSEMClassID");
                    _COSEMClassID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("COSEMClassID");
                    OnCOSEMClassIDChanged();
                }
            }
        }
        private global::System.Int64 _COSEMClassID;
        partial void OnCOSEMClassIDChanging(global::System.Int64 value);
        partial void OnCOSEMClassIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Mandatory
        {
            get
            {
                return _Mandatory;
            }
            set
            {
                if (_Mandatory != value)
                {
                    OnMandatoryChanging(value);
                    ReportPropertyChanging("Mandatory");
                    _Mandatory = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Mandatory");
                    OnMandatoryChanged();
                }
            }
        }
        private global::System.Boolean _Mandatory;
        partial void OnMandatoryChanging(global::System.Boolean value);
        partial void OnMandatoryChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Guid> DataOwnerID
        {
            get
            {
                return _DataOwnerID;
            }
            set
            {
                OnDataOwnerIDChanging(value);
                ReportPropertyChanging("DataOwnerID");
                _DataOwnerID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DataOwnerID");
                OnDataOwnerIDChanged();
            }
        }
        private Nullable<global::System.Guid> _DataOwnerID;
        partial void OnDataOwnerIDChanging(Nullable<global::System.Guid> value);
        partial void OnDataOwnerIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String COSEMClassName
        {
            get
            {
                return _COSEMClassName;
            }
            set
            {
                OnCOSEMClassNameChanging(value);
                ReportPropertyChanging("COSEMClassName");
                _COSEMClassName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("COSEMClassName");
                OnCOSEMClassNameChanged();
            }
        }
        private global::System.String _COSEMClassName;
        partial void OnCOSEMClassNameChanging(global::System.String value);
        partial void OnCOSEMClassNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Standard
        {
            get
            {
                return _Standard;
            }
            set
            {
                if (_Standard != value)
                {
                    OnStandardChanging(value);
                    ReportPropertyChanging("Standard");
                    _Standard = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Standard");
                    OnStandardChanged();
                }
            }
        }
        private global::System.Boolean _Standard;
        partial void OnStandardChanging(global::System.Boolean value);
        partial void OnStandardChanged();

        #endregion

    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="web.Models", Name="ViewCOSEMObject")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ViewCOSEMObject : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ViewCOSEMObject.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="cOSEMLogicalDeviceID">Исходное значение свойства COSEMLogicalDeviceID.</param>
        /// <param name="cOSEMClassID">Исходное значение свойства COSEMClassID.</param>
        /// <param name="deviceTypeID">Исходное значение свойства DeviceTypeID.</param>
        /// <param name="standard">Исходное значение свойства Standard.</param>
        public static ViewCOSEMObject CreateViewCOSEMObject(global::System.Int64 id, global::System.Int64 cOSEMLogicalDeviceID, global::System.Int64 cOSEMClassID, global::System.Int64 deviceTypeID, global::System.Boolean standard)
        {
            ViewCOSEMObject viewCOSEMObject = new ViewCOSEMObject();
            viewCOSEMObject.ID = id;
            viewCOSEMObject.COSEMLogicalDeviceID = cOSEMLogicalDeviceID;
            viewCOSEMObject.COSEMClassID = cOSEMClassID;
            viewCOSEMObject.DeviceTypeID = deviceTypeID;
            viewCOSEMObject.Standard = standard;
            return viewCOSEMObject;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int64 _ID;
        partial void OnIDChanging(global::System.Int64 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 COSEMLogicalDeviceID
        {
            get
            {
                return _COSEMLogicalDeviceID;
            }
            set
            {
                if (_COSEMLogicalDeviceID != value)
                {
                    OnCOSEMLogicalDeviceIDChanging(value);
                    ReportPropertyChanging("COSEMLogicalDeviceID");
                    _COSEMLogicalDeviceID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("COSEMLogicalDeviceID");
                    OnCOSEMLogicalDeviceIDChanged();
                }
            }
        }
        private global::System.Int64 _COSEMLogicalDeviceID;
        partial void OnCOSEMLogicalDeviceIDChanging(global::System.Int64 value);
        partial void OnCOSEMLogicalDeviceIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 COSEMClassID
        {
            get
            {
                return _COSEMClassID;
            }
            set
            {
                if (_COSEMClassID != value)
                {
                    OnCOSEMClassIDChanging(value);
                    ReportPropertyChanging("COSEMClassID");
                    _COSEMClassID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("COSEMClassID");
                    OnCOSEMClassIDChanged();
                }
            }
        }
        private global::System.Int64 _COSEMClassID;
        partial void OnCOSEMClassIDChanging(global::System.Int64 value);
        partial void OnCOSEMClassIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 DeviceTypeID
        {
            get
            {
                return _DeviceTypeID;
            }
            set
            {
                if (_DeviceTypeID != value)
                {
                    OnDeviceTypeIDChanging(value);
                    ReportPropertyChanging("DeviceTypeID");
                    _DeviceTypeID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("DeviceTypeID");
                    OnDeviceTypeIDChanged();
                }
            }
        }
        private global::System.Int64 _DeviceTypeID;
        partial void OnDeviceTypeIDChanging(global::System.Int64 value);
        partial void OnDeviceTypeIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String COSEMLogicalName
        {
            get
            {
                return _COSEMLogicalName;
            }
            set
            {
                OnCOSEMLogicalNameChanging(value);
                ReportPropertyChanging("COSEMLogicalName");
                _COSEMLogicalName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("COSEMLogicalName");
                OnCOSEMLogicalNameChanged();
            }
        }
        private global::System.String _COSEMLogicalName;
        partial void OnCOSEMLogicalNameChanging(global::System.String value);
        partial void OnCOSEMLogicalNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Guid> DataOwnerID
        {
            get
            {
                return _DataOwnerID;
            }
            set
            {
                OnDataOwnerIDChanging(value);
                ReportPropertyChanging("DataOwnerID");
                _DataOwnerID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DataOwnerID");
                OnDataOwnerIDChanged();
            }
        }
        private Nullable<global::System.Guid> _DataOwnerID;
        partial void OnDataOwnerIDChanging(Nullable<global::System.Guid> value);
        partial void OnDataOwnerIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String COSEMClassName
        {
            get
            {
                return _COSEMClassName;
            }
            set
            {
                OnCOSEMClassNameChanging(value);
                ReportPropertyChanging("COSEMClassName");
                _COSEMClassName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("COSEMClassName");
                OnCOSEMClassNameChanged();
            }
        }
        private global::System.String _COSEMClassName;
        partial void OnCOSEMClassNameChanging(global::System.String value);
        partial void OnCOSEMClassNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DeviceTypeName
        {
            get
            {
                return _DeviceTypeName;
            }
            set
            {
                OnDeviceTypeNameChanging(value);
                ReportPropertyChanging("DeviceTypeName");
                _DeviceTypeName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DeviceTypeName");
                OnDeviceTypeNameChanged();
            }
        }
        private global::System.String _DeviceTypeName;
        partial void OnDeviceTypeNameChanging(global::System.String value);
        partial void OnDeviceTypeNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Standard
        {
            get
            {
                return _Standard;
            }
            set
            {
                if (_Standard != value)
                {
                    OnStandardChanging(value);
                    ReportPropertyChanging("Standard");
                    _Standard = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Standard");
                    OnStandardChanged();
                }
            }
        }
        private global::System.Boolean _Standard;
        partial void OnStandardChanging(global::System.Boolean value);
        partial void OnStandardChanged();

        #endregion

    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="web.Models", Name="ViewCOSEMStaticAttributeValue")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ViewCOSEMStaticAttributeValue : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ViewCOSEMStaticAttributeValue.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="cOSEMAttibuteID">Исходное значение свойства COSEMAttibuteID.</param>
        /// <param name="cOSEMObjectID">Исходное значение свойства COSEMObjectID.</param>
        /// <param name="cOSEMDataTypeID">Исходное значение свойства COSEMDataTypeID.</param>
        public static ViewCOSEMStaticAttributeValue CreateViewCOSEMStaticAttributeValue(global::System.Int64 id, global::System.Int64 cOSEMAttibuteID, global::System.Int64 cOSEMObjectID, global::System.Int64 cOSEMDataTypeID)
        {
            ViewCOSEMStaticAttributeValue viewCOSEMStaticAttributeValue = new ViewCOSEMStaticAttributeValue();
            viewCOSEMStaticAttributeValue.ID = id;
            viewCOSEMStaticAttributeValue.COSEMAttibuteID = cOSEMAttibuteID;
            viewCOSEMStaticAttributeValue.COSEMObjectID = cOSEMObjectID;
            viewCOSEMStaticAttributeValue.COSEMDataTypeID = cOSEMDataTypeID;
            return viewCOSEMStaticAttributeValue;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int64 _ID;
        partial void OnIDChanging(global::System.Int64 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 COSEMAttibuteID
        {
            get
            {
                return _COSEMAttibuteID;
            }
            set
            {
                if (_COSEMAttibuteID != value)
                {
                    OnCOSEMAttibuteIDChanging(value);
                    ReportPropertyChanging("COSEMAttibuteID");
                    _COSEMAttibuteID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("COSEMAttibuteID");
                    OnCOSEMAttibuteIDChanged();
                }
            }
        }
        private global::System.Int64 _COSEMAttibuteID;
        partial void OnCOSEMAttibuteIDChanging(global::System.Int64 value);
        partial void OnCOSEMAttibuteIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 COSEMObjectID
        {
            get
            {
                return _COSEMObjectID;
            }
            set
            {
                if (_COSEMObjectID != value)
                {
                    OnCOSEMObjectIDChanging(value);
                    ReportPropertyChanging("COSEMObjectID");
                    _COSEMObjectID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("COSEMObjectID");
                    OnCOSEMObjectIDChanged();
                }
            }
        }
        private global::System.Int64 _COSEMObjectID;
        partial void OnCOSEMObjectIDChanging(global::System.Int64 value);
        partial void OnCOSEMObjectIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 COSEMDataTypeID
        {
            get
            {
                return _COSEMDataTypeID;
            }
            set
            {
                if (_COSEMDataTypeID != value)
                {
                    OnCOSEMDataTypeIDChanging(value);
                    ReportPropertyChanging("COSEMDataTypeID");
                    _COSEMDataTypeID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("COSEMDataTypeID");
                    OnCOSEMDataTypeIDChanged();
                }
            }
        }
        private global::System.Int64 _COSEMDataTypeID;
        partial void OnCOSEMDataTypeIDChanging(global::System.Int64 value);
        partial void OnCOSEMDataTypeIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Guid> DataOwnerID
        {
            get
            {
                return _DataOwnerID;
            }
            set
            {
                OnDataOwnerIDChanging(value);
                ReportPropertyChanging("DataOwnerID");
                _DataOwnerID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DataOwnerID");
                OnDataOwnerIDChanged();
            }
        }
        private Nullable<global::System.Guid> _DataOwnerID;
        partial void OnDataOwnerIDChanging(Nullable<global::System.Guid> value);
        partial void OnDataOwnerIDChanged();

        #endregion

    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="web.Models", Name="ViewCountry")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ViewCountry : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ViewCountry.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="dataOwnerID">Исходное значение свойства DataOwnerID.</param>
        public static ViewCountry CreateViewCountry(global::System.Int64 id, global::System.Guid dataOwnerID)
        {
            ViewCountry viewCountry = new ViewCountry();
            viewCountry.ID = id;
            viewCountry.DataOwnerID = dataOwnerID;
            return viewCountry;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int64 _ID;
        partial void OnIDChanging(global::System.Int64 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Country
        {
            get
            {
                return _Country;
            }
            set
            {
                OnCountryChanging(value);
                ReportPropertyChanging("Country");
                _Country = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Country");
                OnCountryChanged();
            }
        }
        private global::System.String _Country;
        partial void OnCountryChanging(global::System.String value);
        partial void OnCountryChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String PhoneCode
        {
            get
            {
                return _PhoneCode;
            }
            set
            {
                OnPhoneCodeChanging(value);
                ReportPropertyChanging("PhoneCode");
                _PhoneCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("PhoneCode");
                OnPhoneCodeChanged();
            }
        }
        private global::System.String _PhoneCode;
        partial void OnPhoneCodeChanging(global::System.String value);
        partial void OnPhoneCodeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid DataOwnerID
        {
            get
            {
                return _DataOwnerID;
            }
            set
            {
                if (_DataOwnerID != value)
                {
                    OnDataOwnerIDChanging(value);
                    ReportPropertyChanging("DataOwnerID");
                    _DataOwnerID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("DataOwnerID");
                    OnDataOwnerIDChanged();
                }
            }
        }
        private global::System.Guid _DataOwnerID;
        partial void OnDataOwnerIDChanging(global::System.Guid value);
        partial void OnDataOwnerIDChanged();

        #endregion

    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="web.Models", Name="ViewCurrentState")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ViewCurrentState : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ViewCurrentState.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="dataTypeID">Исходное значение свойства DataTypeID.</param>
        /// <param name="deviceID">Исходное значение свойства DeviceID.</param>
        public static ViewCurrentState CreateViewCurrentState(global::System.Int64 id, global::System.Int64 dataTypeID, global::System.Int64 deviceID)
        {
            ViewCurrentState viewCurrentState = new ViewCurrentState();
            viewCurrentState.ID = id;
            viewCurrentState.DataTypeID = dataTypeID;
            viewCurrentState.DeviceID = deviceID;
            return viewCurrentState;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int64 _ID;
        partial void OnIDChanging(global::System.Int64 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> MeasurementTime
        {
            get
            {
                return _MeasurementTime;
            }
            set
            {
                OnMeasurementTimeChanging(value);
                ReportPropertyChanging("MeasurementTime");
                _MeasurementTime = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("MeasurementTime");
                OnMeasurementTimeChanged();
            }
        }
        private Nullable<global::System.DateTime> _MeasurementTime;
        partial void OnMeasurementTimeChanging(Nullable<global::System.DateTime> value);
        partial void OnMeasurementTimeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> AcquisitionTime
        {
            get
            {
                return _AcquisitionTime;
            }
            set
            {
                OnAcquisitionTimeChanging(value);
                ReportPropertyChanging("AcquisitionTime");
                _AcquisitionTime = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("AcquisitionTime");
                OnAcquisitionTimeChanged();
            }
        }
        private Nullable<global::System.DateTime> _AcquisitionTime;
        partial void OnAcquisitionTimeChanging(Nullable<global::System.DateTime> value);
        partial void OnAcquisitionTimeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> Value
        {
            get
            {
                return _Value;
            }
            set
            {
                OnValueChanging(value);
                ReportPropertyChanging("Value");
                _Value = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Value");
                OnValueChanged();
            }
        }
        private Nullable<global::System.Decimal> _Value;
        partial void OnValueChanging(Nullable<global::System.Decimal> value);
        partial void OnValueChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Units
        {
            get
            {
                return _Units;
            }
            set
            {
                OnUnitsChanging(value);
                ReportPropertyChanging("Units");
                _Units = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Units");
                OnUnitsChanged();
            }
        }
        private global::System.String _Units;
        partial void OnUnitsChanging(global::System.String value);
        partial void OnUnitsChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 DataTypeID
        {
            get
            {
                return _DataTypeID;
            }
            set
            {
                if (_DataTypeID != value)
                {
                    OnDataTypeIDChanging(value);
                    ReportPropertyChanging("DataTypeID");
                    _DataTypeID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("DataTypeID");
                    OnDataTypeIDChanged();
                }
            }
        }
        private global::System.Int64 _DataTypeID;
        partial void OnDataTypeIDChanging(global::System.Int64 value);
        partial void OnDataTypeIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 DeviceID
        {
            get
            {
                return _DeviceID;
            }
            set
            {
                if (_DeviceID != value)
                {
                    OnDeviceIDChanging(value);
                    ReportPropertyChanging("DeviceID");
                    _DeviceID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("DeviceID");
                    OnDeviceIDChanged();
                }
            }
        }
        private global::System.Int64 _DeviceID;
        partial void OnDeviceIDChanging(global::System.Int64 value);
        partial void OnDeviceIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> QualityBad
        {
            get
            {
                return _QualityBad;
            }
            set
            {
                OnQualityBadChanging(value);
                ReportPropertyChanging("QualityBad");
                _QualityBad = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("QualityBad");
                OnQualityBadChanged();
            }
        }
        private Nullable<global::System.Boolean> _QualityBad;
        partial void OnQualityBadChanging(Nullable<global::System.Boolean> value);
        partial void OnQualityBadChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Guid> DataOwnerID
        {
            get
            {
                return _DataOwnerID;
            }
            set
            {
                OnDataOwnerIDChanging(value);
                ReportPropertyChanging("DataOwnerID");
                _DataOwnerID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DataOwnerID");
                OnDataOwnerIDChanged();
            }
        }
        private Nullable<global::System.Guid> _DataOwnerID;
        partial void OnDataOwnerIDChanging(Nullable<global::System.Guid> value);
        partial void OnDataOwnerIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ValueIdentifier
        {
            get
            {
                return _ValueIdentifier;
            }
            set
            {
                OnValueIdentifierChanging(value);
                ReportPropertyChanging("ValueIdentifier");
                _ValueIdentifier = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ValueIdentifier");
                OnValueIdentifierChanged();
            }
        }
        private global::System.String _ValueIdentifier;
        partial void OnValueIdentifierChanging(global::System.String value);
        partial void OnValueIdentifierChanged();

        #endregion

    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="web.Models", Name="ViewDataPoint")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ViewDataPoint : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ViewDataPoint.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="acquisitionTime">Исходное значение свойства AcquisitionTime.</param>
        /// <param name="value">Исходное значение свойства Value.</param>
        /// <param name="qualityBad">Исходное значение свойства QualityBad.</param>
        /// <param name="elementID">Исходное значение свойства ElementID.</param>
        public static ViewDataPoint CreateViewDataPoint(global::System.Int64 id, global::System.DateTime acquisitionTime, global::System.Decimal value, global::System.Boolean qualityBad, global::System.Int64 elementID)
        {
            ViewDataPoint viewDataPoint = new ViewDataPoint();
            viewDataPoint.ID = id;
            viewDataPoint.AcquisitionTime = acquisitionTime;
            viewDataPoint.Value = value;
            viewDataPoint.QualityBad = qualityBad;
            viewDataPoint.ElementID = elementID;
            return viewDataPoint;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int64 _ID;
        partial void OnIDChanging(global::System.Int64 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> MeasurementTime
        {
            get
            {
                return _MeasurementTime;
            }
            set
            {
                OnMeasurementTimeChanging(value);
                ReportPropertyChanging("MeasurementTime");
                _MeasurementTime = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("MeasurementTime");
                OnMeasurementTimeChanged();
            }
        }
        private Nullable<global::System.DateTime> _MeasurementTime;
        partial void OnMeasurementTimeChanging(Nullable<global::System.DateTime> value);
        partial void OnMeasurementTimeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime AcquisitionTime
        {
            get
            {
                return _AcquisitionTime;
            }
            set
            {
                if (_AcquisitionTime != value)
                {
                    OnAcquisitionTimeChanging(value);
                    ReportPropertyChanging("AcquisitionTime");
                    _AcquisitionTime = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("AcquisitionTime");
                    OnAcquisitionTimeChanged();
                }
            }
        }
        private global::System.DateTime _AcquisitionTime;
        partial void OnAcquisitionTimeChanging(global::System.DateTime value);
        partial void OnAcquisitionTimeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Decimal Value
        {
            get
            {
                return _Value;
            }
            set
            {
                if (_Value != value)
                {
                    OnValueChanging(value);
                    ReportPropertyChanging("Value");
                    _Value = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Value");
                    OnValueChanged();
                }
            }
        }
        private global::System.Decimal _Value;
        partial void OnValueChanging(global::System.Decimal value);
        partial void OnValueChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Units
        {
            get
            {
                return _Units;
            }
            set
            {
                OnUnitsChanging(value);
                ReportPropertyChanging("Units");
                _Units = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Units");
                OnUnitsChanged();
            }
        }
        private global::System.String _Units;
        partial void OnUnitsChanging(global::System.String value);
        partial void OnUnitsChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> SessionID
        {
            get
            {
                return _SessionID;
            }
            set
            {
                OnSessionIDChanging(value);
                ReportPropertyChanging("SessionID");
                _SessionID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SessionID");
                OnSessionIDChanged();
            }
        }
        private Nullable<global::System.Int64> _SessionID;
        partial void OnSessionIDChanging(Nullable<global::System.Int64> value);
        partial void OnSessionIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> IsOBIS
        {
            get
            {
                return _IsOBIS;
            }
            set
            {
                OnIsOBISChanging(value);
                ReportPropertyChanging("IsOBIS");
                _IsOBIS = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsOBIS");
                OnIsOBISChanged();
            }
        }
        private Nullable<global::System.Boolean> _IsOBIS;
        partial void OnIsOBISChanging(Nullable<global::System.Boolean> value);
        partial void OnIsOBISChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean QualityBad
        {
            get
            {
                return _QualityBad;
            }
            set
            {
                if (_QualityBad != value)
                {
                    OnQualityBadChanging(value);
                    ReportPropertyChanging("QualityBad");
                    _QualityBad = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("QualityBad");
                    OnQualityBadChanged();
                }
            }
        }
        private global::System.Boolean _QualityBad;
        partial void OnQualityBadChanging(global::System.Boolean value);
        partial void OnQualityBadChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Guid> DataOwnerID
        {
            get
            {
                return _DataOwnerID;
            }
            set
            {
                OnDataOwnerIDChanging(value);
                ReportPropertyChanging("DataOwnerID");
                _DataOwnerID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DataOwnerID");
                OnDataOwnerIDChanged();
            }
        }
        private Nullable<global::System.Guid> _DataOwnerID;
        partial void OnDataOwnerIDChanging(Nullable<global::System.Guid> value);
        partial void OnDataOwnerIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 ElementID
        {
            get
            {
                return _ElementID;
            }
            set
            {
                if (_ElementID != value)
                {
                    OnElementIDChanging(value);
                    ReportPropertyChanging("ElementID");
                    _ElementID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ElementID");
                    OnElementIDChanged();
                }
            }
        }
        private global::System.Int64 _ElementID;
        partial void OnElementIDChanging(global::System.Int64 value);
        partial void OnElementIDChanged();

        #endregion

    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="web.Models", Name="ViewDataType")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ViewDataType : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ViewDataType.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="cOSEMAttributeID">Исходное значение свойства COSEMAttributeID.</param>
        /// <param name="cOSEMObjectID">Исходное значение свойства COSEMObjectID.</param>
        /// <param name="standard">Исходное значение свойства Standard.</param>
        public static ViewDataType CreateViewDataType(global::System.Int64 id, global::System.Int64 cOSEMAttributeID, global::System.Int64 cOSEMObjectID, global::System.Boolean standard)
        {
            ViewDataType viewDataType = new ViewDataType();
            viewDataType.ID = id;
            viewDataType.COSEMAttributeID = cOSEMAttributeID;
            viewDataType.COSEMObjectID = cOSEMObjectID;
            viewDataType.Standard = standard;
            return viewDataType;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int64 _ID;
        partial void OnIDChanging(global::System.Int64 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 COSEMAttributeID
        {
            get
            {
                return _COSEMAttributeID;
            }
            set
            {
                if (_COSEMAttributeID != value)
                {
                    OnCOSEMAttributeIDChanging(value);
                    ReportPropertyChanging("COSEMAttributeID");
                    _COSEMAttributeID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("COSEMAttributeID");
                    OnCOSEMAttributeIDChanged();
                }
            }
        }
        private global::System.Int64 _COSEMAttributeID;
        partial void OnCOSEMAttributeIDChanging(global::System.Int64 value);
        partial void OnCOSEMAttributeIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 COSEMObjectID
        {
            get
            {
                return _COSEMObjectID;
            }
            set
            {
                if (_COSEMObjectID != value)
                {
                    OnCOSEMObjectIDChanging(value);
                    ReportPropertyChanging("COSEMObjectID");
                    _COSEMObjectID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("COSEMObjectID");
                    OnCOSEMObjectIDChanged();
                }
            }
        }
        private global::System.Int64 _COSEMObjectID;
        partial void OnCOSEMObjectIDChanging(global::System.Int64 value);
        partial void OnCOSEMObjectIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Guid> DataOwnerID
        {
            get
            {
                return _DataOwnerID;
            }
            set
            {
                OnDataOwnerIDChanging(value);
                ReportPropertyChanging("DataOwnerID");
                _DataOwnerID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DataOwnerID");
                OnDataOwnerIDChanged();
            }
        }
        private Nullable<global::System.Guid> _DataOwnerID;
        partial void OnDataOwnerIDChanging(Nullable<global::System.Guid> value);
        partial void OnDataOwnerIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Identifier
        {
            get
            {
                return _Identifier;
            }
            set
            {
                OnIdentifierChanging(value);
                ReportPropertyChanging("Identifier");
                _Identifier = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Identifier");
                OnIdentifierChanged();
            }
        }
        private global::System.String _Identifier;
        partial void OnIdentifierChanging(global::System.String value);
        partial void OnIdentifierChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Standard
        {
            get
            {
                return _Standard;
            }
            set
            {
                if (_Standard != value)
                {
                    OnStandardChanging(value);
                    ReportPropertyChanging("Standard");
                    _Standard = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Standard");
                    OnStandardChanged();
                }
            }
        }
        private global::System.Boolean _Standard;
        partial void OnStandardChanging(global::System.Boolean value);
        partial void OnStandardChanged();

        #endregion

    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="web.Models", Name="ViewDevice")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ViewDevice : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ViewDevice.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="groupID">Исходное значение свойства GroupID.</param>
        /// <param name="typeID">Исходное значение свойства TypeID.</param>
        public static ViewDevice CreateViewDevice(global::System.Int64 id, global::System.Int64 groupID, global::System.Int64 typeID)
        {
            ViewDevice viewDevice = new ViewDevice();
            viewDevice.ID = id;
            viewDevice.GroupID = groupID;
            viewDevice.TypeID = typeID;
            return viewDevice;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int64 _ID;
        partial void OnIDChanging(global::System.Int64 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String InternalAddress
        {
            get
            {
                return _InternalAddress;
            }
            set
            {
                OnInternalAddressChanging(value);
                ReportPropertyChanging("InternalAddress");
                _InternalAddress = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("InternalAddress");
                OnInternalAddressChanged();
            }
        }
        private global::System.String _InternalAddress;
        partial void OnInternalAddressChanging(global::System.String value);
        partial void OnInternalAddressChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String AddressType
        {
            get
            {
                return _AddressType;
            }
            set
            {
                OnAddressTypeChanging(value);
                ReportPropertyChanging("AddressType");
                _AddressType = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("AddressType");
                OnAddressTypeChanged();
            }
        }
        private global::System.String _AddressType;
        partial void OnAddressTypeChanging(global::System.String value);
        partial void OnAddressTypeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Port
        {
            get
            {
                return _Port;
            }
            set
            {
                OnPortChanging(value);
                ReportPropertyChanging("Port");
                _Port = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Port");
                OnPortChanged();
            }
        }
        private global::System.String _Port;
        partial void OnPortChanging(global::System.String value);
        partial void OnPortChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 GroupID
        {
            get
            {
                return _GroupID;
            }
            set
            {
                if (_GroupID != value)
                {
                    OnGroupIDChanging(value);
                    ReportPropertyChanging("GroupID");
                    _GroupID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("GroupID");
                    OnGroupIDChanged();
                }
            }
        }
        private global::System.Int64 _GroupID;
        partial void OnGroupIDChanging(global::System.Int64 value);
        partial void OnGroupIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 TypeID
        {
            get
            {
                return _TypeID;
            }
            set
            {
                if (_TypeID != value)
                {
                    OnTypeIDChanging(value);
                    ReportPropertyChanging("TypeID");
                    _TypeID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("TypeID");
                    OnTypeIDChanged();
                }
            }
        }
        private global::System.Int64 _TypeID;
        partial void OnTypeIDChanging(global::System.Int64 value);
        partial void OnTypeIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> OwnerID
        {
            get
            {
                return _OwnerID;
            }
            set
            {
                OnOwnerIDChanging(value);
                ReportPropertyChanging("OwnerID");
                _OwnerID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("OwnerID");
                OnOwnerIDChanged();
            }
        }
        private Nullable<global::System.Int64> _OwnerID;
        partial void OnOwnerIDChanging(Nullable<global::System.Int64> value);
        partial void OnOwnerIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String IP1
        {
            get
            {
                return _IP1;
            }
            set
            {
                OnIP1Changing(value);
                ReportPropertyChanging("IP1");
                _IP1 = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("IP1");
                OnIP1Changed();
            }
        }
        private global::System.String _IP1;
        partial void OnIP1Changing(global::System.String value);
        partial void OnIP1Changed();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String IP2
        {
            get
            {
                return _IP2;
            }
            set
            {
                OnIP2Changing(value);
                ReportPropertyChanging("IP2");
                _IP2 = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("IP2");
                OnIP2Changed();
            }
        }
        private global::System.String _IP2;
        partial void OnIP2Changing(global::System.String value);
        partial void OnIP2Changed();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String IP3
        {
            get
            {
                return _IP3;
            }
            set
            {
                OnIP3Changing(value);
                ReportPropertyChanging("IP3");
                _IP3 = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("IP3");
                OnIP3Changed();
            }
        }
        private global::System.String _IP3;
        partial void OnIP3Changing(global::System.String value);
        partial void OnIP3Changed();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String IP4
        {
            get
            {
                return _IP4;
            }
            set
            {
                OnIP4Changing(value);
                ReportPropertyChanging("IP4");
                _IP4 = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("IP4");
                OnIP4Changed();
            }
        }
        private global::System.String _IP4;
        partial void OnIP4Changing(global::System.String value);
        partial void OnIP4Changed();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SecondaryPort
        {
            get
            {
                return _SecondaryPort;
            }
            set
            {
                OnSecondaryPortChanging(value);
                ReportPropertyChanging("SecondaryPort");
                _SecondaryPort = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("SecondaryPort");
                OnSecondaryPortChanged();
            }
        }
        private global::System.String _SecondaryPort;
        partial void OnSecondaryPortChanging(global::System.String value);
        partial void OnSecondaryPortChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SecondaryIP1
        {
            get
            {
                return _SecondaryIP1;
            }
            set
            {
                OnSecondaryIP1Changing(value);
                ReportPropertyChanging("SecondaryIP1");
                _SecondaryIP1 = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("SecondaryIP1");
                OnSecondaryIP1Changed();
            }
        }
        private global::System.String _SecondaryIP1;
        partial void OnSecondaryIP1Changing(global::System.String value);
        partial void OnSecondaryIP1Changed();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SecondaryIP2
        {
            get
            {
                return _SecondaryIP2;
            }
            set
            {
                OnSecondaryIP2Changing(value);
                ReportPropertyChanging("SecondaryIP2");
                _SecondaryIP2 = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("SecondaryIP2");
                OnSecondaryIP2Changed();
            }
        }
        private global::System.String _SecondaryIP2;
        partial void OnSecondaryIP2Changing(global::System.String value);
        partial void OnSecondaryIP2Changed();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SecondaryIP3
        {
            get
            {
                return _SecondaryIP3;
            }
            set
            {
                OnSecondaryIP3Changing(value);
                ReportPropertyChanging("SecondaryIP3");
                _SecondaryIP3 = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("SecondaryIP3");
                OnSecondaryIP3Changed();
            }
        }
        private global::System.String _SecondaryIP3;
        partial void OnSecondaryIP3Changing(global::System.String value);
        partial void OnSecondaryIP3Changed();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SecondaryIP4
        {
            get
            {
                return _SecondaryIP4;
            }
            set
            {
                OnSecondaryIP4Changing(value);
                ReportPropertyChanging("SecondaryIP4");
                _SecondaryIP4 = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("SecondaryIP4");
                OnSecondaryIP4Changed();
            }
        }
        private global::System.String _SecondaryIP4;
        partial void OnSecondaryIP4Changing(global::System.String value);
        partial void OnSecondaryIP4Changed();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Guid> DataOwnerID
        {
            get
            {
                return _DataOwnerID;
            }
            set
            {
                OnDataOwnerIDChanging(value);
                ReportPropertyChanging("DataOwnerID");
                _DataOwnerID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DataOwnerID");
                OnDataOwnerIDChanged();
            }
        }
        private Nullable<global::System.Guid> _DataOwnerID;
        partial void OnDataOwnerIDChanging(Nullable<global::System.Guid> value);
        partial void OnDataOwnerIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> LocationAddressID
        {
            get
            {
                return _LocationAddressID;
            }
            set
            {
                OnLocationAddressIDChanging(value);
                ReportPropertyChanging("LocationAddressID");
                _LocationAddressID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LocationAddressID");
                OnLocationAddressIDChanged();
            }
        }
        private Nullable<global::System.Int64> _LocationAddressID;
        partial void OnLocationAddressIDChanging(Nullable<global::System.Int64> value);
        partial void OnLocationAddressIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> BillAddressID
        {
            get
            {
                return _BillAddressID;
            }
            set
            {
                OnBillAddressIDChanging(value);
                ReportPropertyChanging("BillAddressID");
                _BillAddressID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("BillAddressID");
                OnBillAddressIDChanged();
            }
        }
        private Nullable<global::System.Int64> _BillAddressID;
        partial void OnBillAddressIDChanging(Nullable<global::System.Int64> value);
        partial void OnBillAddressIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> LocationID
        {
            get
            {
                return _LocationID;
            }
            set
            {
                OnLocationIDChanging(value);
                ReportPropertyChanging("LocationID");
                _LocationID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LocationID");
                OnLocationIDChanged();
            }
        }
        private Nullable<global::System.Int64> _LocationID;
        partial void OnLocationIDChanging(Nullable<global::System.Int64> value);
        partial void OnLocationIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DeviceTypeName
        {
            get
            {
                return _DeviceTypeName;
            }
            set
            {
                OnDeviceTypeNameChanging(value);
                ReportPropertyChanging("DeviceTypeName");
                _DeviceTypeName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DeviceTypeName");
                OnDeviceTypeNameChanged();
            }
        }
        private global::System.String _DeviceTypeName;
        partial void OnDeviceTypeNameChanging(global::System.String value);
        partial void OnDeviceTypeNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String GroupName
        {
            get
            {
                return _GroupName;
            }
            set
            {
                OnGroupNameChanging(value);
                ReportPropertyChanging("GroupName");
                _GroupName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("GroupName");
                OnGroupNameChanged();
            }
        }
        private global::System.String _GroupName;
        partial void OnGroupNameChanging(global::System.String value);
        partial void OnGroupNameChanged();

        #endregion

    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="web.Models", Name="ViewDeviceDataType")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ViewDeviceDataType : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ViewDeviceDataType.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="typeID">Исходное значение свойства TypeID.</param>
        /// <param name="deviceID">Исходное значение свойства DeviceID.</param>
        public static ViewDeviceDataType CreateViewDeviceDataType(global::System.Int64 id, global::System.Int64 typeID, global::System.Int64 deviceID)
        {
            ViewDeviceDataType viewDeviceDataType = new ViewDeviceDataType();
            viewDeviceDataType.ID = id;
            viewDeviceDataType.TypeID = typeID;
            viewDeviceDataType.DeviceID = deviceID;
            return viewDeviceDataType;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int64 _ID;
        partial void OnIDChanging(global::System.Int64 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 TypeID
        {
            get
            {
                return _TypeID;
            }
            set
            {
                if (_TypeID != value)
                {
                    OnTypeIDChanging(value);
                    ReportPropertyChanging("TypeID");
                    _TypeID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("TypeID");
                    OnTypeIDChanged();
                }
            }
        }
        private global::System.Int64 _TypeID;
        partial void OnTypeIDChanging(global::System.Int64 value);
        partial void OnTypeIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 DeviceID
        {
            get
            {
                return _DeviceID;
            }
            set
            {
                if (_DeviceID != value)
                {
                    OnDeviceIDChanging(value);
                    ReportPropertyChanging("DeviceID");
                    _DeviceID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("DeviceID");
                    OnDeviceIDChanged();
                }
            }
        }
        private global::System.Int64 _DeviceID;
        partial void OnDeviceIDChanging(global::System.Int64 value);
        partial void OnDeviceIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Guid> DataOwnerID
        {
            get
            {
                return _DataOwnerID;
            }
            set
            {
                OnDataOwnerIDChanging(value);
                ReportPropertyChanging("DataOwnerID");
                _DataOwnerID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DataOwnerID");
                OnDataOwnerIDChanged();
            }
        }
        private Nullable<global::System.Guid> _DataOwnerID;
        partial void OnDataOwnerIDChanging(Nullable<global::System.Guid> value);
        partial void OnDataOwnerIDChanged();

        #endregion

    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="web.Models", Name="ViewDeviceOwner")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ViewDeviceOwner : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ViewDeviceOwner.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="dataOwnerID">Исходное значение свойства DataOwnerID.</param>
        public static ViewDeviceOwner CreateViewDeviceOwner(global::System.Int64 id, global::System.Guid dataOwnerID)
        {
            ViewDeviceOwner viewDeviceOwner = new ViewDeviceOwner();
            viewDeviceOwner.ID = id;
            viewDeviceOwner.DataOwnerID = dataOwnerID;
            return viewDeviceOwner;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int64 _ID;
        partial void OnIDChanging(global::System.Int64 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String FirstName
        {
            get
            {
                return _FirstName;
            }
            set
            {
                OnFirstNameChanging(value);
                ReportPropertyChanging("FirstName");
                _FirstName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("FirstName");
                OnFirstNameChanged();
            }
        }
        private global::System.String _FirstName;
        partial void OnFirstNameChanging(global::System.String value);
        partial void OnFirstNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String LastName
        {
            get
            {
                return _LastName;
            }
            set
            {
                OnLastNameChanging(value);
                ReportPropertyChanging("LastName");
                _LastName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("LastName");
                OnLastNameChanged();
            }
        }
        private global::System.String _LastName;
        partial void OnLastNameChanging(global::System.String value);
        partial void OnLastNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Company
        {
            get
            {
                return _Company;
            }
            set
            {
                OnCompanyChanging(value);
                ReportPropertyChanging("Company");
                _Company = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Company");
                OnCompanyChanged();
            }
        }
        private global::System.String _Company;
        partial void OnCompanyChanging(global::System.String value);
        partial void OnCompanyChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String EMail
        {
            get
            {
                return _EMail;
            }
            set
            {
                OnEMailChanging(value);
                ReportPropertyChanging("EMail");
                _EMail = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("EMail");
                OnEMailChanged();
            }
        }
        private global::System.String _EMail;
        partial void OnEMailChanging(global::System.String value);
        partial void OnEMailChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Phone
        {
            get
            {
                return _Phone;
            }
            set
            {
                OnPhoneChanging(value);
                ReportPropertyChanging("Phone");
                _Phone = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Phone");
                OnPhoneChanged();
            }
        }
        private global::System.String _Phone;
        partial void OnPhoneChanging(global::System.String value);
        partial void OnPhoneChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Cell
        {
            get
            {
                return _Cell;
            }
            set
            {
                OnCellChanging(value);
                ReportPropertyChanging("Cell");
                _Cell = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Cell");
                OnCellChanged();
            }
        }
        private global::System.String _Cell;
        partial void OnCellChanging(global::System.String value);
        partial void OnCellChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid DataOwnerID
        {
            get
            {
                return _DataOwnerID;
            }
            set
            {
                if (_DataOwnerID != value)
                {
                    OnDataOwnerIDChanging(value);
                    ReportPropertyChanging("DataOwnerID");
                    _DataOwnerID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("DataOwnerID");
                    OnDataOwnerIDChanged();
                }
            }
        }
        private global::System.Guid _DataOwnerID;
        partial void OnDataOwnerIDChanging(global::System.Guid value);
        partial void OnDataOwnerIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Apartament
        {
            get
            {
                return _Apartament;
            }
            set
            {
                OnApartamentChanging(value);
                ReportPropertyChanging("Apartament");
                _Apartament = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Apartament");
                OnApartamentChanged();
            }
        }
        private global::System.String _Apartament;
        partial void OnApartamentChanging(global::System.String value);
        partial void OnApartamentChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Building
        {
            get
            {
                return _Building;
            }
            set
            {
                OnBuildingChanging(value);
                ReportPropertyChanging("Building");
                _Building = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Building");
                OnBuildingChanged();
            }
        }
        private global::System.String _Building;
        partial void OnBuildingChanging(global::System.String value);
        partial void OnBuildingChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Street
        {
            get
            {
                return _Street;
            }
            set
            {
                OnStreetChanging(value);
                ReportPropertyChanging("Street");
                _Street = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Street");
                OnStreetChanged();
            }
        }
        private global::System.String _Street;
        partial void OnStreetChanging(global::System.String value);
        partial void OnStreetChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String City
        {
            get
            {
                return _City;
            }
            set
            {
                OnCityChanging(value);
                ReportPropertyChanging("City");
                _City = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("City");
                OnCityChanged();
            }
        }
        private global::System.String _City;
        partial void OnCityChanging(global::System.String value);
        partial void OnCityChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String State
        {
            get
            {
                return _State;
            }
            set
            {
                OnStateChanging(value);
                ReportPropertyChanging("State");
                _State = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("State");
                OnStateChanged();
            }
        }
        private global::System.String _State;
        partial void OnStateChanging(global::System.String value);
        partial void OnStateChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Country
        {
            get
            {
                return _Country;
            }
            set
            {
                OnCountryChanging(value);
                ReportPropertyChanging("Country");
                _Country = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Country");
                OnCountryChanged();
            }
        }
        private global::System.String _Country;
        partial void OnCountryChanging(global::System.String value);
        partial void OnCountryChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ZipCode
        {
            get
            {
                return _ZipCode;
            }
            set
            {
                OnZipCodeChanging(value);
                ReportPropertyChanging("ZipCode");
                _ZipCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ZipCode");
                OnZipCodeChanged();
            }
        }
        private global::System.String _ZipCode;
        partial void OnZipCodeChanging(global::System.String value);
        partial void OnZipCodeChanged();

        #endregion

    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="web.Models", Name="ViewDeviceScheduleParams")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ViewDeviceScheduleParams : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ViewDeviceScheduleParams.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="monday">Исходное значение свойства Monday.</param>
        /// <param name="tuesday">Исходное значение свойства Tuesday.</param>
        /// <param name="wednesday">Исходное значение свойства Wednesday.</param>
        /// <param name="thursday">Исходное значение свойства Thursday.</param>
        /// <param name="friday">Исходное значение свойства Friday.</param>
        /// <param name="saturday">Исходное значение свойства Saturday.</param>
        /// <param name="sunday">Исходное значение свойства Sunday.</param>
        /// <param name="groupID">Исходное значение свойства GroupID.</param>
        public static ViewDeviceScheduleParams CreateViewDeviceScheduleParams(global::System.Int64 id, global::System.Boolean monday, global::System.Boolean tuesday, global::System.Boolean wednesday, global::System.Boolean thursday, global::System.Boolean friday, global::System.Boolean saturday, global::System.Boolean sunday, global::System.Int64 groupID)
        {
            ViewDeviceScheduleParams viewDeviceScheduleParams = new ViewDeviceScheduleParams();
            viewDeviceScheduleParams.ID = id;
            viewDeviceScheduleParams.Monday = monday;
            viewDeviceScheduleParams.Tuesday = tuesday;
            viewDeviceScheduleParams.Wednesday = wednesday;
            viewDeviceScheduleParams.Thursday = thursday;
            viewDeviceScheduleParams.Friday = friday;
            viewDeviceScheduleParams.Saturday = saturday;
            viewDeviceScheduleParams.Sunday = sunday;
            viewDeviceScheduleParams.GroupID = groupID;
            return viewDeviceScheduleParams;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int64 _ID;
        partial void OnIDChanging(global::System.Int64 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String MinutesE
        {
            get
            {
                return _MinutesE;
            }
            set
            {
                OnMinutesEChanging(value);
                ReportPropertyChanging("MinutesE");
                _MinutesE = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("MinutesE");
                OnMinutesEChanged();
            }
        }
        private global::System.String _MinutesE;
        partial void OnMinutesEChanging(global::System.String value);
        partial void OnMinutesEChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String MinutesG
        {
            get
            {
                return _MinutesG;
            }
            set
            {
                OnMinutesGChanging(value);
                ReportPropertyChanging("MinutesG");
                _MinutesG = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("MinutesG");
                OnMinutesGChanged();
            }
        }
        private global::System.String _MinutesG;
        partial void OnMinutesGChanging(global::System.String value);
        partial void OnMinutesGChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String MinMode
        {
            get
            {
                return _MinMode;
            }
            set
            {
                OnMinModeChanging(value);
                ReportPropertyChanging("MinMode");
                _MinMode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("MinMode");
                OnMinModeChanged();
            }
        }
        private global::System.String _MinMode;
        partial void OnMinModeChanging(global::System.String value);
        partial void OnMinModeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String HoursE
        {
            get
            {
                return _HoursE;
            }
            set
            {
                OnHoursEChanging(value);
                ReportPropertyChanging("HoursE");
                _HoursE = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("HoursE");
                OnHoursEChanged();
            }
        }
        private global::System.String _HoursE;
        partial void OnHoursEChanging(global::System.String value);
        partial void OnHoursEChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String HoursG
        {
            get
            {
                return _HoursG;
            }
            set
            {
                OnHoursGChanging(value);
                ReportPropertyChanging("HoursG");
                _HoursG = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("HoursG");
                OnHoursGChanged();
            }
        }
        private global::System.String _HoursG;
        partial void OnHoursGChanging(global::System.String value);
        partial void OnHoursGChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String HourMode
        {
            get
            {
                return _HourMode;
            }
            set
            {
                OnHourModeChanging(value);
                ReportPropertyChanging("HourMode");
                _HourMode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("HourMode");
                OnHourModeChanged();
            }
        }
        private global::System.String _HourMode;
        partial void OnHourModeChanging(global::System.String value);
        partial void OnHourModeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DaysE
        {
            get
            {
                return _DaysE;
            }
            set
            {
                OnDaysEChanging(value);
                ReportPropertyChanging("DaysE");
                _DaysE = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DaysE");
                OnDaysEChanged();
            }
        }
        private global::System.String _DaysE;
        partial void OnDaysEChanging(global::System.String value);
        partial void OnDaysEChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DaysG
        {
            get
            {
                return _DaysG;
            }
            set
            {
                OnDaysGChanging(value);
                ReportPropertyChanging("DaysG");
                _DaysG = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DaysG");
                OnDaysGChanged();
            }
        }
        private global::System.String _DaysG;
        partial void OnDaysGChanging(global::System.String value);
        partial void OnDaysGChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DayMode
        {
            get
            {
                return _DayMode;
            }
            set
            {
                OnDayModeChanging(value);
                ReportPropertyChanging("DayMode");
                _DayMode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DayMode");
                OnDayModeChanged();
            }
        }
        private global::System.String _DayMode;
        partial void OnDayModeChanging(global::System.String value);
        partial void OnDayModeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String WeeksG
        {
            get
            {
                return _WeeksG;
            }
            set
            {
                OnWeeksGChanging(value);
                ReportPropertyChanging("WeeksG");
                _WeeksG = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("WeeksG");
                OnWeeksGChanged();
            }
        }
        private global::System.String _WeeksG;
        partial void OnWeeksGChanging(global::System.String value);
        partial void OnWeeksGChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String WeekMode
        {
            get
            {
                return _WeekMode;
            }
            set
            {
                OnWeekModeChanging(value);
                ReportPropertyChanging("WeekMode");
                _WeekMode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("WeekMode");
                OnWeekModeChanged();
            }
        }
        private global::System.String _WeekMode;
        partial void OnWeekModeChanging(global::System.String value);
        partial void OnWeekModeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Monday
        {
            get
            {
                return _Monday;
            }
            set
            {
                if (_Monday != value)
                {
                    OnMondayChanging(value);
                    ReportPropertyChanging("Monday");
                    _Monday = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Monday");
                    OnMondayChanged();
                }
            }
        }
        private global::System.Boolean _Monday;
        partial void OnMondayChanging(global::System.Boolean value);
        partial void OnMondayChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Tuesday
        {
            get
            {
                return _Tuesday;
            }
            set
            {
                if (_Tuesday != value)
                {
                    OnTuesdayChanging(value);
                    ReportPropertyChanging("Tuesday");
                    _Tuesday = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Tuesday");
                    OnTuesdayChanged();
                }
            }
        }
        private global::System.Boolean _Tuesday;
        partial void OnTuesdayChanging(global::System.Boolean value);
        partial void OnTuesdayChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Wednesday
        {
            get
            {
                return _Wednesday;
            }
            set
            {
                if (_Wednesday != value)
                {
                    OnWednesdayChanging(value);
                    ReportPropertyChanging("Wednesday");
                    _Wednesday = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Wednesday");
                    OnWednesdayChanged();
                }
            }
        }
        private global::System.Boolean _Wednesday;
        partial void OnWednesdayChanging(global::System.Boolean value);
        partial void OnWednesdayChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Thursday
        {
            get
            {
                return _Thursday;
            }
            set
            {
                if (_Thursday != value)
                {
                    OnThursdayChanging(value);
                    ReportPropertyChanging("Thursday");
                    _Thursday = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Thursday");
                    OnThursdayChanged();
                }
            }
        }
        private global::System.Boolean _Thursday;
        partial void OnThursdayChanging(global::System.Boolean value);
        partial void OnThursdayChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Friday
        {
            get
            {
                return _Friday;
            }
            set
            {
                if (_Friday != value)
                {
                    OnFridayChanging(value);
                    ReportPropertyChanging("Friday");
                    _Friday = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Friday");
                    OnFridayChanged();
                }
            }
        }
        private global::System.Boolean _Friday;
        partial void OnFridayChanging(global::System.Boolean value);
        partial void OnFridayChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Saturday
        {
            get
            {
                return _Saturday;
            }
            set
            {
                if (_Saturday != value)
                {
                    OnSaturdayChanging(value);
                    ReportPropertyChanging("Saturday");
                    _Saturday = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Saturday");
                    OnSaturdayChanged();
                }
            }
        }
        private global::System.Boolean _Saturday;
        partial void OnSaturdayChanging(global::System.Boolean value);
        partial void OnSaturdayChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Sunday
        {
            get
            {
                return _Sunday;
            }
            set
            {
                if (_Sunday != value)
                {
                    OnSundayChanging(value);
                    ReportPropertyChanging("Sunday");
                    _Sunday = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Sunday");
                    OnSundayChanged();
                }
            }
        }
        private global::System.Boolean _Sunday;
        partial void OnSundayChanging(global::System.Boolean value);
        partial void OnSundayChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 GroupID
        {
            get
            {
                return _GroupID;
            }
            set
            {
                if (_GroupID != value)
                {
                    OnGroupIDChanging(value);
                    ReportPropertyChanging("GroupID");
                    _GroupID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("GroupID");
                    OnGroupIDChanged();
                }
            }
        }
        private global::System.Int64 _GroupID;
        partial void OnGroupIDChanging(global::System.Int64 value);
        partial void OnGroupIDChanged();

        #endregion

    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="web.Models", Name="ViewDeviceType")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ViewDeviceType : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ViewDeviceType.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="standard">Исходное значение свойства Standard.</param>
        public static ViewDeviceType CreateViewDeviceType(global::System.Int64 id, global::System.Boolean standard)
        {
            ViewDeviceType viewDeviceType = new ViewDeviceType();
            viewDeviceType.ID = id;
            viewDeviceType.Standard = standard;
            return viewDeviceType;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int64 _ID;
        partial void OnIDChanging(global::System.Int64 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Guid> DataOwnerID
        {
            get
            {
                return _DataOwnerID;
            }
            set
            {
                OnDataOwnerIDChanging(value);
                ReportPropertyChanging("DataOwnerID");
                _DataOwnerID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DataOwnerID");
                OnDataOwnerIDChanged();
            }
        }
        private Nullable<global::System.Guid> _DataOwnerID;
        partial void OnDataOwnerIDChanging(Nullable<global::System.Guid> value);
        partial void OnDataOwnerIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Standard
        {
            get
            {
                return _Standard;
            }
            set
            {
                OnStandardChanging(value);
                ReportPropertyChanging("Standard");
                _Standard = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Standard");
                OnStandardChanged();
            }
        }
        private global::System.Boolean _Standard;
        partial void OnStandardChanging(global::System.Boolean value);
        partial void OnStandardChanged();

        #endregion

    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="web.Models", Name="ViewDeviceTypeAndOwner")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ViewDeviceTypeAndOwner : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ViewDeviceTypeAndOwner.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="groupID">Исходное значение свойства GroupID.</param>
        public static ViewDeviceTypeAndOwner CreateViewDeviceTypeAndOwner(global::System.Int64 id, global::System.Int64 groupID)
        {
            ViewDeviceTypeAndOwner viewDeviceTypeAndOwner = new ViewDeviceTypeAndOwner();
            viewDeviceTypeAndOwner.ID = id;
            viewDeviceTypeAndOwner.GroupID = groupID;
            return viewDeviceTypeAndOwner;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int64 _ID;
        partial void OnIDChanging(global::System.Int64 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 GroupID
        {
            get
            {
                return _GroupID;
            }
            set
            {
                if (_GroupID != value)
                {
                    OnGroupIDChanging(value);
                    ReportPropertyChanging("GroupID");
                    _GroupID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("GroupID");
                    OnGroupIDChanged();
                }
            }
        }
        private global::System.Int64 _GroupID;
        partial void OnGroupIDChanging(global::System.Int64 value);
        partial void OnGroupIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DeviceName
        {
            get
            {
                return _DeviceName;
            }
            set
            {
                OnDeviceNameChanging(value);
                ReportPropertyChanging("DeviceName");
                _DeviceName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DeviceName");
                OnDeviceNameChanged();
            }
        }
        private global::System.String _DeviceName;
        partial void OnDeviceNameChanging(global::System.String value);
        partial void OnDeviceNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DeviceTypeName
        {
            get
            {
                return _DeviceTypeName;
            }
            set
            {
                OnDeviceTypeNameChanging(value);
                ReportPropertyChanging("DeviceTypeName");
                _DeviceTypeName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DeviceTypeName");
                OnDeviceTypeNameChanged();
            }
        }
        private global::System.String _DeviceTypeName;
        partial void OnDeviceTypeNameChanging(global::System.String value);
        partial void OnDeviceTypeNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DeviceOwnerName
        {
            get
            {
                return _DeviceOwnerName;
            }
            set
            {
                OnDeviceOwnerNameChanging(value);
                ReportPropertyChanging("DeviceOwnerName");
                _DeviceOwnerName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DeviceOwnerName");
                OnDeviceOwnerNameChanged();
            }
        }
        private global::System.String _DeviceOwnerName;
        partial void OnDeviceOwnerNameChanging(global::System.String value);
        partial void OnDeviceOwnerNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String GroupName
        {
            get
            {
                return _GroupName;
            }
            set
            {
                OnGroupNameChanging(value);
                ReportPropertyChanging("GroupName");
                _GroupName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("GroupName");
                OnGroupNameChanged();
            }
        }
        private global::System.String _GroupName;
        partial void OnGroupNameChanging(global::System.String value);
        partial void OnGroupNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String PrimaryIP
        {
            get
            {
                return _PrimaryIP;
            }
            set
            {
                OnPrimaryIPChanging(value);
                ReportPropertyChanging("PrimaryIP");
                _PrimaryIP = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("PrimaryIP");
                OnPrimaryIPChanged();
            }
        }
        private global::System.String _PrimaryIP;
        partial void OnPrimaryIPChanging(global::System.String value);
        partial void OnPrimaryIPChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String PrimaryPort
        {
            get
            {
                return _PrimaryPort;
            }
            set
            {
                OnPrimaryPortChanging(value);
                ReportPropertyChanging("PrimaryPort");
                _PrimaryPort = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("PrimaryPort");
                OnPrimaryPortChanged();
            }
        }
        private global::System.String _PrimaryPort;
        partial void OnPrimaryPortChanging(global::System.String value);
        partial void OnPrimaryPortChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SecondaryIP
        {
            get
            {
                return _SecondaryIP;
            }
            set
            {
                OnSecondaryIPChanging(value);
                ReportPropertyChanging("SecondaryIP");
                _SecondaryIP = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("SecondaryIP");
                OnSecondaryIPChanged();
            }
        }
        private global::System.String _SecondaryIP;
        partial void OnSecondaryIPChanging(global::System.String value);
        partial void OnSecondaryIPChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SecondaryPort
        {
            get
            {
                return _SecondaryPort;
            }
            set
            {
                OnSecondaryPortChanging(value);
                ReportPropertyChanging("SecondaryPort");
                _SecondaryPort = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("SecondaryPort");
                OnSecondaryPortChanged();
            }
        }
        private global::System.String _SecondaryPort;
        partial void OnSecondaryPortChanging(global::System.String value);
        partial void OnSecondaryPortChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String InternalAddress
        {
            get
            {
                return _InternalAddress;
            }
            set
            {
                OnInternalAddressChanging(value);
                ReportPropertyChanging("InternalAddress");
                _InternalAddress = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("InternalAddress");
                OnInternalAddressChanged();
            }
        }
        private global::System.String _InternalAddress;
        partial void OnInternalAddressChanging(global::System.String value);
        partial void OnInternalAddressChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Guid> DataOwnerID
        {
            get
            {
                return _DataOwnerID;
            }
            set
            {
                OnDataOwnerIDChanging(value);
                ReportPropertyChanging("DataOwnerID");
                _DataOwnerID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DataOwnerID");
                OnDataOwnerIDChanged();
            }
        }
        private Nullable<global::System.Guid> _DataOwnerID;
        partial void OnDataOwnerIDChanging(Nullable<global::System.Guid> value);
        partial void OnDataOwnerIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> LocationAddressID
        {
            get
            {
                return _LocationAddressID;
            }
            set
            {
                OnLocationAddressIDChanging(value);
                ReportPropertyChanging("LocationAddressID");
                _LocationAddressID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LocationAddressID");
                OnLocationAddressIDChanged();
            }
        }
        private Nullable<global::System.Int64> _LocationAddressID;
        partial void OnLocationAddressIDChanging(Nullable<global::System.Int64> value);
        partial void OnLocationAddressIDChanged();

        #endregion

    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="web.Models", Name="ViewElementFiltered")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ViewElementFiltered : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ViewElementFiltered.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="groupID">Исходное значение свойства GroupID.</param>
        /// <param name="deviceID">Исходное значение свойства DeviceID.</param>
        /// <param name="logicalDeviceID">Исходное значение свойства LogicalDeviceID.</param>
        /// <param name="objectID">Исходное значение свойства ObjectID.</param>
        /// <param name="attributeID">Исходное значение свойства AttributeID.</param>
        public static ViewElementFiltered CreateViewElementFiltered(global::System.Int64 id, global::System.Int64 groupID, global::System.Int64 deviceID, global::System.Int64 logicalDeviceID, global::System.Int64 objectID, global::System.Int64 attributeID)
        {
            ViewElementFiltered viewElementFiltered = new ViewElementFiltered();
            viewElementFiltered.ID = id;
            viewElementFiltered.GroupID = groupID;
            viewElementFiltered.DeviceID = deviceID;
            viewElementFiltered.LogicalDeviceID = logicalDeviceID;
            viewElementFiltered.ObjectID = objectID;
            viewElementFiltered.AttributeID = attributeID;
            return viewElementFiltered;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int64 _ID;
        partial void OnIDChanging(global::System.Int64 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String FullName
        {
            get
            {
                return _FullName;
            }
            set
            {
                OnFullNameChanging(value);
                ReportPropertyChanging("FullName");
                _FullName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("FullName");
                OnFullNameChanged();
            }
        }
        private global::System.String _FullName;
        partial void OnFullNameChanging(global::System.String value);
        partial void OnFullNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> ChartID
        {
            get
            {
                return _ChartID;
            }
            set
            {
                OnChartIDChanging(value);
                ReportPropertyChanging("ChartID");
                _ChartID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ChartID");
                OnChartIDChanged();
            }
        }
        private Nullable<global::System.Int64> _ChartID;
        partial void OnChartIDChanging(Nullable<global::System.Int64> value);
        partial void OnChartIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String GroupName
        {
            get
            {
                return _GroupName;
            }
            set
            {
                OnGroupNameChanging(value);
                ReportPropertyChanging("GroupName");
                _GroupName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("GroupName");
                OnGroupNameChanged();
            }
        }
        private global::System.String _GroupName;
        partial void OnGroupNameChanging(global::System.String value);
        partial void OnGroupNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DeviceName
        {
            get
            {
                return _DeviceName;
            }
            set
            {
                OnDeviceNameChanging(value);
                ReportPropertyChanging("DeviceName");
                _DeviceName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DeviceName");
                OnDeviceNameChanged();
            }
        }
        private global::System.String _DeviceName;
        partial void OnDeviceNameChanging(global::System.String value);
        partial void OnDeviceNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String LogicalDevice
        {
            get
            {
                return _LogicalDevice;
            }
            set
            {
                OnLogicalDeviceChanging(value);
                ReportPropertyChanging("LogicalDevice");
                _LogicalDevice = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("LogicalDevice");
                OnLogicalDeviceChanged();
            }
        }
        private global::System.String _LogicalDevice;
        partial void OnLogicalDeviceChanging(global::System.String value);
        partial void OnLogicalDeviceChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String LogicalObject
        {
            get
            {
                return _LogicalObject;
            }
            set
            {
                OnLogicalObjectChanging(value);
                ReportPropertyChanging("LogicalObject");
                _LogicalObject = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("LogicalObject");
                OnLogicalObjectChanged();
            }
        }
        private global::System.String _LogicalObject;
        partial void OnLogicalObjectChanging(global::System.String value);
        partial void OnLogicalObjectChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Attribute
        {
            get
            {
                return _Attribute;
            }
            set
            {
                OnAttributeChanging(value);
                ReportPropertyChanging("Attribute");
                _Attribute = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Attribute");
                OnAttributeChanged();
            }
        }
        private global::System.String _Attribute;
        partial void OnAttributeChanging(global::System.String value);
        partial void OnAttributeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Identifier
        {
            get
            {
                return _Identifier;
            }
            set
            {
                OnIdentifierChanging(value);
                ReportPropertyChanging("Identifier");
                _Identifier = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Identifier");
                OnIdentifierChanged();
            }
        }
        private global::System.String _Identifier;
        partial void OnIdentifierChanging(global::System.String value);
        partial void OnIdentifierChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Standard
        {
            get
            {
                return _Standard;
            }
            set
            {
                OnStandardChanging(value);
                ReportPropertyChanging("Standard");
                _Standard = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Standard");
                OnStandardChanged();
            }
        }
        private Nullable<global::System.Boolean> _Standard;
        partial void OnStandardChanging(Nullable<global::System.Boolean> value);
        partial void OnStandardChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ValueIdentifier
        {
            get
            {
                return _ValueIdentifier;
            }
            set
            {
                OnValueIdentifierChanging(value);
                ReportPropertyChanging("ValueIdentifier");
                _ValueIdentifier = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ValueIdentifier");
                OnValueIdentifierChanged();
            }
        }
        private global::System.String _ValueIdentifier;
        partial void OnValueIdentifierChanging(global::System.String value);
        partial void OnValueIdentifierChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 GroupID
        {
            get
            {
                return _GroupID;
            }
            set
            {
                if (_GroupID != value)
                {
                    OnGroupIDChanging(value);
                    ReportPropertyChanging("GroupID");
                    _GroupID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("GroupID");
                    OnGroupIDChanged();
                }
            }
        }
        private global::System.Int64 _GroupID;
        partial void OnGroupIDChanging(global::System.Int64 value);
        partial void OnGroupIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 DeviceID
        {
            get
            {
                return _DeviceID;
            }
            set
            {
                if (_DeviceID != value)
                {
                    OnDeviceIDChanging(value);
                    ReportPropertyChanging("DeviceID");
                    _DeviceID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("DeviceID");
                    OnDeviceIDChanged();
                }
            }
        }
        private global::System.Int64 _DeviceID;
        partial void OnDeviceIDChanging(global::System.Int64 value);
        partial void OnDeviceIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Guid> DataOwnerID
        {
            get
            {
                return _DataOwnerID;
            }
            set
            {
                OnDataOwnerIDChanging(value);
                ReportPropertyChanging("DataOwnerID");
                _DataOwnerID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DataOwnerID");
                OnDataOwnerIDChanged();
            }
        }
        private Nullable<global::System.Guid> _DataOwnerID;
        partial void OnDataOwnerIDChanging(Nullable<global::System.Guid> value);
        partial void OnDataOwnerIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 LogicalDeviceID
        {
            get
            {
                return _LogicalDeviceID;
            }
            set
            {
                if (_LogicalDeviceID != value)
                {
                    OnLogicalDeviceIDChanging(value);
                    ReportPropertyChanging("LogicalDeviceID");
                    _LogicalDeviceID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("LogicalDeviceID");
                    OnLogicalDeviceIDChanged();
                }
            }
        }
        private global::System.Int64 _LogicalDeviceID;
        partial void OnLogicalDeviceIDChanging(global::System.Int64 value);
        partial void OnLogicalDeviceIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 ObjectID
        {
            get
            {
                return _ObjectID;
            }
            set
            {
                if (_ObjectID != value)
                {
                    OnObjectIDChanging(value);
                    ReportPropertyChanging("ObjectID");
                    _ObjectID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ObjectID");
                    OnObjectIDChanged();
                }
            }
        }
        private global::System.Int64 _ObjectID;
        partial void OnObjectIDChanging(global::System.Int64 value);
        partial void OnObjectIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 AttributeID
        {
            get
            {
                return _AttributeID;
            }
            set
            {
                if (_AttributeID != value)
                {
                    OnAttributeIDChanging(value);
                    ReportPropertyChanging("AttributeID");
                    _AttributeID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("AttributeID");
                    OnAttributeIDChanged();
                }
            }
        }
        private global::System.Int64 _AttributeID;
        partial void OnAttributeIDChanging(global::System.Int64 value);
        partial void OnAttributeIDChanged();

        #endregion

    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="web.Models", Name="ViewElementGroup")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ViewElementGroup : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ViewElementGroup.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="name">Исходное значение свойства Name.</param>
        /// <param name="deviceType">Исходное значение свойства DeviceType.</param>
        /// <param name="deviceID">Исходное значение свойства DeviceID.</param>
        public static ViewElementGroup CreateViewElementGroup(global::System.Int64 id, global::System.String name, global::System.String deviceType, global::System.Int64 deviceID)
        {
            ViewElementGroup viewElementGroup = new ViewElementGroup();
            viewElementGroup.ID = id;
            viewElementGroup.Name = name;
            viewElementGroup.DeviceType = deviceType;
            viewElementGroup.DeviceID = deviceID;
            return viewElementGroup;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int64 _ID;
        partial void OnIDChanging(global::System.Int64 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                if (_Name != value)
                {
                    OnNameChanging(value);
                    ReportPropertyChanging("Name");
                    _Name = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("Name");
                    OnNameChanged();
                }
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String DeviceType
        {
            get
            {
                return _DeviceType;
            }
            set
            {
                if (_DeviceType != value)
                {
                    OnDeviceTypeChanging(value);
                    ReportPropertyChanging("DeviceType");
                    _DeviceType = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("DeviceType");
                    OnDeviceTypeChanged();
                }
            }
        }
        private global::System.String _DeviceType;
        partial void OnDeviceTypeChanging(global::System.String value);
        partial void OnDeviceTypeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Guid> DataOwnerID
        {
            get
            {
                return _DataOwnerID;
            }
            set
            {
                OnDataOwnerIDChanging(value);
                ReportPropertyChanging("DataOwnerID");
                _DataOwnerID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DataOwnerID");
                OnDataOwnerIDChanged();
            }
        }
        private Nullable<global::System.Guid> _DataOwnerID;
        partial void OnDataOwnerIDChanging(Nullable<global::System.Guid> value);
        partial void OnDataOwnerIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 DeviceID
        {
            get
            {
                return _DeviceID;
            }
            set
            {
                if (_DeviceID != value)
                {
                    OnDeviceIDChanging(value);
                    ReportPropertyChanging("DeviceID");
                    _DeviceID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("DeviceID");
                    OnDeviceIDChanged();
                }
            }
        }
        private global::System.Int64 _DeviceID;
        partial void OnDeviceIDChanging(global::System.Int64 value);
        partial void OnDeviceIDChanged();

        #endregion

    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="web.Models", Name="ViewElementInstanceName")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ViewElementInstanceName : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ViewElementInstanceName.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="groupID">Исходное значение свойства GroupID.</param>
        /// <param name="deviceID">Исходное значение свойства DeviceID.</param>
        /// <param name="logicalDeviceID">Исходное значение свойства LogicalDeviceID.</param>
        /// <param name="objectID">Исходное значение свойства ObjectID.</param>
        /// <param name="attributeID">Исходное значение свойства AttributeID.</param>
        /// <param name="deviceDescription">Исходное значение свойства DeviceDescription.</param>
        public static ViewElementInstanceName CreateViewElementInstanceName(global::System.Int64 id, global::System.Int64 groupID, global::System.Int64 deviceID, global::System.Int64 logicalDeviceID, global::System.Int64 objectID, global::System.Int64 attributeID, global::System.String deviceDescription)
        {
            ViewElementInstanceName viewElementInstanceName = new ViewElementInstanceName();
            viewElementInstanceName.ID = id;
            viewElementInstanceName.GroupID = groupID;
            viewElementInstanceName.DeviceID = deviceID;
            viewElementInstanceName.LogicalDeviceID = logicalDeviceID;
            viewElementInstanceName.ObjectID = objectID;
            viewElementInstanceName.AttributeID = attributeID;
            viewElementInstanceName.DeviceDescription = deviceDescription;
            return viewElementInstanceName;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int64 _ID;
        partial void OnIDChanging(global::System.Int64 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String GroupName
        {
            get
            {
                return _GroupName;
            }
            set
            {
                OnGroupNameChanging(value);
                ReportPropertyChanging("GroupName");
                _GroupName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("GroupName");
                OnGroupNameChanged();
            }
        }
        private global::System.String _GroupName;
        partial void OnGroupNameChanging(global::System.String value);
        partial void OnGroupNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DeviceName
        {
            get
            {
                return _DeviceName;
            }
            set
            {
                OnDeviceNameChanging(value);
                ReportPropertyChanging("DeviceName");
                _DeviceName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DeviceName");
                OnDeviceNameChanged();
            }
        }
        private global::System.String _DeviceName;
        partial void OnDeviceNameChanging(global::System.String value);
        partial void OnDeviceNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String LogicalDevice
        {
            get
            {
                return _LogicalDevice;
            }
            set
            {
                OnLogicalDeviceChanging(value);
                ReportPropertyChanging("LogicalDevice");
                _LogicalDevice = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("LogicalDevice");
                OnLogicalDeviceChanged();
            }
        }
        private global::System.String _LogicalDevice;
        partial void OnLogicalDeviceChanging(global::System.String value);
        partial void OnLogicalDeviceChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String LogicalObject
        {
            get
            {
                return _LogicalObject;
            }
            set
            {
                OnLogicalObjectChanging(value);
                ReportPropertyChanging("LogicalObject");
                _LogicalObject = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("LogicalObject");
                OnLogicalObjectChanged();
            }
        }
        private global::System.String _LogicalObject;
        partial void OnLogicalObjectChanging(global::System.String value);
        partial void OnLogicalObjectChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Attribute
        {
            get
            {
                return _Attribute;
            }
            set
            {
                OnAttributeChanging(value);
                ReportPropertyChanging("Attribute");
                _Attribute = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Attribute");
                OnAttributeChanged();
            }
        }
        private global::System.String _Attribute;
        partial void OnAttributeChanging(global::System.String value);
        partial void OnAttributeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Identifier
        {
            get
            {
                return _Identifier;
            }
            set
            {
                OnIdentifierChanging(value);
                ReportPropertyChanging("Identifier");
                _Identifier = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Identifier");
                OnIdentifierChanged();
            }
        }
        private global::System.String _Identifier;
        partial void OnIdentifierChanging(global::System.String value);
        partial void OnIdentifierChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String FullName
        {
            get
            {
                return _FullName;
            }
            set
            {
                OnFullNameChanging(value);
                ReportPropertyChanging("FullName");
                _FullName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("FullName");
                OnFullNameChanged();
            }
        }
        private global::System.String _FullName;
        partial void OnFullNameChanging(global::System.String value);
        partial void OnFullNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Standard
        {
            get
            {
                return _Standard;
            }
            set
            {
                OnStandardChanging(value);
                ReportPropertyChanging("Standard");
                _Standard = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Standard");
                OnStandardChanged();
            }
        }
        private Nullable<global::System.Boolean> _Standard;
        partial void OnStandardChanging(Nullable<global::System.Boolean> value);
        partial void OnStandardChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ValueIdentifier
        {
            get
            {
                return _ValueIdentifier;
            }
            set
            {
                OnValueIdentifierChanging(value);
                ReportPropertyChanging("ValueIdentifier");
                _ValueIdentifier = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ValueIdentifier");
                OnValueIdentifierChanged();
            }
        }
        private global::System.String _ValueIdentifier;
        partial void OnValueIdentifierChanging(global::System.String value);
        partial void OnValueIdentifierChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 GroupID
        {
            get
            {
                return _GroupID;
            }
            set
            {
                if (_GroupID != value)
                {
                    OnGroupIDChanging(value);
                    ReportPropertyChanging("GroupID");
                    _GroupID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("GroupID");
                    OnGroupIDChanged();
                }
            }
        }
        private global::System.Int64 _GroupID;
        partial void OnGroupIDChanging(global::System.Int64 value);
        partial void OnGroupIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 DeviceID
        {
            get
            {
                return _DeviceID;
            }
            set
            {
                if (_DeviceID != value)
                {
                    OnDeviceIDChanging(value);
                    ReportPropertyChanging("DeviceID");
                    _DeviceID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("DeviceID");
                    OnDeviceIDChanged();
                }
            }
        }
        private global::System.Int64 _DeviceID;
        partial void OnDeviceIDChanging(global::System.Int64 value);
        partial void OnDeviceIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Guid> DataOwnerID
        {
            get
            {
                return _DataOwnerID;
            }
            set
            {
                OnDataOwnerIDChanging(value);
                ReportPropertyChanging("DataOwnerID");
                _DataOwnerID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DataOwnerID");
                OnDataOwnerIDChanged();
            }
        }
        private Nullable<global::System.Guid> _DataOwnerID;
        partial void OnDataOwnerIDChanging(Nullable<global::System.Guid> value);
        partial void OnDataOwnerIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 LogicalDeviceID
        {
            get
            {
                return _LogicalDeviceID;
            }
            set
            {
                if (_LogicalDeviceID != value)
                {
                    OnLogicalDeviceIDChanging(value);
                    ReportPropertyChanging("LogicalDeviceID");
                    _LogicalDeviceID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("LogicalDeviceID");
                    OnLogicalDeviceIDChanged();
                }
            }
        }
        private global::System.Int64 _LogicalDeviceID;
        partial void OnLogicalDeviceIDChanging(global::System.Int64 value);
        partial void OnLogicalDeviceIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 ObjectID
        {
            get
            {
                return _ObjectID;
            }
            set
            {
                if (_ObjectID != value)
                {
                    OnObjectIDChanging(value);
                    ReportPropertyChanging("ObjectID");
                    _ObjectID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ObjectID");
                    OnObjectIDChanged();
                }
            }
        }
        private global::System.Int64 _ObjectID;
        partial void OnObjectIDChanging(global::System.Int64 value);
        partial void OnObjectIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 AttributeID
        {
            get
            {
                return _AttributeID;
            }
            set
            {
                if (_AttributeID != value)
                {
                    OnAttributeIDChanging(value);
                    ReportPropertyChanging("AttributeID");
                    _AttributeID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("AttributeID");
                    OnAttributeIDChanged();
                }
            }
        }
        private global::System.Int64 _AttributeID;
        partial void OnAttributeIDChanging(global::System.Int64 value);
        partial void OnAttributeIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String DeviceDescription
        {
            get
            {
                return _DeviceDescription;
            }
            set
            {
                if (_DeviceDescription != value)
                {
                    OnDeviceDescriptionChanging(value);
                    ReportPropertyChanging("DeviceDescription");
                    _DeviceDescription = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("DeviceDescription");
                    OnDeviceDescriptionChanged();
                }
            }
        }
        private global::System.String _DeviceDescription;
        partial void OnDeviceDescriptionChanging(global::System.String value);
        partial void OnDeviceDescriptionChanged();

        #endregion

    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="web.Models", Name="ViewElementLocation")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ViewElementLocation : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ViewElementLocation.
        /// </summary>
        /// <param name="apartament">Исходное значение свойства Apartament.</param>
        /// <param name="building">Исходное значение свойства Building.</param>
        /// <param name="street">Исходное значение свойства Street.</param>
        /// <param name="city">Исходное значение свойства City.</param>
        /// <param name="dataOwnerID">Исходное значение свойства DataOwnerID.</param>
        /// <param name="deviceID">Исходное значение свойства DeviceID.</param>
        public static ViewElementLocation CreateViewElementLocation(global::System.String apartament, global::System.String building, global::System.String street, global::System.String city, global::System.Guid dataOwnerID, global::System.Int64 deviceID)
        {
            ViewElementLocation viewElementLocation = new ViewElementLocation();
            viewElementLocation.Apartament = apartament;
            viewElementLocation.Building = building;
            viewElementLocation.Street = street;
            viewElementLocation.City = city;
            viewElementLocation.DataOwnerID = dataOwnerID;
            viewElementLocation.DeviceID = deviceID;
            return viewElementLocation;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> LocationAddressID
        {
            get
            {
                return _LocationAddressID;
            }
            set
            {
                OnLocationAddressIDChanging(value);
                ReportPropertyChanging("LocationAddressID");
                _LocationAddressID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LocationAddressID");
                OnLocationAddressIDChanged();
            }
        }
        private Nullable<global::System.Int64> _LocationAddressID;
        partial void OnLocationAddressIDChanging(Nullable<global::System.Int64> value);
        partial void OnLocationAddressIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Apartament
        {
            get
            {
                return _Apartament;
            }
            set
            {
                if (_Apartament != value)
                {
                    OnApartamentChanging(value);
                    ReportPropertyChanging("Apartament");
                    _Apartament = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("Apartament");
                    OnApartamentChanged();
                }
            }
        }
        private global::System.String _Apartament;
        partial void OnApartamentChanging(global::System.String value);
        partial void OnApartamentChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Building
        {
            get
            {
                return _Building;
            }
            set
            {
                if (_Building != value)
                {
                    OnBuildingChanging(value);
                    ReportPropertyChanging("Building");
                    _Building = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("Building");
                    OnBuildingChanged();
                }
            }
        }
        private global::System.String _Building;
        partial void OnBuildingChanging(global::System.String value);
        partial void OnBuildingChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Street
        {
            get
            {
                return _Street;
            }
            set
            {
                if (_Street != value)
                {
                    OnStreetChanging(value);
                    ReportPropertyChanging("Street");
                    _Street = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("Street");
                    OnStreetChanged();
                }
            }
        }
        private global::System.String _Street;
        partial void OnStreetChanging(global::System.String value);
        partial void OnStreetChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String City
        {
            get
            {
                return _City;
            }
            set
            {
                if (_City != value)
                {
                    OnCityChanging(value);
                    ReportPropertyChanging("City");
                    _City = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("City");
                    OnCityChanged();
                }
            }
        }
        private global::System.String _City;
        partial void OnCityChanging(global::System.String value);
        partial void OnCityChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Location
        {
            get
            {
                return _Location;
            }
            set
            {
                OnLocationChanging(value);
                ReportPropertyChanging("Location");
                _Location = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Location");
                OnLocationChanged();
            }
        }
        private global::System.String _Location;
        partial void OnLocationChanging(global::System.String value);
        partial void OnLocationChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid DataOwnerID
        {
            get
            {
                return _DataOwnerID;
            }
            set
            {
                if (_DataOwnerID != value)
                {
                    OnDataOwnerIDChanging(value);
                    ReportPropertyChanging("DataOwnerID");
                    _DataOwnerID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("DataOwnerID");
                    OnDataOwnerIDChanged();
                }
            }
        }
        private global::System.Guid _DataOwnerID;
        partial void OnDataOwnerIDChanging(global::System.Guid value);
        partial void OnDataOwnerIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 DeviceID
        {
            get
            {
                return _DeviceID;
            }
            set
            {
                if (_DeviceID != value)
                {
                    OnDeviceIDChanging(value);
                    ReportPropertyChanging("DeviceID");
                    _DeviceID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("DeviceID");
                    OnDeviceIDChanged();
                }
            }
        }
        private global::System.Int64 _DeviceID;
        partial void OnDeviceIDChanging(global::System.Int64 value);
        partial void OnDeviceIDChanged();

        #endregion

    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="web.Models", Name="ViewElementLogicalName")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ViewElementLogicalName : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ViewElementLogicalName.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="logicalObject">Исходное значение свойства LogicalObject.</param>
        /// <param name="deviceID">Исходное значение свойства DeviceID.</param>
        /// <param name="deviceTypeID">Исходное значение свойства DeviceTypeID.</param>
        /// <param name="logicalDeviceID">Исходное значение свойства LogicalDeviceID.</param>
        /// <param name="objectID">Исходное значение свойства ObjectID.</param>
        /// <param name="attributeID">Исходное значение свойства AttributeID.</param>
        public static ViewElementLogicalName CreateViewElementLogicalName(global::System.Int64 id, global::System.String logicalObject, global::System.Int64 deviceID, global::System.Int64 deviceTypeID, global::System.Int64 logicalDeviceID, global::System.Int64 objectID, global::System.Int64 attributeID)
        {
            ViewElementLogicalName viewElementLogicalName = new ViewElementLogicalName();
            viewElementLogicalName.ID = id;
            viewElementLogicalName.LogicalObject = logicalObject;
            viewElementLogicalName.DeviceID = deviceID;
            viewElementLogicalName.DeviceTypeID = deviceTypeID;
            viewElementLogicalName.LogicalDeviceID = logicalDeviceID;
            viewElementLogicalName.ObjectID = objectID;
            viewElementLogicalName.AttributeID = attributeID;
            return viewElementLogicalName;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int64 _ID;
        partial void OnIDChanging(global::System.Int64 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DeviceType
        {
            get
            {
                return _DeviceType;
            }
            set
            {
                OnDeviceTypeChanging(value);
                ReportPropertyChanging("DeviceType");
                _DeviceType = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DeviceType");
                OnDeviceTypeChanged();
            }
        }
        private global::System.String _DeviceType;
        partial void OnDeviceTypeChanging(global::System.String value);
        partial void OnDeviceTypeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String LogicalDevice
        {
            get
            {
                return _LogicalDevice;
            }
            set
            {
                OnLogicalDeviceChanging(value);
                ReportPropertyChanging("LogicalDevice");
                _LogicalDevice = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("LogicalDevice");
                OnLogicalDeviceChanged();
            }
        }
        private global::System.String _LogicalDevice;
        partial void OnLogicalDeviceChanging(global::System.String value);
        partial void OnLogicalDeviceChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String LogicalObject
        {
            get
            {
                return _LogicalObject;
            }
            set
            {
                if (_LogicalObject != value)
                {
                    OnLogicalObjectChanging(value);
                    ReportPropertyChanging("LogicalObject");
                    _LogicalObject = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("LogicalObject");
                    OnLogicalObjectChanged();
                }
            }
        }
        private global::System.String _LogicalObject;
        partial void OnLogicalObjectChanging(global::System.String value);
        partial void OnLogicalObjectChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Attribute
        {
            get
            {
                return _Attribute;
            }
            set
            {
                OnAttributeChanging(value);
                ReportPropertyChanging("Attribute");
                _Attribute = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Attribute");
                OnAttributeChanged();
            }
        }
        private global::System.String _Attribute;
        partial void OnAttributeChanging(global::System.String value);
        partial void OnAttributeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Identifier
        {
            get
            {
                return _Identifier;
            }
            set
            {
                OnIdentifierChanging(value);
                ReportPropertyChanging("Identifier");
                _Identifier = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Identifier");
                OnIdentifierChanged();
            }
        }
        private global::System.String _Identifier;
        partial void OnIdentifierChanging(global::System.String value);
        partial void OnIdentifierChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String FullName
        {
            get
            {
                return _FullName;
            }
            set
            {
                OnFullNameChanging(value);
                ReportPropertyChanging("FullName");
                _FullName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("FullName");
                OnFullNameChanged();
            }
        }
        private global::System.String _FullName;
        partial void OnFullNameChanging(global::System.String value);
        partial void OnFullNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Standard
        {
            get
            {
                return _Standard;
            }
            set
            {
                OnStandardChanging(value);
                ReportPropertyChanging("Standard");
                _Standard = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Standard");
                OnStandardChanged();
            }
        }
        private Nullable<global::System.Boolean> _Standard;
        partial void OnStandardChanging(Nullable<global::System.Boolean> value);
        partial void OnStandardChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ValueIdentifier
        {
            get
            {
                return _ValueIdentifier;
            }
            set
            {
                OnValueIdentifierChanging(value);
                ReportPropertyChanging("ValueIdentifier");
                _ValueIdentifier = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ValueIdentifier");
                OnValueIdentifierChanged();
            }
        }
        private global::System.String _ValueIdentifier;
        partial void OnValueIdentifierChanging(global::System.String value);
        partial void OnValueIdentifierChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 DeviceID
        {
            get
            {
                return _DeviceID;
            }
            set
            {
                if (_DeviceID != value)
                {
                    OnDeviceIDChanging(value);
                    ReportPropertyChanging("DeviceID");
                    _DeviceID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("DeviceID");
                    OnDeviceIDChanged();
                }
            }
        }
        private global::System.Int64 _DeviceID;
        partial void OnDeviceIDChanging(global::System.Int64 value);
        partial void OnDeviceIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Guid> DataOwnerID
        {
            get
            {
                return _DataOwnerID;
            }
            set
            {
                OnDataOwnerIDChanging(value);
                ReportPropertyChanging("DataOwnerID");
                _DataOwnerID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DataOwnerID");
                OnDataOwnerIDChanged();
            }
        }
        private Nullable<global::System.Guid> _DataOwnerID;
        partial void OnDataOwnerIDChanging(Nullable<global::System.Guid> value);
        partial void OnDataOwnerIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 DeviceTypeID
        {
            get
            {
                return _DeviceTypeID;
            }
            set
            {
                if (_DeviceTypeID != value)
                {
                    OnDeviceTypeIDChanging(value);
                    ReportPropertyChanging("DeviceTypeID");
                    _DeviceTypeID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("DeviceTypeID");
                    OnDeviceTypeIDChanged();
                }
            }
        }
        private global::System.Int64 _DeviceTypeID;
        partial void OnDeviceTypeIDChanging(global::System.Int64 value);
        partial void OnDeviceTypeIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 LogicalDeviceID
        {
            get
            {
                return _LogicalDeviceID;
            }
            set
            {
                if (_LogicalDeviceID != value)
                {
                    OnLogicalDeviceIDChanging(value);
                    ReportPropertyChanging("LogicalDeviceID");
                    _LogicalDeviceID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("LogicalDeviceID");
                    OnLogicalDeviceIDChanged();
                }
            }
        }
        private global::System.Int64 _LogicalDeviceID;
        partial void OnLogicalDeviceIDChanging(global::System.Int64 value);
        partial void OnLogicalDeviceIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 ObjectID
        {
            get
            {
                return _ObjectID;
            }
            set
            {
                if (_ObjectID != value)
                {
                    OnObjectIDChanging(value);
                    ReportPropertyChanging("ObjectID");
                    _ObjectID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ObjectID");
                    OnObjectIDChanged();
                }
            }
        }
        private global::System.Int64 _ObjectID;
        partial void OnObjectIDChanging(global::System.Int64 value);
        partial void OnObjectIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 AttributeID
        {
            get
            {
                return _AttributeID;
            }
            set
            {
                if (_AttributeID != value)
                {
                    OnAttributeIDChanging(value);
                    ReportPropertyChanging("AttributeID");
                    _AttributeID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("AttributeID");
                    OnAttributeIDChanged();
                }
            }
        }
        private global::System.Int64 _AttributeID;
        partial void OnAttributeIDChanging(global::System.Int64 value);
        partial void OnAttributeIDChanged();

        #endregion

    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="web.Models", Name="ViewElementOwner")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ViewElementOwner : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ViewElementOwner.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="apartament">Исходное значение свойства Apartament.</param>
        /// <param name="building">Исходное значение свойства Building.</param>
        /// <param name="street">Исходное значение свойства Street.</param>
        /// <param name="city">Исходное значение свойства City.</param>
        /// <param name="dataOwnerID">Исходное значение свойства DataOwnerID.</param>
        /// <param name="deviceID">Исходное значение свойства DeviceID.</param>
        public static ViewElementOwner CreateViewElementOwner(global::System.Int64 id, global::System.String apartament, global::System.String building, global::System.String street, global::System.String city, global::System.Guid dataOwnerID, global::System.Int64 deviceID)
        {
            ViewElementOwner viewElementOwner = new ViewElementOwner();
            viewElementOwner.ID = id;
            viewElementOwner.Apartament = apartament;
            viewElementOwner.Building = building;
            viewElementOwner.Street = street;
            viewElementOwner.City = city;
            viewElementOwner.DataOwnerID = dataOwnerID;
            viewElementOwner.DeviceID = deviceID;
            return viewElementOwner;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int64 _ID;
        partial void OnIDChanging(global::System.Int64 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String FirstName
        {
            get
            {
                return _FirstName;
            }
            set
            {
                OnFirstNameChanging(value);
                ReportPropertyChanging("FirstName");
                _FirstName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("FirstName");
                OnFirstNameChanged();
            }
        }
        private global::System.String _FirstName;
        partial void OnFirstNameChanging(global::System.String value);
        partial void OnFirstNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String LastName
        {
            get
            {
                return _LastName;
            }
            set
            {
                OnLastNameChanging(value);
                ReportPropertyChanging("LastName");
                _LastName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("LastName");
                OnLastNameChanged();
            }
        }
        private global::System.String _LastName;
        partial void OnLastNameChanging(global::System.String value);
        partial void OnLastNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Apartament
        {
            get
            {
                return _Apartament;
            }
            set
            {
                if (_Apartament != value)
                {
                    OnApartamentChanging(value);
                    ReportPropertyChanging("Apartament");
                    _Apartament = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("Apartament");
                    OnApartamentChanged();
                }
            }
        }
        private global::System.String _Apartament;
        partial void OnApartamentChanging(global::System.String value);
        partial void OnApartamentChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Building
        {
            get
            {
                return _Building;
            }
            set
            {
                if (_Building != value)
                {
                    OnBuildingChanging(value);
                    ReportPropertyChanging("Building");
                    _Building = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("Building");
                    OnBuildingChanged();
                }
            }
        }
        private global::System.String _Building;
        partial void OnBuildingChanging(global::System.String value);
        partial void OnBuildingChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Street
        {
            get
            {
                return _Street;
            }
            set
            {
                if (_Street != value)
                {
                    OnStreetChanging(value);
                    ReportPropertyChanging("Street");
                    _Street = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("Street");
                    OnStreetChanged();
                }
            }
        }
        private global::System.String _Street;
        partial void OnStreetChanging(global::System.String value);
        partial void OnStreetChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String City
        {
            get
            {
                return _City;
            }
            set
            {
                if (_City != value)
                {
                    OnCityChanging(value);
                    ReportPropertyChanging("City");
                    _City = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("City");
                    OnCityChanged();
                }
            }
        }
        private global::System.String _City;
        partial void OnCityChanging(global::System.String value);
        partial void OnCityChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid DataOwnerID
        {
            get
            {
                return _DataOwnerID;
            }
            set
            {
                if (_DataOwnerID != value)
                {
                    OnDataOwnerIDChanging(value);
                    ReportPropertyChanging("DataOwnerID");
                    _DataOwnerID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("DataOwnerID");
                    OnDataOwnerIDChanged();
                }
            }
        }
        private global::System.Guid _DataOwnerID;
        partial void OnDataOwnerIDChanging(global::System.Guid value);
        partial void OnDataOwnerIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String OwnerData
        {
            get
            {
                return _OwnerData;
            }
            set
            {
                OnOwnerDataChanging(value);
                ReportPropertyChanging("OwnerData");
                _OwnerData = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("OwnerData");
                OnOwnerDataChanged();
            }
        }
        private global::System.String _OwnerData;
        partial void OnOwnerDataChanging(global::System.String value);
        partial void OnOwnerDataChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 DeviceID
        {
            get
            {
                return _DeviceID;
            }
            set
            {
                if (_DeviceID != value)
                {
                    OnDeviceIDChanging(value);
                    ReportPropertyChanging("DeviceID");
                    _DeviceID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("DeviceID");
                    OnDeviceIDChanged();
                }
            }
        }
        private global::System.Int64 _DeviceID;
        partial void OnDeviceIDChanging(global::System.Int64 value);
        partial void OnDeviceIDChanged();

        #endregion

    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="web.Models", Name="ViewEvent")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ViewEvent : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ViewEvent.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="time">Исходное значение свойства Time.</param>
        /// <param name="deviceID">Исходное значение свойства DeviceID.</param>
        /// <param name="sessionID">Исходное значение свойства SessionID.</param>
        public static ViewEvent CreateViewEvent(global::System.Int64 id, global::System.DateTime time, global::System.Int64 deviceID, global::System.Int64 sessionID)
        {
            ViewEvent viewEvent = new ViewEvent();
            viewEvent.ID = id;
            viewEvent.Time = time;
            viewEvent.DeviceID = deviceID;
            viewEvent.SessionID = sessionID;
            return viewEvent;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int64 _ID;
        partial void OnIDChanging(global::System.Int64 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime Time
        {
            get
            {
                return _Time;
            }
            set
            {
                if (_Time != value)
                {
                    OnTimeChanging(value);
                    ReportPropertyChanging("Time");
                    _Time = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Time");
                    OnTimeChanged();
                }
            }
        }
        private global::System.DateTime _Time;
        partial void OnTimeChanging(global::System.DateTime value);
        partial void OnTimeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Event
        {
            get
            {
                return _Event;
            }
            set
            {
                OnEventChanging(value);
                ReportPropertyChanging("Event");
                _Event = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Event");
                OnEventChanged();
            }
        }
        private global::System.String _Event;
        partial void OnEventChanging(global::System.String value);
        partial void OnEventChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> CategoryID
        {
            get
            {
                return _CategoryID;
            }
            set
            {
                OnCategoryIDChanging(value);
                ReportPropertyChanging("CategoryID");
                _CategoryID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CategoryID");
                OnCategoryIDChanged();
            }
        }
        private Nullable<global::System.Int64> _CategoryID;
        partial void OnCategoryIDChanging(Nullable<global::System.Int64> value);
        partial void OnCategoryIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 DeviceID
        {
            get
            {
                return _DeviceID;
            }
            set
            {
                if (_DeviceID != value)
                {
                    OnDeviceIDChanging(value);
                    ReportPropertyChanging("DeviceID");
                    _DeviceID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("DeviceID");
                    OnDeviceIDChanged();
                }
            }
        }
        private global::System.Int64 _DeviceID;
        partial void OnDeviceIDChanging(global::System.Int64 value);
        partial void OnDeviceIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 SessionID
        {
            get
            {
                return _SessionID;
            }
            set
            {
                if (_SessionID != value)
                {
                    OnSessionIDChanging(value);
                    ReportPropertyChanging("SessionID");
                    _SessionID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("SessionID");
                    OnSessionIDChanged();
                }
            }
        }
        private global::System.Int64 _SessionID;
        partial void OnSessionIDChanging(global::System.Int64 value);
        partial void OnSessionIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Guid> DataOwnerID
        {
            get
            {
                return _DataOwnerID;
            }
            set
            {
                OnDataOwnerIDChanging(value);
                ReportPropertyChanging("DataOwnerID");
                _DataOwnerID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DataOwnerID");
                OnDataOwnerIDChanged();
            }
        }
        private Nullable<global::System.Guid> _DataOwnerID;
        partial void OnDataOwnerIDChanging(Nullable<global::System.Guid> value);
        partial void OnDataOwnerIDChanged();

        #endregion

    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="web.Models", Name="ViewEventCategory")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ViewEventCategory : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ViewEventCategory.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        public static ViewEventCategory CreateViewEventCategory(global::System.Int64 id)
        {
            ViewEventCategory viewEventCategory = new ViewEventCategory();
            viewEventCategory.ID = id;
            return viewEventCategory;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int64 _ID;
        partial void OnIDChanging(global::System.Int64 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Guid> DataOwnerID
        {
            get
            {
                return _DataOwnerID;
            }
            set
            {
                OnDataOwnerIDChanging(value);
                ReportPropertyChanging("DataOwnerID");
                _DataOwnerID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DataOwnerID");
                OnDataOwnerIDChanged();
            }
        }
        private Nullable<global::System.Guid> _DataOwnerID;
        partial void OnDataOwnerIDChanging(Nullable<global::System.Guid> value);
        partial void OnDataOwnerIDChanged();

        #endregion

    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="web.Models", Name="ViewFile")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ViewFile : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ViewFile.
        /// </summary>
        /// <param name="fileName">Исходное значение свойства FileName.</param>
        /// <param name="content">Исходное значение свойства Content.</param>
        public static ViewFile CreateViewFile(global::System.String fileName, global::System.String content)
        {
            ViewFile viewFile = new ViewFile();
            viewFile.FileName = fileName;
            viewFile.Content = content;
            return viewFile;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String FileName
        {
            get
            {
                return _FileName;
            }
            set
            {
                if (_FileName != value)
                {
                    OnFileNameChanging(value);
                    ReportPropertyChanging("FileName");
                    _FileName = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("FileName");
                    OnFileNameChanged();
                }
            }
        }
        private global::System.String _FileName;
        partial void OnFileNameChanging(global::System.String value);
        partial void OnFileNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Content
        {
            get
            {
                return _Content;
            }
            set
            {
                if (_Content != value)
                {
                    OnContentChanging(value);
                    ReportPropertyChanging("Content");
                    _Content = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("Content");
                    OnContentChanged();
                }
            }
        }
        private global::System.String _Content;
        partial void OnContentChanging(global::System.String value);
        partial void OnContentChanged();

        #endregion

    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="web.Models", Name="ViewGroup")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ViewGroup : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ViewGroup.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="monday">Исходное значение свойства Monday.</param>
        /// <param name="tuesday">Исходное значение свойства Tuesday.</param>
        /// <param name="wednesday">Исходное значение свойства Wednesday.</param>
        /// <param name="thursday">Исходное значение свойства Thursday.</param>
        /// <param name="friday">Исходное значение свойства Friday.</param>
        /// <param name="saturday">Исходное значение свойства Saturday.</param>
        /// <param name="sunday">Исходное значение свойства Sunday.</param>
        /// <param name="deviceTypeID">Исходное значение свойства DeviceTypeID.</param>
        public static ViewGroup CreateViewGroup(global::System.Int64 id, global::System.Boolean monday, global::System.Boolean tuesday, global::System.Boolean wednesday, global::System.Boolean thursday, global::System.Boolean friday, global::System.Boolean saturday, global::System.Boolean sunday, global::System.Int64 deviceTypeID)
        {
            ViewGroup viewGroup = new ViewGroup();
            viewGroup.ID = id;
            viewGroup.Monday = monday;
            viewGroup.Tuesday = tuesday;
            viewGroup.Wednesday = wednesday;
            viewGroup.Thursday = thursday;
            viewGroup.Friday = friday;
            viewGroup.Saturday = saturday;
            viewGroup.Sunday = sunday;
            viewGroup.DeviceTypeID = deviceTypeID;
            return viewGroup;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int64 _ID;
        partial void OnIDChanging(global::System.Int64 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DeviceNamePrefix
        {
            get
            {
                return _DeviceNamePrefix;
            }
            set
            {
                OnDeviceNamePrefixChanging(value);
                ReportPropertyChanging("DeviceNamePrefix");
                _DeviceNamePrefix = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DeviceNamePrefix");
                OnDeviceNamePrefixChanged();
            }
        }
        private global::System.String _DeviceNamePrefix;
        partial void OnDeviceNamePrefixChanging(global::System.String value);
        partial void OnDeviceNamePrefixChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String StartingIP1
        {
            get
            {
                return _StartingIP1;
            }
            set
            {
                OnStartingIP1Changing(value);
                ReportPropertyChanging("StartingIP1");
                _StartingIP1 = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("StartingIP1");
                OnStartingIP1Changed();
            }
        }
        private global::System.String _StartingIP1;
        partial void OnStartingIP1Changing(global::System.String value);
        partial void OnStartingIP1Changed();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String StartingIP2
        {
            get
            {
                return _StartingIP2;
            }
            set
            {
                OnStartingIP2Changing(value);
                ReportPropertyChanging("StartingIP2");
                _StartingIP2 = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("StartingIP2");
                OnStartingIP2Changed();
            }
        }
        private global::System.String _StartingIP2;
        partial void OnStartingIP2Changing(global::System.String value);
        partial void OnStartingIP2Changed();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String StartingIP3
        {
            get
            {
                return _StartingIP3;
            }
            set
            {
                OnStartingIP3Changing(value);
                ReportPropertyChanging("StartingIP3");
                _StartingIP3 = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("StartingIP3");
                OnStartingIP3Changed();
            }
        }
        private global::System.String _StartingIP3;
        partial void OnStartingIP3Changing(global::System.String value);
        partial void OnStartingIP3Changed();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String StartingIP4
        {
            get
            {
                return _StartingIP4;
            }
            set
            {
                OnStartingIP4Changing(value);
                ReportPropertyChanging("StartingIP4");
                _StartingIP4 = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("StartingIP4");
                OnStartingIP4Changed();
            }
        }
        private global::System.String _StartingIP4;
        partial void OnStartingIP4Changing(global::System.String value);
        partial void OnStartingIP4Changed();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String EndingIP1
        {
            get
            {
                return _EndingIP1;
            }
            set
            {
                OnEndingIP1Changing(value);
                ReportPropertyChanging("EndingIP1");
                _EndingIP1 = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("EndingIP1");
                OnEndingIP1Changed();
            }
        }
        private global::System.String _EndingIP1;
        partial void OnEndingIP1Changing(global::System.String value);
        partial void OnEndingIP1Changed();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String EndingIP2
        {
            get
            {
                return _EndingIP2;
            }
            set
            {
                OnEndingIP2Changing(value);
                ReportPropertyChanging("EndingIP2");
                _EndingIP2 = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("EndingIP2");
                OnEndingIP2Changed();
            }
        }
        private global::System.String _EndingIP2;
        partial void OnEndingIP2Changing(global::System.String value);
        partial void OnEndingIP2Changed();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String EndingIP3
        {
            get
            {
                return _EndingIP3;
            }
            set
            {
                OnEndingIP3Changing(value);
                ReportPropertyChanging("EndingIP3");
                _EndingIP3 = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("EndingIP3");
                OnEndingIP3Changed();
            }
        }
        private global::System.String _EndingIP3;
        partial void OnEndingIP3Changing(global::System.String value);
        partial void OnEndingIP3Changed();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String EndingIP4
        {
            get
            {
                return _EndingIP4;
            }
            set
            {
                OnEndingIP4Changing(value);
                ReportPropertyChanging("EndingIP4");
                _EndingIP4 = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("EndingIP4");
                OnEndingIP4Changed();
            }
        }
        private global::System.String _EndingIP4;
        partial void OnEndingIP4Changing(global::System.String value);
        partial void OnEndingIP4Changed();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SecondaryStartingIP1
        {
            get
            {
                return _SecondaryStartingIP1;
            }
            set
            {
                OnSecondaryStartingIP1Changing(value);
                ReportPropertyChanging("SecondaryStartingIP1");
                _SecondaryStartingIP1 = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("SecondaryStartingIP1");
                OnSecondaryStartingIP1Changed();
            }
        }
        private global::System.String _SecondaryStartingIP1;
        partial void OnSecondaryStartingIP1Changing(global::System.String value);
        partial void OnSecondaryStartingIP1Changed();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SecondaryStartingIP2
        {
            get
            {
                return _SecondaryStartingIP2;
            }
            set
            {
                OnSecondaryStartingIP2Changing(value);
                ReportPropertyChanging("SecondaryStartingIP2");
                _SecondaryStartingIP2 = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("SecondaryStartingIP2");
                OnSecondaryStartingIP2Changed();
            }
        }
        private global::System.String _SecondaryStartingIP2;
        partial void OnSecondaryStartingIP2Changing(global::System.String value);
        partial void OnSecondaryStartingIP2Changed();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SecondaryStartingIP3
        {
            get
            {
                return _SecondaryStartingIP3;
            }
            set
            {
                OnSecondaryStartingIP3Changing(value);
                ReportPropertyChanging("SecondaryStartingIP3");
                _SecondaryStartingIP3 = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("SecondaryStartingIP3");
                OnSecondaryStartingIP3Changed();
            }
        }
        private global::System.String _SecondaryStartingIP3;
        partial void OnSecondaryStartingIP3Changing(global::System.String value);
        partial void OnSecondaryStartingIP3Changed();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SecondaryStartingIP4
        {
            get
            {
                return _SecondaryStartingIP4;
            }
            set
            {
                OnSecondaryStartingIP4Changing(value);
                ReportPropertyChanging("SecondaryStartingIP4");
                _SecondaryStartingIP4 = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("SecondaryStartingIP4");
                OnSecondaryStartingIP4Changed();
            }
        }
        private global::System.String _SecondaryStartingIP4;
        partial void OnSecondaryStartingIP4Changing(global::System.String value);
        partial void OnSecondaryStartingIP4Changed();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String StartingIPPort
        {
            get
            {
                return _StartingIPPort;
            }
            set
            {
                OnStartingIPPortChanging(value);
                ReportPropertyChanging("StartingIPPort");
                _StartingIPPort = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("StartingIPPort");
                OnStartingIPPortChanged();
            }
        }
        private global::System.String _StartingIPPort;
        partial void OnStartingIPPortChanging(global::System.String value);
        partial void OnStartingIPPortChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String EndingIPPort
        {
            get
            {
                return _EndingIPPort;
            }
            set
            {
                OnEndingIPPortChanging(value);
                ReportPropertyChanging("EndingIPPort");
                _EndingIPPort = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("EndingIPPort");
                OnEndingIPPortChanged();
            }
        }
        private global::System.String _EndingIPPort;
        partial void OnEndingIPPortChanging(global::System.String value);
        partial void OnEndingIPPortChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SecondaryStartingIPPort
        {
            get
            {
                return _SecondaryStartingIPPort;
            }
            set
            {
                OnSecondaryStartingIPPortChanging(value);
                ReportPropertyChanging("SecondaryStartingIPPort");
                _SecondaryStartingIPPort = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("SecondaryStartingIPPort");
                OnSecondaryStartingIPPortChanged();
            }
        }
        private global::System.String _SecondaryStartingIPPort;
        partial void OnSecondaryStartingIPPortChanging(global::System.String value);
        partial void OnSecondaryStartingIPPortChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Byte> MinutesE
        {
            get
            {
                return _MinutesE;
            }
            set
            {
                OnMinutesEChanging(value);
                ReportPropertyChanging("MinutesE");
                _MinutesE = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("MinutesE");
                OnMinutesEChanged();
            }
        }
        private Nullable<global::System.Byte> _MinutesE;
        partial void OnMinutesEChanging(Nullable<global::System.Byte> value);
        partial void OnMinutesEChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Byte> MinutesG
        {
            get
            {
                return _MinutesG;
            }
            set
            {
                OnMinutesGChanging(value);
                ReportPropertyChanging("MinutesG");
                _MinutesG = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("MinutesG");
                OnMinutesGChanged();
            }
        }
        private Nullable<global::System.Byte> _MinutesG;
        partial void OnMinutesGChanging(Nullable<global::System.Byte> value);
        partial void OnMinutesGChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String MinMode
        {
            get
            {
                return _MinMode;
            }
            set
            {
                OnMinModeChanging(value);
                ReportPropertyChanging("MinMode");
                _MinMode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("MinMode");
                OnMinModeChanged();
            }
        }
        private global::System.String _MinMode;
        partial void OnMinModeChanging(global::System.String value);
        partial void OnMinModeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Byte> HoursE
        {
            get
            {
                return _HoursE;
            }
            set
            {
                OnHoursEChanging(value);
                ReportPropertyChanging("HoursE");
                _HoursE = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("HoursE");
                OnHoursEChanged();
            }
        }
        private Nullable<global::System.Byte> _HoursE;
        partial void OnHoursEChanging(Nullable<global::System.Byte> value);
        partial void OnHoursEChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Byte> HoursG
        {
            get
            {
                return _HoursG;
            }
            set
            {
                OnHoursGChanging(value);
                ReportPropertyChanging("HoursG");
                _HoursG = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("HoursG");
                OnHoursGChanged();
            }
        }
        private Nullable<global::System.Byte> _HoursG;
        partial void OnHoursGChanging(Nullable<global::System.Byte> value);
        partial void OnHoursGChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String HourMode
        {
            get
            {
                return _HourMode;
            }
            set
            {
                OnHourModeChanging(value);
                ReportPropertyChanging("HourMode");
                _HourMode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("HourMode");
                OnHourModeChanged();
            }
        }
        private global::System.String _HourMode;
        partial void OnHourModeChanging(global::System.String value);
        partial void OnHourModeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Byte> DaysE
        {
            get
            {
                return _DaysE;
            }
            set
            {
                OnDaysEChanging(value);
                ReportPropertyChanging("DaysE");
                _DaysE = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DaysE");
                OnDaysEChanged();
            }
        }
        private Nullable<global::System.Byte> _DaysE;
        partial void OnDaysEChanging(Nullable<global::System.Byte> value);
        partial void OnDaysEChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Byte> DaysG
        {
            get
            {
                return _DaysG;
            }
            set
            {
                OnDaysGChanging(value);
                ReportPropertyChanging("DaysG");
                _DaysG = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DaysG");
                OnDaysGChanged();
            }
        }
        private Nullable<global::System.Byte> _DaysG;
        partial void OnDaysGChanging(Nullable<global::System.Byte> value);
        partial void OnDaysGChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DayMode
        {
            get
            {
                return _DayMode;
            }
            set
            {
                OnDayModeChanging(value);
                ReportPropertyChanging("DayMode");
                _DayMode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DayMode");
                OnDayModeChanged();
            }
        }
        private global::System.String _DayMode;
        partial void OnDayModeChanging(global::System.String value);
        partial void OnDayModeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Byte> WeeksG
        {
            get
            {
                return _WeeksG;
            }
            set
            {
                OnWeeksGChanging(value);
                ReportPropertyChanging("WeeksG");
                _WeeksG = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("WeeksG");
                OnWeeksGChanged();
            }
        }
        private Nullable<global::System.Byte> _WeeksG;
        partial void OnWeeksGChanging(Nullable<global::System.Byte> value);
        partial void OnWeeksGChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String WeekMode
        {
            get
            {
                return _WeekMode;
            }
            set
            {
                OnWeekModeChanging(value);
                ReportPropertyChanging("WeekMode");
                _WeekMode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("WeekMode");
                OnWeekModeChanged();
            }
        }
        private global::System.String _WeekMode;
        partial void OnWeekModeChanging(global::System.String value);
        partial void OnWeekModeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Monday
        {
            get
            {
                return _Monday;
            }
            set
            {
                if (_Monday != value)
                {
                    OnMondayChanging(value);
                    ReportPropertyChanging("Monday");
                    _Monday = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Monday");
                    OnMondayChanged();
                }
            }
        }
        private global::System.Boolean _Monday;
        partial void OnMondayChanging(global::System.Boolean value);
        partial void OnMondayChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Tuesday
        {
            get
            {
                return _Tuesday;
            }
            set
            {
                if (_Tuesday != value)
                {
                    OnTuesdayChanging(value);
                    ReportPropertyChanging("Tuesday");
                    _Tuesday = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Tuesday");
                    OnTuesdayChanged();
                }
            }
        }
        private global::System.Boolean _Tuesday;
        partial void OnTuesdayChanging(global::System.Boolean value);
        partial void OnTuesdayChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Wednesday
        {
            get
            {
                return _Wednesday;
            }
            set
            {
                if (_Wednesday != value)
                {
                    OnWednesdayChanging(value);
                    ReportPropertyChanging("Wednesday");
                    _Wednesday = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Wednesday");
                    OnWednesdayChanged();
                }
            }
        }
        private global::System.Boolean _Wednesday;
        partial void OnWednesdayChanging(global::System.Boolean value);
        partial void OnWednesdayChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Thursday
        {
            get
            {
                return _Thursday;
            }
            set
            {
                if (_Thursday != value)
                {
                    OnThursdayChanging(value);
                    ReportPropertyChanging("Thursday");
                    _Thursday = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Thursday");
                    OnThursdayChanged();
                }
            }
        }
        private global::System.Boolean _Thursday;
        partial void OnThursdayChanging(global::System.Boolean value);
        partial void OnThursdayChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Friday
        {
            get
            {
                return _Friday;
            }
            set
            {
                if (_Friday != value)
                {
                    OnFridayChanging(value);
                    ReportPropertyChanging("Friday");
                    _Friday = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Friday");
                    OnFridayChanged();
                }
            }
        }
        private global::System.Boolean _Friday;
        partial void OnFridayChanging(global::System.Boolean value);
        partial void OnFridayChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Saturday
        {
            get
            {
                return _Saturday;
            }
            set
            {
                if (_Saturday != value)
                {
                    OnSaturdayChanging(value);
                    ReportPropertyChanging("Saturday");
                    _Saturday = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Saturday");
                    OnSaturdayChanged();
                }
            }
        }
        private global::System.Boolean _Saturday;
        partial void OnSaturdayChanging(global::System.Boolean value);
        partial void OnSaturdayChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Sunday
        {
            get
            {
                return _Sunday;
            }
            set
            {
                if (_Sunday != value)
                {
                    OnSundayChanging(value);
                    ReportPropertyChanging("Sunday");
                    _Sunday = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Sunday");
                    OnSundayChanged();
                }
            }
        }
        private global::System.Boolean _Sunday;
        partial void OnSundayChanging(global::System.Boolean value);
        partial void OnSundayChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Guid> DataOwnerID
        {
            get
            {
                return _DataOwnerID;
            }
            set
            {
                OnDataOwnerIDChanging(value);
                ReportPropertyChanging("DataOwnerID");
                _DataOwnerID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DataOwnerID");
                OnDataOwnerIDChanged();
            }
        }
        private Nullable<global::System.Guid> _DataOwnerID;
        partial void OnDataOwnerIDChanging(Nullable<global::System.Guid> value);
        partial void OnDataOwnerIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String StartingApartment
        {
            get
            {
                return _StartingApartment;
            }
            set
            {
                OnStartingApartmentChanging(value);
                ReportPropertyChanging("StartingApartment");
                _StartingApartment = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("StartingApartment");
                OnStartingApartmentChanged();
            }
        }
        private global::System.String _StartingApartment;
        partial void OnStartingApartmentChanging(global::System.String value);
        partial void OnStartingApartmentChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String EndingApartment
        {
            get
            {
                return _EndingApartment;
            }
            set
            {
                OnEndingApartmentChanging(value);
                ReportPropertyChanging("EndingApartment");
                _EndingApartment = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("EndingApartment");
                OnEndingApartmentChanged();
            }
        }
        private global::System.String _EndingApartment;
        partial void OnEndingApartmentChanging(global::System.String value);
        partial void OnEndingApartmentChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String StartingBuilding
        {
            get
            {
                return _StartingBuilding;
            }
            set
            {
                OnStartingBuildingChanging(value);
                ReportPropertyChanging("StartingBuilding");
                _StartingBuilding = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("StartingBuilding");
                OnStartingBuildingChanged();
            }
        }
        private global::System.String _StartingBuilding;
        partial void OnStartingBuildingChanging(global::System.String value);
        partial void OnStartingBuildingChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String EndingBuilding
        {
            get
            {
                return _EndingBuilding;
            }
            set
            {
                OnEndingBuildingChanging(value);
                ReportPropertyChanging("EndingBuilding");
                _EndingBuilding = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("EndingBuilding");
                OnEndingBuildingChanged();
            }
        }
        private global::System.String _EndingBuilding;
        partial void OnEndingBuildingChanging(global::System.String value);
        partial void OnEndingBuildingChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Street
        {
            get
            {
                return _Street;
            }
            set
            {
                OnStreetChanging(value);
                ReportPropertyChanging("Street");
                _Street = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Street");
                OnStreetChanged();
            }
        }
        private global::System.String _Street;
        partial void OnStreetChanging(global::System.String value);
        partial void OnStreetChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String City
        {
            get
            {
                return _City;
            }
            set
            {
                OnCityChanging(value);
                ReportPropertyChanging("City");
                _City = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("City");
                OnCityChanged();
            }
        }
        private global::System.String _City;
        partial void OnCityChanging(global::System.String value);
        partial void OnCityChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String State
        {
            get
            {
                return _State;
            }
            set
            {
                OnStateChanging(value);
                ReportPropertyChanging("State");
                _State = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("State");
                OnStateChanged();
            }
        }
        private global::System.String _State;
        partial void OnStateChanging(global::System.String value);
        partial void OnStateChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Country
        {
            get
            {
                return _Country;
            }
            set
            {
                OnCountryChanging(value);
                ReportPropertyChanging("Country");
                _Country = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Country");
                OnCountryChanged();
            }
        }
        private global::System.String _Country;
        partial void OnCountryChanging(global::System.String value);
        partial void OnCountryChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ZipCode
        {
            get
            {
                return _ZipCode;
            }
            set
            {
                OnZipCodeChanging(value);
                ReportPropertyChanging("ZipCode");
                _ZipCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ZipCode");
                OnZipCodeChanged();
            }
        }
        private global::System.String _ZipCode;
        partial void OnZipCodeChanging(global::System.String value);
        partial void OnZipCodeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DeviceType
        {
            get
            {
                return _DeviceType;
            }
            set
            {
                OnDeviceTypeChanging(value);
                ReportPropertyChanging("DeviceType");
                _DeviceType = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DeviceType");
                OnDeviceTypeChanged();
            }
        }
        private global::System.String _DeviceType;
        partial void OnDeviceTypeChanging(global::System.String value);
        partial void OnDeviceTypeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 DeviceTypeID
        {
            get
            {
                return _DeviceTypeID;
            }
            set
            {
                if (_DeviceTypeID != value)
                {
                    OnDeviceTypeIDChanging(value);
                    ReportPropertyChanging("DeviceTypeID");
                    _DeviceTypeID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("DeviceTypeID");
                    OnDeviceTypeIDChanged();
                }
            }
        }
        private global::System.Int64 _DeviceTypeID;
        partial void OnDeviceTypeIDChanging(global::System.Int64 value);
        partial void OnDeviceTypeIDChanged();

        #endregion

    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="web.Models", Name="ViewOBISGroup")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ViewOBISGroup : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ViewOBISGroup.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="value">Исходное значение свойства Value.</param>
        /// <param name="standard">Исходное значение свойства Standard.</param>
        /// <param name="reserved">Исходное значение свойства Reserved.</param>
        /// <param name="unusable">Исходное значение свойства Unusable.</param>
        /// <param name="context">Исходное значение свойства Context.</param>
        public static ViewOBISGroup CreateViewOBISGroup(global::System.Int64 id, global::System.Byte value, global::System.Boolean standard, global::System.Boolean reserved, global::System.Boolean unusable, global::System.Boolean context)
        {
            ViewOBISGroup viewOBISGroup = new ViewOBISGroup();
            viewOBISGroup.ID = id;
            viewOBISGroup.Value = value;
            viewOBISGroup.Standard = standard;
            viewOBISGroup.Reserved = reserved;
            viewOBISGroup.Unusable = unusable;
            viewOBISGroup.Context = context;
            return viewOBISGroup;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int64 _ID;
        partial void OnIDChanging(global::System.Int64 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Type
        {
            get
            {
                return _Type;
            }
            set
            {
                OnTypeChanging(value);
                ReportPropertyChanging("Type");
                _Type = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Type");
                OnTypeChanged();
            }
        }
        private global::System.String _Type;
        partial void OnTypeChanging(global::System.String value);
        partial void OnTypeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Byte Value
        {
            get
            {
                return _Value;
            }
            set
            {
                if (_Value != value)
                {
                    OnValueChanging(value);
                    ReportPropertyChanging("Value");
                    _Value = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Value");
                    OnValueChanged();
                }
            }
        }
        private global::System.Byte _Value;
        partial void OnValueChanging(global::System.Byte value);
        partial void OnValueChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Standard
        {
            get
            {
                return _Standard;
            }
            set
            {
                if (_Standard != value)
                {
                    OnStandardChanging(value);
                    ReportPropertyChanging("Standard");
                    _Standard = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Standard");
                    OnStandardChanged();
                }
            }
        }
        private global::System.Boolean _Standard;
        partial void OnStandardChanging(global::System.Boolean value);
        partial void OnStandardChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Reserved
        {
            get
            {
                return _Reserved;
            }
            set
            {
                if (_Reserved != value)
                {
                    OnReservedChanging(value);
                    ReportPropertyChanging("Reserved");
                    _Reserved = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Reserved");
                    OnReservedChanged();
                }
            }
        }
        private global::System.Boolean _Reserved;
        partial void OnReservedChanging(global::System.Boolean value);
        partial void OnReservedChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Unusable
        {
            get
            {
                return _Unusable;
            }
            set
            {
                if (_Unusable != value)
                {
                    OnUnusableChanging(value);
                    ReportPropertyChanging("Unusable");
                    _Unusable = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Unusable");
                    OnUnusableChanged();
                }
            }
        }
        private global::System.Boolean _Unusable;
        partial void OnUnusableChanging(global::System.Boolean value);
        partial void OnUnusableChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Context
        {
            get
            {
                return _Context;
            }
            set
            {
                if (_Context != value)
                {
                    OnContextChanging(value);
                    ReportPropertyChanging("Context");
                    _Context = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Context");
                    OnContextChanged();
                }
            }
        }
        private global::System.Boolean _Context;
        partial void OnContextChanging(global::System.Boolean value);
        partial void OnContextChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Guid> DataOwnerID
        {
            get
            {
                return _DataOwnerID;
            }
            set
            {
                OnDataOwnerIDChanging(value);
                ReportPropertyChanging("DataOwnerID");
                _DataOwnerID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DataOwnerID");
                OnDataOwnerIDChanged();
            }
        }
        private Nullable<global::System.Guid> _DataOwnerID;
        partial void OnDataOwnerIDChanging(Nullable<global::System.Guid> value);
        partial void OnDataOwnerIDChanged();

        #endregion

    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="web.Models", Name="ViewOBISSet")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ViewOBISSet : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ViewOBISSet.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="aID">Исходное значение свойства AID.</param>
        /// <param name="bID">Исходное значение свойства BID.</param>
        /// <param name="cID">Исходное значение свойства CID.</param>
        /// <param name="dID">Исходное значение свойства DID.</param>
        /// <param name="eID">Исходное значение свойства EID.</param>
        /// <param name="fID">Исходное значение свойства FID.</param>
        /// <param name="aValue">Исходное значение свойства AValue.</param>
        /// <param name="bValue">Исходное значение свойства BValue.</param>
        /// <param name="cValue">Исходное значение свойства CValue.</param>
        /// <param name="dValue">Исходное значение свойства DValue.</param>
        /// <param name="eValue">Исходное значение свойства EValue.</param>
        /// <param name="fValue">Исходное значение свойства FValue.</param>
        /// <param name="standard">Исходное значение свойства Standard.</param>
        public static ViewOBISSet CreateViewOBISSet(global::System.Int64 id, global::System.Int64 aID, global::System.Int64 bID, global::System.Int64 cID, global::System.Int64 dID, global::System.Int64 eID, global::System.Int64 fID, global::System.Byte aValue, global::System.Byte bValue, global::System.Byte cValue, global::System.Byte dValue, global::System.Byte eValue, global::System.Byte fValue, global::System.Boolean standard)
        {
            ViewOBISSet viewOBISSet = new ViewOBISSet();
            viewOBISSet.ID = id;
            viewOBISSet.AID = aID;
            viewOBISSet.BID = bID;
            viewOBISSet.CID = cID;
            viewOBISSet.DID = dID;
            viewOBISSet.EID = eID;
            viewOBISSet.FID = fID;
            viewOBISSet.AValue = aValue;
            viewOBISSet.BValue = bValue;
            viewOBISSet.CValue = cValue;
            viewOBISSet.DValue = dValue;
            viewOBISSet.EValue = eValue;
            viewOBISSet.FValue = fValue;
            viewOBISSet.Standard = standard;
            return viewOBISSet;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int64 _ID;
        partial void OnIDChanging(global::System.Int64 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 AID
        {
            get
            {
                return _AID;
            }
            set
            {
                if (_AID != value)
                {
                    OnAIDChanging(value);
                    ReportPropertyChanging("AID");
                    _AID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("AID");
                    OnAIDChanged();
                }
            }
        }
        private global::System.Int64 _AID;
        partial void OnAIDChanging(global::System.Int64 value);
        partial void OnAIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 BID
        {
            get
            {
                return _BID;
            }
            set
            {
                if (_BID != value)
                {
                    OnBIDChanging(value);
                    ReportPropertyChanging("BID");
                    _BID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("BID");
                    OnBIDChanged();
                }
            }
        }
        private global::System.Int64 _BID;
        partial void OnBIDChanging(global::System.Int64 value);
        partial void OnBIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 CID
        {
            get
            {
                return _CID;
            }
            set
            {
                if (_CID != value)
                {
                    OnCIDChanging(value);
                    ReportPropertyChanging("CID");
                    _CID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("CID");
                    OnCIDChanged();
                }
            }
        }
        private global::System.Int64 _CID;
        partial void OnCIDChanging(global::System.Int64 value);
        partial void OnCIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 DID
        {
            get
            {
                return _DID;
            }
            set
            {
                if (_DID != value)
                {
                    OnDIDChanging(value);
                    ReportPropertyChanging("DID");
                    _DID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("DID");
                    OnDIDChanged();
                }
            }
        }
        private global::System.Int64 _DID;
        partial void OnDIDChanging(global::System.Int64 value);
        partial void OnDIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 EID
        {
            get
            {
                return _EID;
            }
            set
            {
                if (_EID != value)
                {
                    OnEIDChanging(value);
                    ReportPropertyChanging("EID");
                    _EID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("EID");
                    OnEIDChanged();
                }
            }
        }
        private global::System.Int64 _EID;
        partial void OnEIDChanging(global::System.Int64 value);
        partial void OnEIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 FID
        {
            get
            {
                return _FID;
            }
            set
            {
                if (_FID != value)
                {
                    OnFIDChanging(value);
                    ReportPropertyChanging("FID");
                    _FID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("FID");
                    OnFIDChanged();
                }
            }
        }
        private global::System.Int64 _FID;
        partial void OnFIDChanging(global::System.Int64 value);
        partial void OnFIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> DeviceTypeID
        {
            get
            {
                return _DeviceTypeID;
            }
            set
            {
                OnDeviceTypeIDChanging(value);
                ReportPropertyChanging("DeviceTypeID");
                _DeviceTypeID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DeviceTypeID");
                OnDeviceTypeIDChanged();
            }
        }
        private Nullable<global::System.Int64> _DeviceTypeID;
        partial void OnDeviceTypeIDChanging(Nullable<global::System.Int64> value);
        partial void OnDeviceTypeIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Guid> DataOwnerID
        {
            get
            {
                return _DataOwnerID;
            }
            set
            {
                OnDataOwnerIDChanging(value);
                ReportPropertyChanging("DataOwnerID");
                _DataOwnerID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DataOwnerID");
                OnDataOwnerIDChanged();
            }
        }
        private Nullable<global::System.Guid> _DataOwnerID;
        partial void OnDataOwnerIDChanging(Nullable<global::System.Guid> value);
        partial void OnDataOwnerIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Byte AValue
        {
            get
            {
                return _AValue;
            }
            set
            {
                if (_AValue != value)
                {
                    OnAValueChanging(value);
                    ReportPropertyChanging("AValue");
                    _AValue = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("AValue");
                    OnAValueChanged();
                }
            }
        }
        private global::System.Byte _AValue;
        partial void OnAValueChanging(global::System.Byte value);
        partial void OnAValueChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Byte BValue
        {
            get
            {
                return _BValue;
            }
            set
            {
                if (_BValue != value)
                {
                    OnBValueChanging(value);
                    ReportPropertyChanging("BValue");
                    _BValue = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("BValue");
                    OnBValueChanged();
                }
            }
        }
        private global::System.Byte _BValue;
        partial void OnBValueChanging(global::System.Byte value);
        partial void OnBValueChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Byte CValue
        {
            get
            {
                return _CValue;
            }
            set
            {
                if (_CValue != value)
                {
                    OnCValueChanging(value);
                    ReportPropertyChanging("CValue");
                    _CValue = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("CValue");
                    OnCValueChanged();
                }
            }
        }
        private global::System.Byte _CValue;
        partial void OnCValueChanging(global::System.Byte value);
        partial void OnCValueChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Byte DValue
        {
            get
            {
                return _DValue;
            }
            set
            {
                if (_DValue != value)
                {
                    OnDValueChanging(value);
                    ReportPropertyChanging("DValue");
                    _DValue = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("DValue");
                    OnDValueChanged();
                }
            }
        }
        private global::System.Byte _DValue;
        partial void OnDValueChanging(global::System.Byte value);
        partial void OnDValueChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Byte EValue
        {
            get
            {
                return _EValue;
            }
            set
            {
                if (_EValue != value)
                {
                    OnEValueChanging(value);
                    ReportPropertyChanging("EValue");
                    _EValue = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("EValue");
                    OnEValueChanged();
                }
            }
        }
        private global::System.Byte _EValue;
        partial void OnEValueChanging(global::System.Byte value);
        partial void OnEValueChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Byte FValue
        {
            get
            {
                return _FValue;
            }
            set
            {
                if (_FValue != value)
                {
                    OnFValueChanging(value);
                    ReportPropertyChanging("FValue");
                    _FValue = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("FValue");
                    OnFValueChanged();
                }
            }
        }
        private global::System.Byte _FValue;
        partial void OnFValueChanging(global::System.Byte value);
        partial void OnFValueChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DeviceTypeName
        {
            get
            {
                return _DeviceTypeName;
            }
            set
            {
                OnDeviceTypeNameChanging(value);
                ReportPropertyChanging("DeviceTypeName");
                _DeviceTypeName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DeviceTypeName");
                OnDeviceTypeNameChanged();
            }
        }
        private global::System.String _DeviceTypeName;
        partial void OnDeviceTypeNameChanging(global::System.String value);
        partial void OnDeviceTypeNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Standard
        {
            get
            {
                return _Standard;
            }
            set
            {
                if (_Standard != value)
                {
                    OnStandardChanging(value);
                    ReportPropertyChanging("Standard");
                    _Standard = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Standard");
                    OnStandardChanged();
                }
            }
        }
        private global::System.Boolean _Standard;
        partial void OnStandardChanging(global::System.Boolean value);
        partial void OnStandardChanged();

        #endregion

    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="web.Models", Name="ViewSchedule")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ViewSchedule : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ViewSchedule.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="deviceID">Исходное значение свойства DeviceID.</param>
        /// <param name="nextActionTime">Исходное значение свойства NextActionTime.</param>
        public static ViewSchedule CreateViewSchedule(global::System.Int64 id, global::System.Int64 deviceID, global::System.DateTime nextActionTime)
        {
            ViewSchedule viewSchedule = new ViewSchedule();
            viewSchedule.ID = id;
            viewSchedule.DeviceID = deviceID;
            viewSchedule.NextActionTime = nextActionTime;
            return viewSchedule;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int64 _ID;
        partial void OnIDChanging(global::System.Int64 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 DeviceID
        {
            get
            {
                return _DeviceID;
            }
            set
            {
                if (_DeviceID != value)
                {
                    OnDeviceIDChanging(value);
                    ReportPropertyChanging("DeviceID");
                    _DeviceID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("DeviceID");
                    OnDeviceIDChanged();
                }
            }
        }
        private global::System.Int64 _DeviceID;
        partial void OnDeviceIDChanging(global::System.Int64 value);
        partial void OnDeviceIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime NextActionTime
        {
            get
            {
                return _NextActionTime;
            }
            set
            {
                if (_NextActionTime != value)
                {
                    OnNextActionTimeChanging(value);
                    ReportPropertyChanging("NextActionTime");
                    _NextActionTime = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("NextActionTime");
                    OnNextActionTimeChanged();
                }
            }
        }
        private global::System.DateTime _NextActionTime;
        partial void OnNextActionTimeChanging(global::System.DateTime value);
        partial void OnNextActionTimeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> LastExecTime
        {
            get
            {
                return _LastExecTime;
            }
            set
            {
                OnLastExecTimeChanging(value);
                ReportPropertyChanging("LastExecTime");
                _LastExecTime = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LastExecTime");
                OnLastExecTimeChanged();
            }
        }
        private Nullable<global::System.DateTime> _LastExecTime;
        partial void OnLastExecTimeChanging(Nullable<global::System.DateTime> value);
        partial void OnLastExecTimeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> ExecPID
        {
            get
            {
                return _ExecPID;
            }
            set
            {
                OnExecPIDChanging(value);
                ReportPropertyChanging("ExecPID");
                _ExecPID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ExecPID");
                OnExecPIDChanged();
            }
        }
        private Nullable<global::System.Int64> _ExecPID;
        partial void OnExecPIDChanging(Nullable<global::System.Int64> value);
        partial void OnExecPIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ExecStationIP
        {
            get
            {
                return _ExecStationIP;
            }
            set
            {
                OnExecStationIPChanging(value);
                ReportPropertyChanging("ExecStationIP");
                _ExecStationIP = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ExecStationIP");
                OnExecStationIPChanged();
            }
        }
        private global::System.String _ExecStationIP;
        partial void OnExecStationIPChanging(global::System.String value);
        partial void OnExecStationIPChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Guid> DataOwnerID
        {
            get
            {
                return _DataOwnerID;
            }
            set
            {
                OnDataOwnerIDChanging(value);
                ReportPropertyChanging("DataOwnerID");
                _DataOwnerID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DataOwnerID");
                OnDataOwnerIDChanged();
            }
        }
        private Nullable<global::System.Guid> _DataOwnerID;
        partial void OnDataOwnerIDChanging(Nullable<global::System.Guid> value);
        partial void OnDataOwnerIDChanged();

        #endregion

    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="web.Models", Name="ViewSeries")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ViewSeries : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ViewSeries.
        /// </summary>
        /// <param name="startTime">Исходное значение свойства StartTime.</param>
        /// <param name="endTime">Исходное значение свойства EndTime.</param>
        /// <param name="count">Исходное значение свойства Count.</param>
        /// <param name="units">Исходное значение свойства Units.</param>
        /// <param name="name">Исходное значение свойства Name.</param>
        public static ViewSeries CreateViewSeries(global::System.DateTime startTime, global::System.DateTime endTime, global::System.Int64 count, global::System.String units, global::System.String name)
        {
            ViewSeries viewSeries = new ViewSeries();
            viewSeries.StartTime = startTime;
            viewSeries.EndTime = endTime;
            viewSeries.Count = count;
            viewSeries.Units = units;
            viewSeries.Name = name;
            return viewSeries;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime StartTime
        {
            get
            {
                return _StartTime;
            }
            set
            {
                if (_StartTime != value)
                {
                    OnStartTimeChanging(value);
                    ReportPropertyChanging("StartTime");
                    _StartTime = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("StartTime");
                    OnStartTimeChanged();
                }
            }
        }
        private global::System.DateTime _StartTime;
        partial void OnStartTimeChanging(global::System.DateTime value);
        partial void OnStartTimeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime EndTime
        {
            get
            {
                return _EndTime;
            }
            set
            {
                if (_EndTime != value)
                {
                    OnEndTimeChanging(value);
                    ReportPropertyChanging("EndTime");
                    _EndTime = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("EndTime");
                    OnEndTimeChanged();
                }
            }
        }
        private global::System.DateTime _EndTime;
        partial void OnEndTimeChanging(global::System.DateTime value);
        partial void OnEndTimeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Count
        {
            get
            {
                return _Count;
            }
            set
            {
                if (_Count != value)
                {
                    OnCountChanging(value);
                    ReportPropertyChanging("Count");
                    _Count = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Count");
                    OnCountChanged();
                }
            }
        }
        private global::System.Int64 _Count;
        partial void OnCountChanging(global::System.Int64 value);
        partial void OnCountChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Units
        {
            get
            {
                return _Units;
            }
            set
            {
                if (_Units != value)
                {
                    OnUnitsChanging(value);
                    ReportPropertyChanging("Units");
                    _Units = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("Units");
                    OnUnitsChanged();
                }
            }
        }
        private global::System.String _Units;
        partial void OnUnitsChanging(global::System.String value);
        partial void OnUnitsChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                if (_Name != value)
                {
                    OnNameChanging(value);
                    ReportPropertyChanging("Name");
                    _Name = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("Name");
                    OnNameChanged();
                }
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion

    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="web.Models", Name="ViewSession")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ViewSession : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ViewSession.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="deviceID">Исходное значение свойства DeviceID.</param>
        /// <param name="startTime">Исходное значение свойства StartTime.</param>
        /// <param name="endTime">Исходное значение свойства EndTime.</param>
        /// <param name="resultID">Исходное значение свойства ResultID.</param>
        /// <param name="secondary">Исходное значение свойства Secondary.</param>
        public static ViewSession CreateViewSession(global::System.Int64 id, global::System.Int64 deviceID, global::System.DateTime startTime, global::System.DateTime endTime, global::System.Int64 resultID, global::System.Boolean secondary)
        {
            ViewSession viewSession = new ViewSession();
            viewSession.ID = id;
            viewSession.DeviceID = deviceID;
            viewSession.StartTime = startTime;
            viewSession.EndTime = endTime;
            viewSession.ResultID = resultID;
            viewSession.Secondary = secondary;
            return viewSession;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int64 _ID;
        partial void OnIDChanging(global::System.Int64 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 DeviceID
        {
            get
            {
                return _DeviceID;
            }
            set
            {
                if (_DeviceID != value)
                {
                    OnDeviceIDChanging(value);
                    ReportPropertyChanging("DeviceID");
                    _DeviceID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("DeviceID");
                    OnDeviceIDChanged();
                }
            }
        }
        private global::System.Int64 _DeviceID;
        partial void OnDeviceIDChanging(global::System.Int64 value);
        partial void OnDeviceIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime StartTime
        {
            get
            {
                return _StartTime;
            }
            set
            {
                if (_StartTime != value)
                {
                    OnStartTimeChanging(value);
                    ReportPropertyChanging("StartTime");
                    _StartTime = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("StartTime");
                    OnStartTimeChanged();
                }
            }
        }
        private global::System.DateTime _StartTime;
        partial void OnStartTimeChanging(global::System.DateTime value);
        partial void OnStartTimeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime EndTime
        {
            get
            {
                return _EndTime;
            }
            set
            {
                if (_EndTime != value)
                {
                    OnEndTimeChanging(value);
                    ReportPropertyChanging("EndTime");
                    _EndTime = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("EndTime");
                    OnEndTimeChanged();
                }
            }
        }
        private global::System.DateTime _EndTime;
        partial void OnEndTimeChanging(global::System.DateTime value);
        partial void OnEndTimeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SessionType
        {
            get
            {
                return _SessionType;
            }
            set
            {
                OnSessionTypeChanging(value);
                ReportPropertyChanging("SessionType");
                _SessionType = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("SessionType");
                OnSessionTypeChanged();
            }
        }
        private global::System.String _SessionType;
        partial void OnSessionTypeChanging(global::System.String value);
        partial void OnSessionTypeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 ResultID
        {
            get
            {
                return _ResultID;
            }
            set
            {
                if (_ResultID != value)
                {
                    OnResultIDChanging(value);
                    ReportPropertyChanging("ResultID");
                    _ResultID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ResultID");
                    OnResultIDChanged();
                }
            }
        }
        private global::System.Int64 _ResultID;
        partial void OnResultIDChanging(global::System.Int64 value);
        partial void OnResultIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Parameters
        {
            get
            {
                return _Parameters;
            }
            set
            {
                OnParametersChanging(value);
                ReportPropertyChanging("Parameters");
                _Parameters = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Parameters");
                OnParametersChanged();
            }
        }
        private global::System.String _Parameters;
        partial void OnParametersChanging(global::System.String value);
        partial void OnParametersChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DeviceIdent
        {
            get
            {
                return _DeviceIdent;
            }
            set
            {
                OnDeviceIdentChanging(value);
                ReportPropertyChanging("DeviceIdent");
                _DeviceIdent = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DeviceIdent");
                OnDeviceIdentChanged();
            }
        }
        private global::System.String _DeviceIdent;
        partial void OnDeviceIdentChanging(global::System.String value);
        partial void OnDeviceIdentChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Secondary
        {
            get
            {
                return _Secondary;
            }
            set
            {
                if (_Secondary != value)
                {
                    OnSecondaryChanging(value);
                    ReportPropertyChanging("Secondary");
                    _Secondary = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Secondary");
                    OnSecondaryChanged();
                }
            }
        }
        private global::System.Boolean _Secondary;
        partial void OnSecondaryChanging(global::System.Boolean value);
        partial void OnSecondaryChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Guid> DataOwnerID
        {
            get
            {
                return _DataOwnerID;
            }
            set
            {
                OnDataOwnerIDChanging(value);
                ReportPropertyChanging("DataOwnerID");
                _DataOwnerID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DataOwnerID");
                OnDataOwnerIDChanged();
            }
        }
        private Nullable<global::System.Guid> _DataOwnerID;
        partial void OnDataOwnerIDChanging(Nullable<global::System.Guid> value);
        partial void OnDataOwnerIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Data
        {
            get
            {
                return _Data;
            }
            set
            {
                OnDataChanging(value);
                ReportPropertyChanging("Data");
                _Data = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Data");
                OnDataChanged();
            }
        }
        private global::System.String _Data;
        partial void OnDataChanging(global::System.String value);
        partial void OnDataChanged();

        #endregion

    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="web.Models", Name="ViewState")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ViewState : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ViewState.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="countryID">Исходное значение свойства CountryID.</param>
        /// <param name="dataOwnerID">Исходное значение свойства DataOwnerID.</param>
        public static ViewState CreateViewState(global::System.Int64 id, global::System.Int64 countryID, global::System.Guid dataOwnerID)
        {
            ViewState viewState = new ViewState();
            viewState.ID = id;
            viewState.CountryID = countryID;
            viewState.DataOwnerID = dataOwnerID;
            return viewState;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int64 _ID;
        partial void OnIDChanging(global::System.Int64 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String State
        {
            get
            {
                return _State;
            }
            set
            {
                OnStateChanging(value);
                ReportPropertyChanging("State");
                _State = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("State");
                OnStateChanged();
            }
        }
        private global::System.String _State;
        partial void OnStateChanging(global::System.String value);
        partial void OnStateChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 CountryID
        {
            get
            {
                return _CountryID;
            }
            set
            {
                if (_CountryID != value)
                {
                    OnCountryIDChanging(value);
                    ReportPropertyChanging("CountryID");
                    _CountryID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("CountryID");
                    OnCountryIDChanged();
                }
            }
        }
        private global::System.Int64 _CountryID;
        partial void OnCountryIDChanging(global::System.Int64 value);
        partial void OnCountryIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid DataOwnerID
        {
            get
            {
                return _DataOwnerID;
            }
            set
            {
                if (_DataOwnerID != value)
                {
                    OnDataOwnerIDChanging(value);
                    ReportPropertyChanging("DataOwnerID");
                    _DataOwnerID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("DataOwnerID");
                    OnDataOwnerIDChanged();
                }
            }
        }
        private global::System.Guid _DataOwnerID;
        partial void OnDataOwnerIDChanging(global::System.Guid value);
        partial void OnDataOwnerIDChanged();

        #endregion

    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="web.Models", Name="ViewStreet")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ViewStreet : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ViewStreet.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="cityID">Исходное значение свойства CityID.</param>
        /// <param name="dataOwnerID">Исходное значение свойства DataOwnerID.</param>
        /// <param name="stateID">Исходное значение свойства StateID.</param>
        /// <param name="countryID">Исходное значение свойства CountryID.</param>
        public static ViewStreet CreateViewStreet(global::System.Int64 id, global::System.Int64 cityID, global::System.Guid dataOwnerID, global::System.Int64 stateID, global::System.Int64 countryID)
        {
            ViewStreet viewStreet = new ViewStreet();
            viewStreet.ID = id;
            viewStreet.CityID = cityID;
            viewStreet.DataOwnerID = dataOwnerID;
            viewStreet.StateID = stateID;
            viewStreet.CountryID = countryID;
            return viewStreet;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int64 _ID;
        partial void OnIDChanging(global::System.Int64 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Street
        {
            get
            {
                return _Street;
            }
            set
            {
                OnStreetChanging(value);
                ReportPropertyChanging("Street");
                _Street = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Street");
                OnStreetChanged();
            }
        }
        private global::System.String _Street;
        partial void OnStreetChanging(global::System.String value);
        partial void OnStreetChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 CityID
        {
            get
            {
                return _CityID;
            }
            set
            {
                if (_CityID != value)
                {
                    OnCityIDChanging(value);
                    ReportPropertyChanging("CityID");
                    _CityID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("CityID");
                    OnCityIDChanged();
                }
            }
        }
        private global::System.Int64 _CityID;
        partial void OnCityIDChanging(global::System.Int64 value);
        partial void OnCityIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid DataOwnerID
        {
            get
            {
                return _DataOwnerID;
            }
            set
            {
                if (_DataOwnerID != value)
                {
                    OnDataOwnerIDChanging(value);
                    ReportPropertyChanging("DataOwnerID");
                    _DataOwnerID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("DataOwnerID");
                    OnDataOwnerIDChanged();
                }
            }
        }
        private global::System.Guid _DataOwnerID;
        partial void OnDataOwnerIDChanging(global::System.Guid value);
        partial void OnDataOwnerIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 StateID
        {
            get
            {
                return _StateID;
            }
            set
            {
                if (_StateID != value)
                {
                    OnStateIDChanging(value);
                    ReportPropertyChanging("StateID");
                    _StateID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("StateID");
                    OnStateIDChanged();
                }
            }
        }
        private global::System.Int64 _StateID;
        partial void OnStateIDChanging(global::System.Int64 value);
        partial void OnStateIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 CountryID
        {
            get
            {
                return _CountryID;
            }
            set
            {
                if (_CountryID != value)
                {
                    OnCountryIDChanging(value);
                    ReportPropertyChanging("CountryID");
                    _CountryID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("CountryID");
                    OnCountryIDChanged();
                }
            }
        }
        private global::System.Int64 _CountryID;
        partial void OnCountryIDChanging(global::System.Int64 value);
        partial void OnCountryIDChanged();

        #endregion

    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="web.Models", Name="ViewSVGDataElementState")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ViewSVGDataElementState : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ViewSVGDataElementState.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="lowLimit">Исходное значение свойства LowLimit.</param>
        /// <param name="state">Исходное значение свойства State.</param>
        /// <param name="docID">Исходное значение свойства DocID.</param>
        /// <param name="valueIdentifier">Исходное значение свойства ValueIdentifier.</param>
        /// <param name="dataOwnerID">Исходное значение свойства DataOwnerID.</param>
        public static ViewSVGDataElementState CreateViewSVGDataElementState(global::System.Int64 id, global::System.Decimal lowLimit, global::System.String state, global::System.Int64 docID, global::System.Guid valueIdentifier, global::System.Guid dataOwnerID)
        {
            ViewSVGDataElementState viewSVGDataElementState = new ViewSVGDataElementState();
            viewSVGDataElementState.ID = id;
            viewSVGDataElementState.LowLimit = lowLimit;
            viewSVGDataElementState.State = state;
            viewSVGDataElementState.DocID = docID;
            viewSVGDataElementState.ValueIdentifier = valueIdentifier;
            viewSVGDataElementState.DataOwnerID = dataOwnerID;
            return viewSVGDataElementState;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int64 _ID;
        partial void OnIDChanging(global::System.Int64 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Decimal LowLimit
        {
            get
            {
                return _LowLimit;
            }
            set
            {
                if (_LowLimit != value)
                {
                    OnLowLimitChanging(value);
                    ReportPropertyChanging("LowLimit");
                    _LowLimit = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("LowLimit");
                    OnLowLimitChanged();
                }
            }
        }
        private global::System.Decimal _LowLimit;
        partial void OnLowLimitChanging(global::System.Decimal value);
        partial void OnLowLimitChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String State
        {
            get
            {
                return _State;
            }
            set
            {
                if (_State != value)
                {
                    OnStateChanging(value);
                    ReportPropertyChanging("State");
                    _State = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("State");
                    OnStateChanged();
                }
            }
        }
        private global::System.String _State;
        partial void OnStateChanging(global::System.String value);
        partial void OnStateChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 DocID
        {
            get
            {
                return _DocID;
            }
            set
            {
                if (_DocID != value)
                {
                    OnDocIDChanging(value);
                    ReportPropertyChanging("DocID");
                    _DocID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("DocID");
                    OnDocIDChanged();
                }
            }
        }
        private global::System.Int64 _DocID;
        partial void OnDocIDChanging(global::System.Int64 value);
        partial void OnDocIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ValueIdentifier
        {
            get
            {
                return _ValueIdentifier;
            }
            set
            {
                if (_ValueIdentifier != value)
                {
                    OnValueIdentifierChanging(value);
                    ReportPropertyChanging("ValueIdentifier");
                    _ValueIdentifier = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ValueIdentifier");
                    OnValueIdentifierChanged();
                }
            }
        }
        private global::System.Guid _ValueIdentifier;
        partial void OnValueIdentifierChanging(global::System.Guid value);
        partial void OnValueIdentifierChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid DataOwnerID
        {
            get
            {
                return _DataOwnerID;
            }
            set
            {
                if (_DataOwnerID != value)
                {
                    OnDataOwnerIDChanging(value);
                    ReportPropertyChanging("DataOwnerID");
                    _DataOwnerID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("DataOwnerID");
                    OnDataOwnerIDChanged();
                }
            }
        }
        private global::System.Guid _DataOwnerID;
        partial void OnDataOwnerIDChanging(global::System.Guid value);
        partial void OnDataOwnerIDChanged();

        #endregion

    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="web.Models", Name="ViewUser")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ViewUser : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ViewUser.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        public static ViewUser CreateViewUser(global::System.Int64 id)
        {
            ViewUser viewUser = new ViewUser();
            viewUser.ID = id;
            return viewUser;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int64 _ID;
        partial void OnIDChanging(global::System.Int64 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String FirstName
        {
            get
            {
                return _FirstName;
            }
            set
            {
                OnFirstNameChanging(value);
                ReportPropertyChanging("FirstName");
                _FirstName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("FirstName");
                OnFirstNameChanged();
            }
        }
        private global::System.String _FirstName;
        partial void OnFirstNameChanging(global::System.String value);
        partial void OnFirstNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String LastName
        {
            get
            {
                return _LastName;
            }
            set
            {
                OnLastNameChanging(value);
                ReportPropertyChanging("LastName");
                _LastName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("LastName");
                OnLastNameChanged();
            }
        }
        private global::System.String _LastName;
        partial void OnLastNameChanging(global::System.String value);
        partial void OnLastNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String UserName
        {
            get
            {
                return _UserName;
            }
            set
            {
                OnUserNameChanging(value);
                ReportPropertyChanging("UserName");
                _UserName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("UserName");
                OnUserNameChanged();
            }
        }
        private global::System.String _UserName;
        partial void OnUserNameChanging(global::System.String value);
        partial void OnUserNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Password
        {
            get
            {
                return _Password;
            }
            set
            {
                OnPasswordChanging(value);
                ReportPropertyChanging("Password");
                _Password = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Password");
                OnPasswordChanged();
            }
        }
        private global::System.String _Password;
        partial void OnPasswordChanging(global::System.String value);
        partial void OnPasswordChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Company
        {
            get
            {
                return _Company;
            }
            set
            {
                OnCompanyChanging(value);
                ReportPropertyChanging("Company");
                _Company = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Company");
                OnCompanyChanged();
            }
        }
        private global::System.String _Company;
        partial void OnCompanyChanging(global::System.String value);
        partial void OnCompanyChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Guid> DataOwnerID
        {
            get
            {
                return _DataOwnerID;
            }
            set
            {
                OnDataOwnerIDChanging(value);
                ReportPropertyChanging("DataOwnerID");
                _DataOwnerID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DataOwnerID");
                OnDataOwnerIDChanged();
            }
        }
        private Nullable<global::System.Guid> _DataOwnerID;
        partial void OnDataOwnerIDChanging(Nullable<global::System.Guid> value);
        partial void OnDataOwnerIDChanged();

        #endregion

    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="web.Models", Name="ViewXMLTemplate")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ViewXMLTemplate : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ViewXMLTemplate.
        /// </summary>
        /// <param name="tag">Исходное значение свойства Tag.</param>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="deviceID">Исходное значение свойства DeviceID.</param>
        /// <param name="spID">Исходное значение свойства SpID.</param>
        public static ViewXMLTemplate CreateViewXMLTemplate(global::System.Int32 tag, global::System.Int64 id, global::System.Int64 deviceID, global::System.Int32 spID)
        {
            ViewXMLTemplate viewXMLTemplate = new ViewXMLTemplate();
            viewXMLTemplate.Tag = tag;
            viewXMLTemplate.ID = id;
            viewXMLTemplate.DeviceID = deviceID;
            viewXMLTemplate.SpID = spID;
            return viewXMLTemplate;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Tag
        {
            get
            {
                return _Tag;
            }
            set
            {
                if (_Tag != value)
                {
                    OnTagChanging(value);
                    ReportPropertyChanging("Tag");
                    _Tag = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Tag");
                    OnTagChanged();
                }
            }
        }
        private global::System.Int32 _Tag;
        partial void OnTagChanging(global::System.Int32 value);
        partial void OnTagChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> Parent
        {
            get
            {
                return _Parent;
            }
            set
            {
                OnParentChanging(value);
                ReportPropertyChanging("Parent");
                _Parent = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Parent");
                OnParentChanged();
            }
        }
        private Nullable<global::System.Int32> _Parent;
        partial void OnParentChanging(Nullable<global::System.Int32> value);
        partial void OnParentChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String device_type_1_name_Element
        {
            get
            {
                return _device_type_1_name_Element;
            }
            set
            {
                Ondevice_type_1_name_ElementChanging(value);
                ReportPropertyChanging("device_type_1_name_Element");
                _device_type_1_name_Element = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("device_type_1_name_Element");
                Ondevice_type_1_name_ElementChanged();
            }
        }
        private global::System.String _device_type_1_name_Element;
        partial void Ondevice_type_1_name_ElementChanging(global::System.String value);
        partial void Ondevice_type_1_name_ElementChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String logical_device_2_name_Element
        {
            get
            {
                return _logical_device_2_name_Element;
            }
            set
            {
                Onlogical_device_2_name_ElementChanging(value);
                ReportPropertyChanging("logical_device_2_name_Element");
                _logical_device_2_name_Element = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("logical_device_2_name_Element");
                Onlogical_device_2_name_ElementChanged();
            }
        }
        private global::System.String _logical_device_2_name_Element;
        partial void Onlogical_device_2_name_ElementChanging(global::System.String value);
        partial void Onlogical_device_2_name_ElementChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String logical_object_3_name_Element
        {
            get
            {
                return _logical_object_3_name_Element;
            }
            set
            {
                Onlogical_object_3_name_ElementChanging(value);
                ReportPropertyChanging("logical_object_3_name_Element");
                _logical_object_3_name_Element = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("logical_object_3_name_Element");
                Onlogical_object_3_name_ElementChanged();
            }
        }
        private global::System.String _logical_object_3_name_Element;
        partial void Onlogical_object_3_name_ElementChanging(global::System.String value);
        partial void Onlogical_object_3_name_ElementChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String attribute_4_name_Element
        {
            get
            {
                return _attribute_4_name_Element;
            }
            set
            {
                Onattribute_4_name_ElementChanging(value);
                ReportPropertyChanging("attribute_4_name_Element");
                _attribute_4_name_Element = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("attribute_4_name_Element");
                Onattribute_4_name_ElementChanged();
            }
        }
        private global::System.String _attribute_4_name_Element;
        partial void Onattribute_4_name_ElementChanging(global::System.String value);
        partial void Onattribute_4_name_ElementChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String extended_register_6_value_identifier_Element
        {
            get
            {
                return _extended_register_6_value_identifier_Element;
            }
            set
            {
                Onextended_register_6_value_identifier_ElementChanging(value);
                ReportPropertyChanging("extended_register_6_value_identifier_Element");
                _extended_register_6_value_identifier_Element = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("extended_register_6_value_identifier_Element");
                Onextended_register_6_value_identifier_ElementChanged();
            }
        }
        private global::System.String _extended_register_6_value_identifier_Element;
        partial void Onextended_register_6_value_identifier_ElementChanging(global::System.String value);
        partial void Onextended_register_6_value_identifier_ElementChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String value_9_int_value_Element
        {
            get
            {
                return _value_9_int_value_Element;
            }
            set
            {
                Onvalue_9_int_value_ElementChanging(value);
                ReportPropertyChanging("value_9_int_value_Element");
                _value_9_int_value_Element = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("value_9_int_value_Element");
                Onvalue_9_int_value_ElementChanged();
            }
        }
        private global::System.String _value_9_int_value_Element;
        partial void Onvalue_9_int_value_ElementChanging(global::System.String value);
        partial void Onvalue_9_int_value_ElementChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String string_value_10
        {
            get
            {
                return _string_value_10;
            }
            set
            {
                Onstring_value_10Changing(value);
                ReportPropertyChanging("string_value_10");
                _string_value_10 = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("string_value_10");
                Onstring_value_10Changed();
            }
        }
        private global::System.String _string_value_10;
        partial void Onstring_value_10Changing(global::System.String value);
        partial void Onstring_value_10Changed();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String status_11_int_status_Element
        {
            get
            {
                return _status_11_int_status_Element;
            }
            set
            {
                Onstatus_11_int_status_ElementChanging(value);
                ReportPropertyChanging("status_11_int_status_Element");
                _status_11_int_status_Element = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("status_11_int_status_Element");
                Onstatus_11_int_status_ElementChanged();
            }
        }
        private global::System.String _status_11_int_status_Element;
        partial void Onstatus_11_int_status_ElementChanging(global::System.String value);
        partial void Onstatus_11_int_status_ElementChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String units_7
        {
            get
            {
                return _units_7;
            }
            set
            {
                Onunits_7Changing(value);
                ReportPropertyChanging("units_7");
                _units_7 = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("units_7");
                Onunits_7Changed();
            }
        }
        private global::System.String _units_7;
        partial void Onunits_7Changing(global::System.String value);
        partial void Onunits_7Changed();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String capture_time_13_year_Element
        {
            get
            {
                return _capture_time_13_year_Element;
            }
            set
            {
                Oncapture_time_13_year_ElementChanging(value);
                ReportPropertyChanging("capture_time_13_year_Element");
                _capture_time_13_year_Element = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("capture_time_13_year_Element");
                Oncapture_time_13_year_ElementChanged();
            }
        }
        private global::System.String _capture_time_13_year_Element;
        partial void Oncapture_time_13_year_ElementChanging(global::System.String value);
        partial void Oncapture_time_13_year_ElementChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String month_14
        {
            get
            {
                return _month_14;
            }
            set
            {
                Onmonth_14Changing(value);
                ReportPropertyChanging("month_14");
                _month_14 = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("month_14");
                Onmonth_14Changed();
            }
        }
        private global::System.String _month_14;
        partial void Onmonth_14Changing(global::System.String value);
        partial void Onmonth_14Changed();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String day_of_month_15
        {
            get
            {
                return _day_of_month_15;
            }
            set
            {
                Onday_of_month_15Changing(value);
                ReportPropertyChanging("day_of_month_15");
                _day_of_month_15 = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("day_of_month_15");
                Onday_of_month_15Changed();
            }
        }
        private global::System.String _day_of_month_15;
        partial void Onday_of_month_15Changing(global::System.String value);
        partial void Onday_of_month_15Changed();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String day_of_week_16
        {
            get
            {
                return _day_of_week_16;
            }
            set
            {
                Onday_of_week_16Changing(value);
                ReportPropertyChanging("day_of_week_16");
                _day_of_week_16 = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("day_of_week_16");
                Onday_of_week_16Changed();
            }
        }
        private global::System.String _day_of_week_16;
        partial void Onday_of_week_16Changing(global::System.String value);
        partial void Onday_of_week_16Changed();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String hour_17
        {
            get
            {
                return _hour_17;
            }
            set
            {
                Onhour_17Changing(value);
                ReportPropertyChanging("hour_17");
                _hour_17 = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("hour_17");
                Onhour_17Changed();
            }
        }
        private global::System.String _hour_17;
        partial void Onhour_17Changing(global::System.String value);
        partial void Onhour_17Changed();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String minute_18
        {
            get
            {
                return _minute_18;
            }
            set
            {
                Onminute_18Changing(value);
                ReportPropertyChanging("minute_18");
                _minute_18 = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("minute_18");
                Onminute_18Changed();
            }
        }
        private global::System.String _minute_18;
        partial void Onminute_18Changing(global::System.String value);
        partial void Onminute_18Changed();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String second_19
        {
            get
            {
                return _second_19;
            }
            set
            {
                Onsecond_19Changing(value);
                ReportPropertyChanging("second_19");
                _second_19 = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("second_19");
                Onsecond_19Changed();
            }
        }
        private global::System.String _second_19;
        partial void Onsecond_19Changing(global::System.String value);
        partial void Onsecond_19Changed();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String hundredths_of_second_20
        {
            get
            {
                return _hundredths_of_second_20;
            }
            set
            {
                Onhundredths_of_second_20Changing(value);
                ReportPropertyChanging("hundredths_of_second_20");
                _hundredths_of_second_20 = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("hundredths_of_second_20");
                Onhundredths_of_second_20Changed();
            }
        }
        private global::System.String _hundredths_of_second_20;
        partial void Onhundredths_of_second_20Changing(global::System.String value);
        partial void Onhundredths_of_second_20Changed();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int64 _ID;
        partial void OnIDChanging(global::System.Int64 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 DeviceID
        {
            get
            {
                return _DeviceID;
            }
            set
            {
                if (_DeviceID != value)
                {
                    OnDeviceIDChanging(value);
                    ReportPropertyChanging("DeviceID");
                    _DeviceID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("DeviceID");
                    OnDeviceIDChanged();
                }
            }
        }
        private global::System.Int64 _DeviceID;
        partial void OnDeviceIDChanging(global::System.Int64 value);
        partial void OnDeviceIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Guid> DataOwnerID
        {
            get
            {
                return _DataOwnerID;
            }
            set
            {
                OnDataOwnerIDChanging(value);
                ReportPropertyChanging("DataOwnerID");
                _DataOwnerID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DataOwnerID");
                OnDataOwnerIDChanged();
            }
        }
        private Nullable<global::System.Guid> _DataOwnerID;
        partial void OnDataOwnerIDChanging(Nullable<global::System.Guid> value);
        partial void OnDataOwnerIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 SpID
        {
            get
            {
                return _SpID;
            }
            set
            {
                if (_SpID != value)
                {
                    OnSpIDChanging(value);
                    ReportPropertyChanging("SpID");
                    _SpID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("SpID");
                    OnSpIDChanged();
                }
            }
        }
        private global::System.Int32 _SpID;
        partial void OnSpIDChanging(global::System.Int32 value);
        partial void OnSpIDChanged();

        #endregion

    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="web.Models", Name="ViewZipCode")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ViewZipCode : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ViewZipCode.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="countryID">Исходное значение свойства CountryID.</param>
        /// <param name="dataOwnerID">Исходное значение свойства DataOwnerID.</param>
        public static ViewZipCode CreateViewZipCode(global::System.Int64 id, global::System.Int64 countryID, global::System.Guid dataOwnerID)
        {
            ViewZipCode viewZipCode = new ViewZipCode();
            viewZipCode.ID = id;
            viewZipCode.CountryID = countryID;
            viewZipCode.DataOwnerID = dataOwnerID;
            return viewZipCode;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int64 _ID;
        partial void OnIDChanging(global::System.Int64 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ZipCode
        {
            get
            {
                return _ZipCode;
            }
            set
            {
                OnZipCodeChanging(value);
                ReportPropertyChanging("ZipCode");
                _ZipCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ZipCode");
                OnZipCodeChanged();
            }
        }
        private global::System.String _ZipCode;
        partial void OnZipCodeChanging(global::System.String value);
        partial void OnZipCodeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 CountryID
        {
            get
            {
                return _CountryID;
            }
            set
            {
                if (_CountryID != value)
                {
                    OnCountryIDChanging(value);
                    ReportPropertyChanging("CountryID");
                    _CountryID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("CountryID");
                    OnCountryIDChanged();
                }
            }
        }
        private global::System.Int64 _CountryID;
        partial void OnCountryIDChanging(global::System.Int64 value);
        partial void OnCountryIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid DataOwnerID
        {
            get
            {
                return _DataOwnerID;
            }
            set
            {
                if (_DataOwnerID != value)
                {
                    OnDataOwnerIDChanging(value);
                    ReportPropertyChanging("DataOwnerID");
                    _DataOwnerID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("DataOwnerID");
                    OnDataOwnerIDChanged();
                }
            }
        }
        private global::System.Guid _DataOwnerID;
        partial void OnDataOwnerIDChanging(global::System.Guid value);
        partial void OnDataOwnerIDChanged();

        #endregion

    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="web.Models", Name="vw_aspnet_Applications")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class vw_aspnet_Applications : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта vw_aspnet_Applications.
        /// </summary>
        /// <param name="applicationName">Исходное значение свойства ApplicationName.</param>
        /// <param name="loweredApplicationName">Исходное значение свойства LoweredApplicationName.</param>
        /// <param name="applicationId">Исходное значение свойства ApplicationId.</param>
        public static vw_aspnet_Applications Createvw_aspnet_Applications(global::System.String applicationName, global::System.String loweredApplicationName, global::System.Guid applicationId)
        {
            vw_aspnet_Applications vw_aspnet_Applications = new vw_aspnet_Applications();
            vw_aspnet_Applications.ApplicationName = applicationName;
            vw_aspnet_Applications.LoweredApplicationName = loweredApplicationName;
            vw_aspnet_Applications.ApplicationId = applicationId;
            return vw_aspnet_Applications;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ApplicationName
        {
            get
            {
                return _ApplicationName;
            }
            set
            {
                if (_ApplicationName != value)
                {
                    OnApplicationNameChanging(value);
                    ReportPropertyChanging("ApplicationName");
                    _ApplicationName = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("ApplicationName");
                    OnApplicationNameChanged();
                }
            }
        }
        private global::System.String _ApplicationName;
        partial void OnApplicationNameChanging(global::System.String value);
        partial void OnApplicationNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String LoweredApplicationName
        {
            get
            {
                return _LoweredApplicationName;
            }
            set
            {
                if (_LoweredApplicationName != value)
                {
                    OnLoweredApplicationNameChanging(value);
                    ReportPropertyChanging("LoweredApplicationName");
                    _LoweredApplicationName = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("LoweredApplicationName");
                    OnLoweredApplicationNameChanged();
                }
            }
        }
        private global::System.String _LoweredApplicationName;
        partial void OnLoweredApplicationNameChanging(global::System.String value);
        partial void OnLoweredApplicationNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ApplicationId
        {
            get
            {
                return _ApplicationId;
            }
            set
            {
                if (_ApplicationId != value)
                {
                    OnApplicationIdChanging(value);
                    ReportPropertyChanging("ApplicationId");
                    _ApplicationId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ApplicationId");
                    OnApplicationIdChanged();
                }
            }
        }
        private global::System.Guid _ApplicationId;
        partial void OnApplicationIdChanging(global::System.Guid value);
        partial void OnApplicationIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();

        #endregion

    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="web.Models", Name="vw_aspnet_MembershipUsers")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class vw_aspnet_MembershipUsers : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта vw_aspnet_MembershipUsers.
        /// </summary>
        /// <param name="userId">Исходное значение свойства UserId.</param>
        /// <param name="passwordFormat">Исходное значение свойства PasswordFormat.</param>
        /// <param name="isApproved">Исходное значение свойства IsApproved.</param>
        /// <param name="isLockedOut">Исходное значение свойства IsLockedOut.</param>
        /// <param name="createDate">Исходное значение свойства CreateDate.</param>
        /// <param name="lastLoginDate">Исходное значение свойства LastLoginDate.</param>
        /// <param name="lastPasswordChangedDate">Исходное значение свойства LastPasswordChangedDate.</param>
        /// <param name="lastLockoutDate">Исходное значение свойства LastLockoutDate.</param>
        /// <param name="failedPasswordAttemptCount">Исходное значение свойства FailedPasswordAttemptCount.</param>
        /// <param name="failedPasswordAttemptWindowStart">Исходное значение свойства FailedPasswordAttemptWindowStart.</param>
        /// <param name="failedPasswordAnswerAttemptCount">Исходное значение свойства FailedPasswordAnswerAttemptCount.</param>
        /// <param name="failedPasswordAnswerAttemptWindowStart">Исходное значение свойства FailedPasswordAnswerAttemptWindowStart.</param>
        /// <param name="applicationId">Исходное значение свойства ApplicationId.</param>
        /// <param name="userName">Исходное значение свойства UserName.</param>
        /// <param name="isAnonymous">Исходное значение свойства IsAnonymous.</param>
        /// <param name="lastActivityDate">Исходное значение свойства LastActivityDate.</param>
        public static vw_aspnet_MembershipUsers Createvw_aspnet_MembershipUsers(global::System.Guid userId, global::System.Int32 passwordFormat, global::System.Boolean isApproved, global::System.Boolean isLockedOut, global::System.DateTime createDate, global::System.DateTime lastLoginDate, global::System.DateTime lastPasswordChangedDate, global::System.DateTime lastLockoutDate, global::System.Int32 failedPasswordAttemptCount, global::System.DateTime failedPasswordAttemptWindowStart, global::System.Int32 failedPasswordAnswerAttemptCount, global::System.DateTime failedPasswordAnswerAttemptWindowStart, global::System.Guid applicationId, global::System.String userName, global::System.Boolean isAnonymous, global::System.DateTime lastActivityDate)
        {
            vw_aspnet_MembershipUsers vw_aspnet_MembershipUsers = new vw_aspnet_MembershipUsers();
            vw_aspnet_MembershipUsers.UserId = userId;
            vw_aspnet_MembershipUsers.PasswordFormat = passwordFormat;
            vw_aspnet_MembershipUsers.IsApproved = isApproved;
            vw_aspnet_MembershipUsers.IsLockedOut = isLockedOut;
            vw_aspnet_MembershipUsers.CreateDate = createDate;
            vw_aspnet_MembershipUsers.LastLoginDate = lastLoginDate;
            vw_aspnet_MembershipUsers.LastPasswordChangedDate = lastPasswordChangedDate;
            vw_aspnet_MembershipUsers.LastLockoutDate = lastLockoutDate;
            vw_aspnet_MembershipUsers.FailedPasswordAttemptCount = failedPasswordAttemptCount;
            vw_aspnet_MembershipUsers.FailedPasswordAttemptWindowStart = failedPasswordAttemptWindowStart;
            vw_aspnet_MembershipUsers.FailedPasswordAnswerAttemptCount = failedPasswordAnswerAttemptCount;
            vw_aspnet_MembershipUsers.FailedPasswordAnswerAttemptWindowStart = failedPasswordAnswerAttemptWindowStart;
            vw_aspnet_MembershipUsers.ApplicationId = applicationId;
            vw_aspnet_MembershipUsers.UserName = userName;
            vw_aspnet_MembershipUsers.IsAnonymous = isAnonymous;
            vw_aspnet_MembershipUsers.LastActivityDate = lastActivityDate;
            return vw_aspnet_MembershipUsers;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid UserId
        {
            get
            {
                return _UserId;
            }
            set
            {
                if (_UserId != value)
                {
                    OnUserIdChanging(value);
                    ReportPropertyChanging("UserId");
                    _UserId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("UserId");
                    OnUserIdChanged();
                }
            }
        }
        private global::System.Guid _UserId;
        partial void OnUserIdChanging(global::System.Guid value);
        partial void OnUserIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 PasswordFormat
        {
            get
            {
                return _PasswordFormat;
            }
            set
            {
                if (_PasswordFormat != value)
                {
                    OnPasswordFormatChanging(value);
                    ReportPropertyChanging("PasswordFormat");
                    _PasswordFormat = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("PasswordFormat");
                    OnPasswordFormatChanged();
                }
            }
        }
        private global::System.Int32 _PasswordFormat;
        partial void OnPasswordFormatChanging(global::System.Int32 value);
        partial void OnPasswordFormatChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String MobilePIN
        {
            get
            {
                return _MobilePIN;
            }
            set
            {
                OnMobilePINChanging(value);
                ReportPropertyChanging("MobilePIN");
                _MobilePIN = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("MobilePIN");
                OnMobilePINChanged();
            }
        }
        private global::System.String _MobilePIN;
        partial void OnMobilePINChanging(global::System.String value);
        partial void OnMobilePINChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Email
        {
            get
            {
                return _Email;
            }
            set
            {
                OnEmailChanging(value);
                ReportPropertyChanging("Email");
                _Email = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Email");
                OnEmailChanged();
            }
        }
        private global::System.String _Email;
        partial void OnEmailChanging(global::System.String value);
        partial void OnEmailChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String LoweredEmail
        {
            get
            {
                return _LoweredEmail;
            }
            set
            {
                OnLoweredEmailChanging(value);
                ReportPropertyChanging("LoweredEmail");
                _LoweredEmail = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("LoweredEmail");
                OnLoweredEmailChanged();
            }
        }
        private global::System.String _LoweredEmail;
        partial void OnLoweredEmailChanging(global::System.String value);
        partial void OnLoweredEmailChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String PasswordQuestion
        {
            get
            {
                return _PasswordQuestion;
            }
            set
            {
                OnPasswordQuestionChanging(value);
                ReportPropertyChanging("PasswordQuestion");
                _PasswordQuestion = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("PasswordQuestion");
                OnPasswordQuestionChanged();
            }
        }
        private global::System.String _PasswordQuestion;
        partial void OnPasswordQuestionChanging(global::System.String value);
        partial void OnPasswordQuestionChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String PasswordAnswer
        {
            get
            {
                return _PasswordAnswer;
            }
            set
            {
                OnPasswordAnswerChanging(value);
                ReportPropertyChanging("PasswordAnswer");
                _PasswordAnswer = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("PasswordAnswer");
                OnPasswordAnswerChanged();
            }
        }
        private global::System.String _PasswordAnswer;
        partial void OnPasswordAnswerChanging(global::System.String value);
        partial void OnPasswordAnswerChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsApproved
        {
            get
            {
                return _IsApproved;
            }
            set
            {
                if (_IsApproved != value)
                {
                    OnIsApprovedChanging(value);
                    ReportPropertyChanging("IsApproved");
                    _IsApproved = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("IsApproved");
                    OnIsApprovedChanged();
                }
            }
        }
        private global::System.Boolean _IsApproved;
        partial void OnIsApprovedChanging(global::System.Boolean value);
        partial void OnIsApprovedChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsLockedOut
        {
            get
            {
                return _IsLockedOut;
            }
            set
            {
                if (_IsLockedOut != value)
                {
                    OnIsLockedOutChanging(value);
                    ReportPropertyChanging("IsLockedOut");
                    _IsLockedOut = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("IsLockedOut");
                    OnIsLockedOutChanged();
                }
            }
        }
        private global::System.Boolean _IsLockedOut;
        partial void OnIsLockedOutChanging(global::System.Boolean value);
        partial void OnIsLockedOutChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime CreateDate
        {
            get
            {
                return _CreateDate;
            }
            set
            {
                if (_CreateDate != value)
                {
                    OnCreateDateChanging(value);
                    ReportPropertyChanging("CreateDate");
                    _CreateDate = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("CreateDate");
                    OnCreateDateChanged();
                }
            }
        }
        private global::System.DateTime _CreateDate;
        partial void OnCreateDateChanging(global::System.DateTime value);
        partial void OnCreateDateChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime LastLoginDate
        {
            get
            {
                return _LastLoginDate;
            }
            set
            {
                if (_LastLoginDate != value)
                {
                    OnLastLoginDateChanging(value);
                    ReportPropertyChanging("LastLoginDate");
                    _LastLoginDate = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("LastLoginDate");
                    OnLastLoginDateChanged();
                }
            }
        }
        private global::System.DateTime _LastLoginDate;
        partial void OnLastLoginDateChanging(global::System.DateTime value);
        partial void OnLastLoginDateChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime LastPasswordChangedDate
        {
            get
            {
                return _LastPasswordChangedDate;
            }
            set
            {
                if (_LastPasswordChangedDate != value)
                {
                    OnLastPasswordChangedDateChanging(value);
                    ReportPropertyChanging("LastPasswordChangedDate");
                    _LastPasswordChangedDate = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("LastPasswordChangedDate");
                    OnLastPasswordChangedDateChanged();
                }
            }
        }
        private global::System.DateTime _LastPasswordChangedDate;
        partial void OnLastPasswordChangedDateChanging(global::System.DateTime value);
        partial void OnLastPasswordChangedDateChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime LastLockoutDate
        {
            get
            {
                return _LastLockoutDate;
            }
            set
            {
                if (_LastLockoutDate != value)
                {
                    OnLastLockoutDateChanging(value);
                    ReportPropertyChanging("LastLockoutDate");
                    _LastLockoutDate = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("LastLockoutDate");
                    OnLastLockoutDateChanged();
                }
            }
        }
        private global::System.DateTime _LastLockoutDate;
        partial void OnLastLockoutDateChanging(global::System.DateTime value);
        partial void OnLastLockoutDateChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 FailedPasswordAttemptCount
        {
            get
            {
                return _FailedPasswordAttemptCount;
            }
            set
            {
                if (_FailedPasswordAttemptCount != value)
                {
                    OnFailedPasswordAttemptCountChanging(value);
                    ReportPropertyChanging("FailedPasswordAttemptCount");
                    _FailedPasswordAttemptCount = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("FailedPasswordAttemptCount");
                    OnFailedPasswordAttemptCountChanged();
                }
            }
        }
        private global::System.Int32 _FailedPasswordAttemptCount;
        partial void OnFailedPasswordAttemptCountChanging(global::System.Int32 value);
        partial void OnFailedPasswordAttemptCountChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime FailedPasswordAttemptWindowStart
        {
            get
            {
                return _FailedPasswordAttemptWindowStart;
            }
            set
            {
                if (_FailedPasswordAttemptWindowStart != value)
                {
                    OnFailedPasswordAttemptWindowStartChanging(value);
                    ReportPropertyChanging("FailedPasswordAttemptWindowStart");
                    _FailedPasswordAttemptWindowStart = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("FailedPasswordAttemptWindowStart");
                    OnFailedPasswordAttemptWindowStartChanged();
                }
            }
        }
        private global::System.DateTime _FailedPasswordAttemptWindowStart;
        partial void OnFailedPasswordAttemptWindowStartChanging(global::System.DateTime value);
        partial void OnFailedPasswordAttemptWindowStartChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 FailedPasswordAnswerAttemptCount
        {
            get
            {
                return _FailedPasswordAnswerAttemptCount;
            }
            set
            {
                if (_FailedPasswordAnswerAttemptCount != value)
                {
                    OnFailedPasswordAnswerAttemptCountChanging(value);
                    ReportPropertyChanging("FailedPasswordAnswerAttemptCount");
                    _FailedPasswordAnswerAttemptCount = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("FailedPasswordAnswerAttemptCount");
                    OnFailedPasswordAnswerAttemptCountChanged();
                }
            }
        }
        private global::System.Int32 _FailedPasswordAnswerAttemptCount;
        partial void OnFailedPasswordAnswerAttemptCountChanging(global::System.Int32 value);
        partial void OnFailedPasswordAnswerAttemptCountChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime FailedPasswordAnswerAttemptWindowStart
        {
            get
            {
                return _FailedPasswordAnswerAttemptWindowStart;
            }
            set
            {
                if (_FailedPasswordAnswerAttemptWindowStart != value)
                {
                    OnFailedPasswordAnswerAttemptWindowStartChanging(value);
                    ReportPropertyChanging("FailedPasswordAnswerAttemptWindowStart");
                    _FailedPasswordAnswerAttemptWindowStart = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("FailedPasswordAnswerAttemptWindowStart");
                    OnFailedPasswordAnswerAttemptWindowStartChanged();
                }
            }
        }
        private global::System.DateTime _FailedPasswordAnswerAttemptWindowStart;
        partial void OnFailedPasswordAnswerAttemptWindowStartChanging(global::System.DateTime value);
        partial void OnFailedPasswordAnswerAttemptWindowStartChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Comment
        {
            get
            {
                return _Comment;
            }
            set
            {
                OnCommentChanging(value);
                ReportPropertyChanging("Comment");
                _Comment = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Comment");
                OnCommentChanged();
            }
        }
        private global::System.String _Comment;
        partial void OnCommentChanging(global::System.String value);
        partial void OnCommentChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ApplicationId
        {
            get
            {
                return _ApplicationId;
            }
            set
            {
                if (_ApplicationId != value)
                {
                    OnApplicationIdChanging(value);
                    ReportPropertyChanging("ApplicationId");
                    _ApplicationId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ApplicationId");
                    OnApplicationIdChanged();
                }
            }
        }
        private global::System.Guid _ApplicationId;
        partial void OnApplicationIdChanging(global::System.Guid value);
        partial void OnApplicationIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String UserName
        {
            get
            {
                return _UserName;
            }
            set
            {
                if (_UserName != value)
                {
                    OnUserNameChanging(value);
                    ReportPropertyChanging("UserName");
                    _UserName = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("UserName");
                    OnUserNameChanged();
                }
            }
        }
        private global::System.String _UserName;
        partial void OnUserNameChanging(global::System.String value);
        partial void OnUserNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String MobileAlias
        {
            get
            {
                return _MobileAlias;
            }
            set
            {
                OnMobileAliasChanging(value);
                ReportPropertyChanging("MobileAlias");
                _MobileAlias = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("MobileAlias");
                OnMobileAliasChanged();
            }
        }
        private global::System.String _MobileAlias;
        partial void OnMobileAliasChanging(global::System.String value);
        partial void OnMobileAliasChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsAnonymous
        {
            get
            {
                return _IsAnonymous;
            }
            set
            {
                if (_IsAnonymous != value)
                {
                    OnIsAnonymousChanging(value);
                    ReportPropertyChanging("IsAnonymous");
                    _IsAnonymous = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("IsAnonymous");
                    OnIsAnonymousChanged();
                }
            }
        }
        private global::System.Boolean _IsAnonymous;
        partial void OnIsAnonymousChanging(global::System.Boolean value);
        partial void OnIsAnonymousChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime LastActivityDate
        {
            get
            {
                return _LastActivityDate;
            }
            set
            {
                if (_LastActivityDate != value)
                {
                    OnLastActivityDateChanging(value);
                    ReportPropertyChanging("LastActivityDate");
                    _LastActivityDate = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("LastActivityDate");
                    OnLastActivityDateChanged();
                }
            }
        }
        private global::System.DateTime _LastActivityDate;
        partial void OnLastActivityDateChanging(global::System.DateTime value);
        partial void OnLastActivityDateChanged();

        #endregion

    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="web.Models", Name="vw_aspnet_Profiles")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class vw_aspnet_Profiles : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта vw_aspnet_Profiles.
        /// </summary>
        /// <param name="userId">Исходное значение свойства UserId.</param>
        /// <param name="lastUpdatedDate">Исходное значение свойства LastUpdatedDate.</param>
        public static vw_aspnet_Profiles Createvw_aspnet_Profiles(global::System.Guid userId, global::System.DateTime lastUpdatedDate)
        {
            vw_aspnet_Profiles vw_aspnet_Profiles = new vw_aspnet_Profiles();
            vw_aspnet_Profiles.UserId = userId;
            vw_aspnet_Profiles.LastUpdatedDate = lastUpdatedDate;
            return vw_aspnet_Profiles;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid UserId
        {
            get
            {
                return _UserId;
            }
            set
            {
                if (_UserId != value)
                {
                    OnUserIdChanging(value);
                    ReportPropertyChanging("UserId");
                    _UserId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("UserId");
                    OnUserIdChanged();
                }
            }
        }
        private global::System.Guid _UserId;
        partial void OnUserIdChanging(global::System.Guid value);
        partial void OnUserIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime LastUpdatedDate
        {
            get
            {
                return _LastUpdatedDate;
            }
            set
            {
                if (_LastUpdatedDate != value)
                {
                    OnLastUpdatedDateChanging(value);
                    ReportPropertyChanging("LastUpdatedDate");
                    _LastUpdatedDate = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("LastUpdatedDate");
                    OnLastUpdatedDateChanged();
                }
            }
        }
        private global::System.DateTime _LastUpdatedDate;
        partial void OnLastUpdatedDateChanging(global::System.DateTime value);
        partial void OnLastUpdatedDateChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> DataSize
        {
            get
            {
                return _DataSize;
            }
            set
            {
                OnDataSizeChanging(value);
                ReportPropertyChanging("DataSize");
                _DataSize = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DataSize");
                OnDataSizeChanged();
            }
        }
        private Nullable<global::System.Int32> _DataSize;
        partial void OnDataSizeChanging(Nullable<global::System.Int32> value);
        partial void OnDataSizeChanged();

        #endregion

    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="web.Models", Name="vw_aspnet_Roles")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class vw_aspnet_Roles : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта vw_aspnet_Roles.
        /// </summary>
        /// <param name="applicationId">Исходное значение свойства ApplicationId.</param>
        /// <param name="roleId">Исходное значение свойства RoleId.</param>
        /// <param name="roleName">Исходное значение свойства RoleName.</param>
        /// <param name="loweredRoleName">Исходное значение свойства LoweredRoleName.</param>
        public static vw_aspnet_Roles Createvw_aspnet_Roles(global::System.Guid applicationId, global::System.Guid roleId, global::System.String roleName, global::System.String loweredRoleName)
        {
            vw_aspnet_Roles vw_aspnet_Roles = new vw_aspnet_Roles();
            vw_aspnet_Roles.ApplicationId = applicationId;
            vw_aspnet_Roles.RoleId = roleId;
            vw_aspnet_Roles.RoleName = roleName;
            vw_aspnet_Roles.LoweredRoleName = loweredRoleName;
            return vw_aspnet_Roles;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ApplicationId
        {
            get
            {
                return _ApplicationId;
            }
            set
            {
                if (_ApplicationId != value)
                {
                    OnApplicationIdChanging(value);
                    ReportPropertyChanging("ApplicationId");
                    _ApplicationId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ApplicationId");
                    OnApplicationIdChanged();
                }
            }
        }
        private global::System.Guid _ApplicationId;
        partial void OnApplicationIdChanging(global::System.Guid value);
        partial void OnApplicationIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid RoleId
        {
            get
            {
                return _RoleId;
            }
            set
            {
                if (_RoleId != value)
                {
                    OnRoleIdChanging(value);
                    ReportPropertyChanging("RoleId");
                    _RoleId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("RoleId");
                    OnRoleIdChanged();
                }
            }
        }
        private global::System.Guid _RoleId;
        partial void OnRoleIdChanging(global::System.Guid value);
        partial void OnRoleIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String RoleName
        {
            get
            {
                return _RoleName;
            }
            set
            {
                if (_RoleName != value)
                {
                    OnRoleNameChanging(value);
                    ReportPropertyChanging("RoleName");
                    _RoleName = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("RoleName");
                    OnRoleNameChanged();
                }
            }
        }
        private global::System.String _RoleName;
        partial void OnRoleNameChanging(global::System.String value);
        partial void OnRoleNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String LoweredRoleName
        {
            get
            {
                return _LoweredRoleName;
            }
            set
            {
                if (_LoweredRoleName != value)
                {
                    OnLoweredRoleNameChanging(value);
                    ReportPropertyChanging("LoweredRoleName");
                    _LoweredRoleName = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("LoweredRoleName");
                    OnLoweredRoleNameChanged();
                }
            }
        }
        private global::System.String _LoweredRoleName;
        partial void OnLoweredRoleNameChanging(global::System.String value);
        partial void OnLoweredRoleNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();

        #endregion

    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="web.Models", Name="vw_aspnet_Users")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class vw_aspnet_Users : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта vw_aspnet_Users.
        /// </summary>
        /// <param name="applicationId">Исходное значение свойства ApplicationId.</param>
        /// <param name="userId">Исходное значение свойства UserId.</param>
        /// <param name="userName">Исходное значение свойства UserName.</param>
        /// <param name="loweredUserName">Исходное значение свойства LoweredUserName.</param>
        /// <param name="isAnonymous">Исходное значение свойства IsAnonymous.</param>
        /// <param name="lastActivityDate">Исходное значение свойства LastActivityDate.</param>
        public static vw_aspnet_Users Createvw_aspnet_Users(global::System.Guid applicationId, global::System.Guid userId, global::System.String userName, global::System.String loweredUserName, global::System.Boolean isAnonymous, global::System.DateTime lastActivityDate)
        {
            vw_aspnet_Users vw_aspnet_Users = new vw_aspnet_Users();
            vw_aspnet_Users.ApplicationId = applicationId;
            vw_aspnet_Users.UserId = userId;
            vw_aspnet_Users.UserName = userName;
            vw_aspnet_Users.LoweredUserName = loweredUserName;
            vw_aspnet_Users.IsAnonymous = isAnonymous;
            vw_aspnet_Users.LastActivityDate = lastActivityDate;
            return vw_aspnet_Users;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ApplicationId
        {
            get
            {
                return _ApplicationId;
            }
            set
            {
                if (_ApplicationId != value)
                {
                    OnApplicationIdChanging(value);
                    ReportPropertyChanging("ApplicationId");
                    _ApplicationId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ApplicationId");
                    OnApplicationIdChanged();
                }
            }
        }
        private global::System.Guid _ApplicationId;
        partial void OnApplicationIdChanging(global::System.Guid value);
        partial void OnApplicationIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid UserId
        {
            get
            {
                return _UserId;
            }
            set
            {
                if (_UserId != value)
                {
                    OnUserIdChanging(value);
                    ReportPropertyChanging("UserId");
                    _UserId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("UserId");
                    OnUserIdChanged();
                }
            }
        }
        private global::System.Guid _UserId;
        partial void OnUserIdChanging(global::System.Guid value);
        partial void OnUserIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String UserName
        {
            get
            {
                return _UserName;
            }
            set
            {
                if (_UserName != value)
                {
                    OnUserNameChanging(value);
                    ReportPropertyChanging("UserName");
                    _UserName = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("UserName");
                    OnUserNameChanged();
                }
            }
        }
        private global::System.String _UserName;
        partial void OnUserNameChanging(global::System.String value);
        partial void OnUserNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String LoweredUserName
        {
            get
            {
                return _LoweredUserName;
            }
            set
            {
                if (_LoweredUserName != value)
                {
                    OnLoweredUserNameChanging(value);
                    ReportPropertyChanging("LoweredUserName");
                    _LoweredUserName = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("LoweredUserName");
                    OnLoweredUserNameChanged();
                }
            }
        }
        private global::System.String _LoweredUserName;
        partial void OnLoweredUserNameChanging(global::System.String value);
        partial void OnLoweredUserNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String MobileAlias
        {
            get
            {
                return _MobileAlias;
            }
            set
            {
                OnMobileAliasChanging(value);
                ReportPropertyChanging("MobileAlias");
                _MobileAlias = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("MobileAlias");
                OnMobileAliasChanged();
            }
        }
        private global::System.String _MobileAlias;
        partial void OnMobileAliasChanging(global::System.String value);
        partial void OnMobileAliasChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsAnonymous
        {
            get
            {
                return _IsAnonymous;
            }
            set
            {
                if (_IsAnonymous != value)
                {
                    OnIsAnonymousChanging(value);
                    ReportPropertyChanging("IsAnonymous");
                    _IsAnonymous = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("IsAnonymous");
                    OnIsAnonymousChanged();
                }
            }
        }
        private global::System.Boolean _IsAnonymous;
        partial void OnIsAnonymousChanging(global::System.Boolean value);
        partial void OnIsAnonymousChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime LastActivityDate
        {
            get
            {
                return _LastActivityDate;
            }
            set
            {
                if (_LastActivityDate != value)
                {
                    OnLastActivityDateChanging(value);
                    ReportPropertyChanging("LastActivityDate");
                    _LastActivityDate = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("LastActivityDate");
                    OnLastActivityDateChanged();
                }
            }
        }
        private global::System.DateTime _LastActivityDate;
        partial void OnLastActivityDateChanging(global::System.DateTime value);
        partial void OnLastActivityDateChanged();

        #endregion

    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="web.Models", Name="vw_aspnet_UsersInRoles")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class vw_aspnet_UsersInRoles : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта vw_aspnet_UsersInRoles.
        /// </summary>
        /// <param name="userId">Исходное значение свойства UserId.</param>
        /// <param name="roleId">Исходное значение свойства RoleId.</param>
        public static vw_aspnet_UsersInRoles Createvw_aspnet_UsersInRoles(global::System.Guid userId, global::System.Guid roleId)
        {
            vw_aspnet_UsersInRoles vw_aspnet_UsersInRoles = new vw_aspnet_UsersInRoles();
            vw_aspnet_UsersInRoles.UserId = userId;
            vw_aspnet_UsersInRoles.RoleId = roleId;
            return vw_aspnet_UsersInRoles;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid UserId
        {
            get
            {
                return _UserId;
            }
            set
            {
                if (_UserId != value)
                {
                    OnUserIdChanging(value);
                    ReportPropertyChanging("UserId");
                    _UserId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("UserId");
                    OnUserIdChanged();
                }
            }
        }
        private global::System.Guid _UserId;
        partial void OnUserIdChanging(global::System.Guid value);
        partial void OnUserIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid RoleId
        {
            get
            {
                return _RoleId;
            }
            set
            {
                if (_RoleId != value)
                {
                    OnRoleIdChanging(value);
                    ReportPropertyChanging("RoleId");
                    _RoleId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("RoleId");
                    OnRoleIdChanged();
                }
            }
        }
        private global::System.Guid _RoleId;
        partial void OnRoleIdChanging(global::System.Guid value);
        partial void OnRoleIdChanged();

        #endregion

    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="web.Models", Name="vw_aspnet_WebPartState_Paths")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class vw_aspnet_WebPartState_Paths : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта vw_aspnet_WebPartState_Paths.
        /// </summary>
        /// <param name="applicationId">Исходное значение свойства ApplicationId.</param>
        /// <param name="pathId">Исходное значение свойства PathId.</param>
        /// <param name="path">Исходное значение свойства Path.</param>
        /// <param name="loweredPath">Исходное значение свойства LoweredPath.</param>
        public static vw_aspnet_WebPartState_Paths Createvw_aspnet_WebPartState_Paths(global::System.Guid applicationId, global::System.Guid pathId, global::System.String path, global::System.String loweredPath)
        {
            vw_aspnet_WebPartState_Paths vw_aspnet_WebPartState_Paths = new vw_aspnet_WebPartState_Paths();
            vw_aspnet_WebPartState_Paths.ApplicationId = applicationId;
            vw_aspnet_WebPartState_Paths.PathId = pathId;
            vw_aspnet_WebPartState_Paths.Path = path;
            vw_aspnet_WebPartState_Paths.LoweredPath = loweredPath;
            return vw_aspnet_WebPartState_Paths;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ApplicationId
        {
            get
            {
                return _ApplicationId;
            }
            set
            {
                if (_ApplicationId != value)
                {
                    OnApplicationIdChanging(value);
                    ReportPropertyChanging("ApplicationId");
                    _ApplicationId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ApplicationId");
                    OnApplicationIdChanged();
                }
            }
        }
        private global::System.Guid _ApplicationId;
        partial void OnApplicationIdChanging(global::System.Guid value);
        partial void OnApplicationIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid PathId
        {
            get
            {
                return _PathId;
            }
            set
            {
                if (_PathId != value)
                {
                    OnPathIdChanging(value);
                    ReportPropertyChanging("PathId");
                    _PathId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("PathId");
                    OnPathIdChanged();
                }
            }
        }
        private global::System.Guid _PathId;
        partial void OnPathIdChanging(global::System.Guid value);
        partial void OnPathIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Path
        {
            get
            {
                return _Path;
            }
            set
            {
                if (_Path != value)
                {
                    OnPathChanging(value);
                    ReportPropertyChanging("Path");
                    _Path = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("Path");
                    OnPathChanged();
                }
            }
        }
        private global::System.String _Path;
        partial void OnPathChanging(global::System.String value);
        partial void OnPathChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String LoweredPath
        {
            get
            {
                return _LoweredPath;
            }
            set
            {
                if (_LoweredPath != value)
                {
                    OnLoweredPathChanging(value);
                    ReportPropertyChanging("LoweredPath");
                    _LoweredPath = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("LoweredPath");
                    OnLoweredPathChanged();
                }
            }
        }
        private global::System.String _LoweredPath;
        partial void OnLoweredPathChanging(global::System.String value);
        partial void OnLoweredPathChanged();

        #endregion

    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="web.Models", Name="vw_aspnet_WebPartState_Shared")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class vw_aspnet_WebPartState_Shared : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта vw_aspnet_WebPartState_Shared.
        /// </summary>
        /// <param name="pathId">Исходное значение свойства PathId.</param>
        /// <param name="lastUpdatedDate">Исходное значение свойства LastUpdatedDate.</param>
        public static vw_aspnet_WebPartState_Shared Createvw_aspnet_WebPartState_Shared(global::System.Guid pathId, global::System.DateTime lastUpdatedDate)
        {
            vw_aspnet_WebPartState_Shared vw_aspnet_WebPartState_Shared = new vw_aspnet_WebPartState_Shared();
            vw_aspnet_WebPartState_Shared.PathId = pathId;
            vw_aspnet_WebPartState_Shared.LastUpdatedDate = lastUpdatedDate;
            return vw_aspnet_WebPartState_Shared;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid PathId
        {
            get
            {
                return _PathId;
            }
            set
            {
                if (_PathId != value)
                {
                    OnPathIdChanging(value);
                    ReportPropertyChanging("PathId");
                    _PathId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("PathId");
                    OnPathIdChanged();
                }
            }
        }
        private global::System.Guid _PathId;
        partial void OnPathIdChanging(global::System.Guid value);
        partial void OnPathIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> DataSize
        {
            get
            {
                return _DataSize;
            }
            set
            {
                OnDataSizeChanging(value);
                ReportPropertyChanging("DataSize");
                _DataSize = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DataSize");
                OnDataSizeChanged();
            }
        }
        private Nullable<global::System.Int32> _DataSize;
        partial void OnDataSizeChanging(Nullable<global::System.Int32> value);
        partial void OnDataSizeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime LastUpdatedDate
        {
            get
            {
                return _LastUpdatedDate;
            }
            set
            {
                if (_LastUpdatedDate != value)
                {
                    OnLastUpdatedDateChanging(value);
                    ReportPropertyChanging("LastUpdatedDate");
                    _LastUpdatedDate = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("LastUpdatedDate");
                    OnLastUpdatedDateChanged();
                }
            }
        }
        private global::System.DateTime _LastUpdatedDate;
        partial void OnLastUpdatedDateChanging(global::System.DateTime value);
        partial void OnLastUpdatedDateChanged();

        #endregion

    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="web.Models", Name="vw_aspnet_WebPartState_User")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class vw_aspnet_WebPartState_User : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта vw_aspnet_WebPartState_User.
        /// </summary>
        /// <param name="lastUpdatedDate">Исходное значение свойства LastUpdatedDate.</param>
        public static vw_aspnet_WebPartState_User Createvw_aspnet_WebPartState_User(global::System.DateTime lastUpdatedDate)
        {
            vw_aspnet_WebPartState_User vw_aspnet_WebPartState_User = new vw_aspnet_WebPartState_User();
            vw_aspnet_WebPartState_User.LastUpdatedDate = lastUpdatedDate;
            return vw_aspnet_WebPartState_User;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Guid> PathId
        {
            get
            {
                return _PathId;
            }
            set
            {
                OnPathIdChanging(value);
                ReportPropertyChanging("PathId");
                _PathId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("PathId");
                OnPathIdChanged();
            }
        }
        private Nullable<global::System.Guid> _PathId;
        partial void OnPathIdChanging(Nullable<global::System.Guid> value);
        partial void OnPathIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Guid> UserId
        {
            get
            {
                return _UserId;
            }
            set
            {
                OnUserIdChanging(value);
                ReportPropertyChanging("UserId");
                _UserId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("UserId");
                OnUserIdChanged();
            }
        }
        private Nullable<global::System.Guid> _UserId;
        partial void OnUserIdChanging(Nullable<global::System.Guid> value);
        partial void OnUserIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> DataSize
        {
            get
            {
                return _DataSize;
            }
            set
            {
                OnDataSizeChanging(value);
                ReportPropertyChanging("DataSize");
                _DataSize = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DataSize");
                OnDataSizeChanged();
            }
        }
        private Nullable<global::System.Int32> _DataSize;
        partial void OnDataSizeChanging(Nullable<global::System.Int32> value);
        partial void OnDataSizeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime LastUpdatedDate
        {
            get
            {
                return _LastUpdatedDate;
            }
            set
            {
                if (_LastUpdatedDate != value)
                {
                    OnLastUpdatedDateChanging(value);
                    ReportPropertyChanging("LastUpdatedDate");
                    _LastUpdatedDate = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("LastUpdatedDate");
                    OnLastUpdatedDateChanged();
                }
            }
        }
        private global::System.DateTime _LastUpdatedDate;
        partial void OnLastUpdatedDateChanging(global::System.DateTime value);
        partial void OnLastUpdatedDateChanged();

        #endregion

    
    }

    #endregion

    #region ComplexTypes
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmComplexTypeAttribute(NamespaceName="web.Models", Name="GetPointsVsAcqTimeDataset_LastSeconds_Result")]
    [DataContractAttribute(IsReference=true)]
    [Serializable()]
    public partial class GetPointsVsAcqTimeDataset_LastSeconds_Result : ComplexObject
    {
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Double> Time
        {
            get
            {
                return _Time;
            }
            set
            {
                OnTimeChanging(value);
                ReportPropertyChanging("Time");
                _Time = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Time");
                OnTimeChanged();
            }
        }
        private Nullable<global::System.Double> _Time;
        partial void OnTimeChanging(Nullable<global::System.Double> value);
        partial void OnTimeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> Value
        {
            get
            {
                return _Value;
            }
            set
            {
                OnValueChanging(value);
                ReportPropertyChanging("Value");
                _Value = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Value");
                OnValueChanged();
            }
        }
        private Nullable<global::System.Decimal> _Value;
        partial void OnValueChanging(Nullable<global::System.Decimal> value);
        partial void OnValueChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String StringValue
        {
            get
            {
                return _StringValue;
            }
            set
            {
                OnStringValueChanging(value);
                ReportPropertyChanging("StringValue");
                _StringValue = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("StringValue");
                OnStringValueChanged();
            }
        }
        private global::System.String _StringValue;
        partial void OnStringValueChanging(global::System.String value);
        partial void OnStringValueChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> ElementID
        {
            get
            {
                return _ElementID;
            }
            set
            {
                OnElementIDChanging(value);
                ReportPropertyChanging("ElementID");
                _ElementID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ElementID");
                OnElementIDChanged();
            }
        }
        private Nullable<global::System.Int64> _ElementID;
        partial void OnElementIDChanging(Nullable<global::System.Int64> value);
        partial void OnElementIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> OriginalAcqTime
        {
            get
            {
                return _OriginalAcqTime;
            }
            set
            {
                OnOriginalAcqTimeChanging(value);
                ReportPropertyChanging("OriginalAcqTime");
                _OriginalAcqTime = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("OriginalAcqTime");
                OnOriginalAcqTimeChanged();
            }
        }
        private Nullable<global::System.DateTime> _OriginalAcqTime;
        partial void OnOriginalAcqTimeChanging(Nullable<global::System.DateTime> value);
        partial void OnOriginalAcqTimeChanged();

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmComplexTypeAttribute(NamespaceName="web.Models", Name="GetPointsVsAcqTimeDataset_LastSeconds_Result1")]
    [DataContractAttribute(IsReference=true)]
    [Serializable()]
    public partial class GetPointsVsAcqTimeDataset_LastSeconds_Result1 : ComplexObject
    {
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Double> Time
        {
            get
            {
                return _Time;
            }
            set
            {
                OnTimeChanging(value);
                ReportPropertyChanging("Time");
                _Time = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Time");
                OnTimeChanged();
            }
        }
        private Nullable<global::System.Double> _Time;
        partial void OnTimeChanging(Nullable<global::System.Double> value);
        partial void OnTimeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> Value
        {
            get
            {
                return _Value;
            }
            set
            {
                OnValueChanging(value);
                ReportPropertyChanging("Value");
                _Value = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Value");
                OnValueChanged();
            }
        }
        private Nullable<global::System.Decimal> _Value;
        partial void OnValueChanging(Nullable<global::System.Decimal> value);
        partial void OnValueChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String StringValue
        {
            get
            {
                return _StringValue;
            }
            set
            {
                OnStringValueChanging(value);
                ReportPropertyChanging("StringValue");
                _StringValue = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("StringValue");
                OnStringValueChanged();
            }
        }
        private global::System.String _StringValue;
        partial void OnStringValueChanging(global::System.String value);
        partial void OnStringValueChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> ElementID
        {
            get
            {
                return _ElementID;
            }
            set
            {
                OnElementIDChanging(value);
                ReportPropertyChanging("ElementID");
                _ElementID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ElementID");
                OnElementIDChanged();
            }
        }
        private Nullable<global::System.Int64> _ElementID;
        partial void OnElementIDChanging(Nullable<global::System.Int64> value);
        partial void OnElementIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> OriginalAcqTime
        {
            get
            {
                return _OriginalAcqTime;
            }
            set
            {
                OnOriginalAcqTimeChanging(value);
                ReportPropertyChanging("OriginalAcqTime");
                _OriginalAcqTime = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("OriginalAcqTime");
                OnOriginalAcqTimeChanged();
            }
        }
        private Nullable<global::System.DateTime> _OriginalAcqTime;
        partial void OnOriginalAcqTimeChanging(Nullable<global::System.DateTime> value);
        partial void OnOriginalAcqTimeChanged();

        #endregion

    }

    #endregion

    
}
